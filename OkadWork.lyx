#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass literate-article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Section
Boot Process
\end_layout

\begin_layout Scrap
<<BootJump>>=
\begin_inset Newline newline
\end_inset

200000 200002 -dc16: BootJump
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
This code actually starts running at 0x7C00
\end_layout

\begin_layout Scrap
<<Boot0>>=
\begin_inset Newline newline
\end_inset

( 00200000 ) :Boot0 JMPS, Boot1 RB,
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Section
Boot Values
\end_layout

\begin_layout Scrap
<<BootValues>>=
\begin_inset Newline newline
\end_inset

200002 200014 -dw: BootValues
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Scrap
<<SectorsPerTrack>>=
\begin_inset Newline newline
\end_inset

( 00200002 ) :SectorsPerTrack dw 0000
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
0x0B40 = 2880 512-byte sectors = 1.44MB floppy disk
\end_layout

\begin_layout Scrap
<<SectorsToLoad>>=
\begin_inset Newline newline
\end_inset

( 00200004 ) :SectorsToLoad dw 0B40
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Scrap
<<OkadWork.dsm>>=
\begin_inset Newline newline
\end_inset

[ASM HEX BITS-32
\begin_inset Newline newline
\end_inset

200000 ORG
\begin_inset Newline newline
\end_inset

BITS-16
\begin_inset Newline newline
\end_inset

<<Boot0>>
\begin_inset Newline newline
\end_inset

BITS-32
\begin_inset Newline newline
\end_inset

<<SectorsPerTrack>>
\begin_inset Newline newline
\end_inset

<<SectorsToLoad>>
\begin_inset Newline newline
\end_inset

<<UnusedStore
\begin_inset Newline newline
\end_inset

( 00200006 ) :UnusedStore dw 0000 
\begin_inset Newline newline
\end_inset

( 00200008 ) :NumberOfHeads dw 0000 
\begin_inset Newline newline
\end_inset

( 0020000A ) :BootDrive dw 0000 
\backslash
 e.g.
 80 is DOS C:, 01 is floppy B:
\begin_inset Newline newline
\end_inset

( 0020000C ) :LoadCX dw 0000 
\begin_inset Newline newline
\end_inset

( 0020000E ) :CylindersAndSectors dw 0000 
\begin_inset Newline newline
\end_inset

( 00200010 ) :StoreForDump dw 0000 
\begin_inset Newline newline
\end_inset

( 00200012 ) :ScreenLoc dw 0000 
\begin_inset Newline newline
\end_inset

( 00200014 ) :HexTable d$ " 0123456789ABCDEF"
\begin_inset Newline newline
\end_inset

( 00200024 ) :RelocateGdt dw 0000 0000 0000 0000 0000 0000 0000 0000 
\begin_inset Newline newline
\end_inset

( 00200034 ) dw FFFF F000 9300 0000 FFFF 0000 9320 0000 
\begin_inset Newline newline
\end_inset

( 00200044 ) dw 0000 0000 0000 0000 0000 0000 0000 0000 
\begin_inset Newline newline
\end_inset

BITS-16
\begin_inset Newline newline
\end_inset

( 00200054 ) :Relocate PUSH|ALL,
\begin_inset Newline newline
\end_inset


\backslash
 called with di = start of bootblock
\begin_inset Newline newline
\end_inset

( 00200055 ) PUSH|ES, 
\begin_inset Newline newline
\end_inset

( 00200056 ) MOVI|X, CX| 0200 IW, 
\backslash
 number of words to copy
\begin_inset Newline newline
\end_inset

( 00200059 ) MOV, X| T| SI'| R| DI| 
\begin_inset Newline newline
\end_inset


\backslash
 point si to GDT for extended memory copy 
\begin_inset Newline newline
\end_inset

( 0020005B ) ADDSI, R| SI| 24 IS, 
\begin_inset Newline newline
\end_inset

( 0020005E ) XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200060 ) MOV|SG, T| ES| R| AX| 
\begin_inset Newline newline
\end_inset


\backslash
 int 15 ah=87 copy extended memory 
\begin_inset Newline newline
\end_inset

( 00200062 ) MOVI|B, AH| 87 IB, 
\begin_inset Newline newline
\end_inset

( 00200064 ) INT, 15 IB, 
\begin_inset Newline newline
\end_inset

( 00200066 ) XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset


\backslash
 adjust low word of destination addr upwards 
\begin_inset Newline newline
\end_inset

( 00200068 ) ADDI, X| BO| [DI]% 3E B, 0200 IW, 
\begin_inset Newline newline
\end_inset


\backslash
 add any carry to 3rd byte of destination 
\begin_inset Newline newline
\end_inset

( 0020006D ) ADC, B| F| AL'| BO| [DI]% 40 B, 
\begin_inset Newline newline
\end_inset

( 00200070 ) POP|ES, 
\begin_inset Newline newline
\end_inset

( 00200071 ) POP|ALL, 
\begin_inset Newline newline
\end_inset


\backslash
 so adding 200 will bring it to zero 
\begin_inset Newline newline
\end_inset

( 00200072 ) MOVI|X, BX| FE00 IW, 
\begin_inset Newline newline
\end_inset

( 00200075 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200076 ) :Boot1 JMPS, BootStart RB, 
\begin_inset Newline newline
\end_inset

( 00200078 ) :DumpToScreen PUSH|ES, 
\begin_inset Newline newline
\end_inset

( 00200079 ) PUSH|X, AX| 
\begin_inset Newline newline
\end_inset

( 0020007A ) PUSH|X, CX| 
\begin_inset Newline newline
\end_inset

( 0020007B ) PUSH|X, SI| 
\begin_inset Newline newline
\end_inset

( 0020007C ) MOVI|X, AX| B800 IW, 
\backslash
 = video RAM (text mode)
\begin_inset Newline newline
\end_inset

( 0020007F ) MOV|SG, T| ES| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200081 ) MOVI|X, CX| 4 IW, 
\backslash
 loop count
\begin_inset Newline newline
\end_inset

( 00200084 ) :DTSLoop XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200086 ) MOV, B| T| AL'| BO| [DI]% 11 B, 
\backslash
 high byte
\begin_inset Newline newline
\end_inset

( 00200089 ) SHR, 1| X| R| AX| 
\backslash
 shift right to get high nybble
\begin_inset Newline newline
\end_inset

( 0020008B ) SHR, 1| X| R| AX| 
\begin_inset Newline newline
\end_inset

( 0020008D ) SHR, 1| X| R| AX| 
\begin_inset Newline newline
\end_inset

( 0020008F ) SHR, 1| X| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200091 ) MOV, X| T| SI'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200093 ) ADD, X| T| SI'| R| DI| 
\begin_inset Newline newline
\end_inset

( 00200095 ) MOV, B| T| AL'| BO| [SI]% 14 B, 
\backslash
 index HexTable
\begin_inset Newline newline
\end_inset


\backslash
 load si with next screen location 
\begin_inset Newline newline
\end_inset

( 00200098 ) MOV, X| T| SI'| BO| [DI]% 12 B, 
\begin_inset Newline newline
\end_inset

( 0020009B ) ES:, 
\begin_inset Newline newline
\end_inset

( 0020009C ) MOV, B| F| AL'| ZO| [SI]% 
\backslash
 write to screen
\begin_inset Newline newline
\end_inset


\backslash
 point to next screen location (odd byte is attribute) 
\begin_inset Newline newline
\end_inset

( 0020009E ) ADDSI, BO| [DI]% 12 B, 2 IS, 
\begin_inset Newline newline
\end_inset

( 002000A2 ) ANDI, X| BO| [DI]% 12 B, 07FF IW, 
\backslash
 keep on-screen
\begin_inset Newline newline
\end_inset


\backslash
 shift entire word to be displayed left 4 bits 
\begin_inset Newline newline
\end_inset

( 002000A7 ) SHL, 1| X| BO| [DI]% 10 B, 
\begin_inset Newline newline
\end_inset

( 002000AA ) SHL, 1| X| BO| [DI]% 10 B, 
\begin_inset Newline newline
\end_inset

( 002000AD ) SHL, 1| X| BO| [DI]% 10 B, 
\begin_inset Newline newline
\end_inset

( 002000B0 ) SHL, 1| X| BO| [DI]% 10 B, 
\begin_inset Newline newline
\end_inset

( 002000B3 ) LOOP, DTSLoop RB, 
\backslash
 until word has been dumped
\begin_inset Newline newline
\end_inset


\backslash
 leave a space before next word is dumped 
\begin_inset Newline newline
\end_inset

( 002000B5 ) ADDSI, BO| [DI]% 12 B, 2 IS, 
\begin_inset Newline newline
\end_inset

( 002000B9 ) POP|X, SI| 
\begin_inset Newline newline
\end_inset

( 002000BA ) POP|X, CX| 
\begin_inset Newline newline
\end_inset

( 002000BB ) POP|X, AX| 
\begin_inset Newline newline
\end_inset

( 002000BC ) POP|ES, 
\begin_inset Newline newline
\end_inset

( 002000BD ) RET, 
\begin_inset Newline newline
\end_inset


\backslash
 boot starts here after two jumps 
\begin_inset Newline newline
\end_inset

( 002000BE ) :BootStart SUB, X| T| DI'| R| DI| 
\begin_inset Newline newline
\end_inset

( 002000C0 ) MOV|SG, T| DS| R| DI| 
\backslash
 zero out both DS and
\begin_inset Newline newline
\end_inset

( 002000C2 ) MOV|SG, T| ES| R| DI| 
\backslash
 ES segment registers
\begin_inset Newline newline
\end_inset

( 002000C4 ) MOVI|X, DI| 7C00 IW, 
\begin_inset Newline newline
\end_inset

( 002000C7 ) STI, 
\begin_inset Newline newline
\end_inset


\backslash
 dl contains boot disk number,
\begin_inset Newline newline
\end_inset


\backslash
 see http://tldp.org/LDP/lki/lki-1.html 
\begin_inset Newline newline
\end_inset

( 002000C8 ) MOV, X| F| DX'| BO| [DI]% 10 B, 
\begin_inset Newline newline
\end_inset

( 002000CB ) CALL, DumpToScreen RW, 
\begin_inset Newline newline
\end_inset

( 002000CE ) OR, B| F| DL'| BO| [DI]% 0A B, 
\begin_inset Newline newline
\end_inset

( 002000D1 ) MOV, B| T| DL'| BO| [DI]% 0A B, 
\begin_inset Newline newline
\end_inset


\backslash
 int 13 ah=08 read drive parameters 
\begin_inset Newline newline
\end_inset

( 002000D4 ) MOVI|B, AH| 8 IB, 
\begin_inset Newline newline
\end_inset

( 002000D6 ) PUSH|X, DI| 
\backslash
 does it mess with di?
\begin_inset Newline newline
\end_inset

( 002000D7 ) INT, 13 IB, 
\begin_inset Newline newline
\end_inset

( 002000D9 ) POP|X, DI| 
\begin_inset Newline newline
\end_inset


\backslash
 after BIOS call, dh is 0-based index of last head 
\begin_inset Newline newline
\end_inset

( 002000DA ) MOV, X| F| DX'| BO| [DI]% 10 B, 
\begin_inset Newline newline
\end_inset

( 002000DD ) CALL, DumpToScreen RW, 
\begin_inset Newline newline
\end_inset

( 002000E0 ) INC, B| R| DH| 
\backslash
 add 1 to get number of heads
\begin_inset Newline newline
\end_inset


\backslash
 store number of heads 
\begin_inset Newline newline
\end_inset

( 002000E2 ) MOV, B| F| DH'| BO| [DI]% 8 B, 
\begin_inset Newline newline
\end_inset

( 002000E5 ) MOV, X| F| DX'| BO| [DI]% 10 B, 
\begin_inset Newline newline
\end_inset


\backslash
 dump number of heads in high byte 
\begin_inset Newline newline
\end_inset

( 002000E8 ) CALL, DumpToScreen RW, 
\begin_inset Newline newline
\end_inset


\backslash
 after BIOS call, low 6 bits of cx are 1-based last track index,
\begin_inset Newline newline
\end_inset


\backslash
 high 10 bits 0-based last cylinder index 
\begin_inset Newline newline
\end_inset

( 002000EB ) MOV, X| F| CX'| BO| [DI]% 10 B, 
\begin_inset Newline newline
\end_inset

( 002000EE ) CALL, DumpToScreen RW, 
\begin_inset Newline newline
\end_inset


\backslash
 store number of cylinders and sectors 
\begin_inset Newline newline
\end_inset

( 002000F1 ) MOV, X| F| CX'| BO| [DI]% 0E B, 
\begin_inset Newline newline
\end_inset


\backslash
 extract sectors per track 
\begin_inset Newline newline
\end_inset

( 002000F4 ) ANDI, B| R| CL| 3F IB, 
\begin_inset Newline newline
\end_inset


\backslash
 store sectors per track 
\begin_inset Newline newline
\end_inset

( 002000F7 ) MOV, B| F| CL'| BO| [DI]% 2 B, 
\begin_inset Newline newline
\end_inset


\backslash
 dump sectors per track (low byte) 
\begin_inset Newline newline
\end_inset

( 002000FA ) MOV, X| F| CX'| BO| [DI]% 10 B, 
\begin_inset Newline newline
\end_inset

( 002000FD ) CALL, DumpToScreen RW, 
\begin_inset Newline newline
\end_inset


\backslash
 es:bx is buffer address, adding 200 to FE00 zeroes bx 
\begin_inset Newline newline
\end_inset

( 00200100 ) MOVI|X, BX| FE00 IW, 
\begin_inset Newline newline
\end_inset


\backslash
 ch=track, cl=sector to read 
\begin_inset Newline newline
\end_inset

( 00200103 ) MOV, X| T| CX'| BO| [DI]% 0C B, 
\begin_inset Newline newline
\end_inset


\backslash
 dh=head, dl=drive to read 
\begin_inset Newline newline
\end_inset

( 00200106 ) MOV, X| T| DX'| BO| [DI]% 0A B, 
\begin_inset Newline newline
\end_inset


\backslash
 total number of sectors to read 
\begin_inset Newline newline
\end_inset

( 00200109 ) MOV, X| T| SI'| BO| [DI]% 4 B, 
\begin_inset Newline newline
\end_inset

( 0020010C ) MOVI|X, AX| 0F00 IW, 
\begin_inset Newline newline
\end_inset


\backslash
 store sector data starting at F000 
\begin_inset Newline newline
\end_inset

( 0020010F ) MOV|SG, T| ES| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200111 ) STI, 
\begin_inset Newline newline
\end_inset


\backslash
 have we reached number of sectors per track? 
\begin_inset Newline newline
\end_inset

( 00200112 ) :ReadCylinder CMP, B| T| CL'| BO| [DI]% 2 B, 
\begin_inset Newline newline
\end_inset

( 00200115 ) J, Z| N| ReadSector RB, 
\backslash
 continue if not, else...
\begin_inset Newline newline
\end_inset

( 00200117 ) INC, B| R| DH| 
\backslash
 next head
\begin_inset Newline newline
\end_inset

( 00200119 ) CMP, B| T| DH'| BO| [DI]% 8 B, 
\backslash
 reached # heads?
\begin_inset Newline newline
\end_inset

( 0020011C ) J, Z| N| ReadTrack RB, 
\backslash
 continue if not, else...
\begin_inset Newline newline
\end_inset

( 0020011E ) XOR, B| T| DH'| R| DH| 
\backslash
 back to head 0
\begin_inset Newline newline
\end_inset

( 00200120 ) ADDI, B| R| CH| 1 IB, 
\backslash
 next track
\begin_inset Newline newline
\end_inset


\backslash
 start with first sector (only low 6 bits matter) 
\begin_inset Newline newline
\end_inset

( 00200123 ) :ReadTrack ANDI, B| R| CL| 0C0 IB, 
\begin_inset Newline newline
\end_inset


\backslash
 next sector: sector is 1-based, so must be nonzero 
\begin_inset Newline newline
\end_inset

( 00200126 ) :ReadSector INC|X, CX| 
\begin_inset Newline newline
\end_inset


\backslash
 es:bx is buffer address pointer for BIOS call 
\begin_inset Newline newline
\end_inset

( 00200127 ) ADDI, X| R| BX| 0200 IW, 
\begin_inset Newline newline
\end_inset


\backslash
 int 13 ah=02 read sectors from drive 
\begin_inset Newline newline
\end_inset

( 0020012B ) MOVI|X, AX| 0201 IW, 
\begin_inset Newline newline
\end_inset

( 0020012E ) INT, 13 IB, 
\begin_inset Newline newline
\end_inset


\backslash
 ah=error code, al=actual number of sectors read 
\begin_inset Newline newline
\end_inset

( 00200130 ) MOV, X| F| AX'| BO| [DI]% 10 B, 
\begin_inset Newline newline
\end_inset


\backslash
 check no error, and one sector read 
\begin_inset Newline newline
\end_inset

( 00200133 ) DEC|X, AX| 
\begin_inset Newline newline
\end_inset


\backslash
 if all OK, just continue 
\begin_inset Newline newline
\end_inset

( 00200134 ) J, Z| Y| NextSector RB, 
\begin_inset Newline newline
\end_inset


\backslash
 otherwise, show problem on screen 
\begin_inset Newline newline
\end_inset

( 00200136 ) CALL, DumpToScreen RW, 
\begin_inset Newline newline
\end_inset


\backslash
 Relocate has side effect of resetting buffer address bx to zero 
\begin_inset Newline newline
\end_inset

( 00200139 ) :NextSector CALL, Relocate RW, 
\begin_inset Newline newline
\end_inset

( 0020013C ) DEC|X, SI| 
\begin_inset Newline newline
\end_inset

( 0020013D ) J, Z| N| ReadCylinder RB, 
\begin_inset Newline newline
\end_inset


\backslash
 done loading colorForth, set es back to zero 
\begin_inset Newline newline
\end_inset

( 0020013F ) XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200141 ) MOV|SG, T| ES| R| AX| 
\begin_inset Newline newline
\end_inset


\backslash
 3FB is Line Control Register (LCR) of first serial port 
\begin_inset Newline newline
\end_inset

( 00200143 ) MOVI|X, DX| 03FB IW, 
\begin_inset Newline newline
\end_inset


\backslash
 03 sets word length to 8 bits,
\begin_inset Newline newline
\end_inset


\backslash
 80 sets ports 3F8 and 3F9 to be the baud rate divisor 
\begin_inset Newline newline
\end_inset

( 00200146 ) MOVI|B, AL| 83 IB, 
\begin_inset Newline newline
\end_inset

( 00200148 ) OUT|D, B'| 
\begin_inset Newline newline
\end_inset


\backslash
 divisor 03 sets baud rate to 38400,
\begin_inset Newline newline
\end_inset


\backslash
 see http://www.pelletiernet.com/helppc/8250.html 
\begin_inset Newline newline
\end_inset

( 00200149 ) MOVI|B, AL| 3 IB, 
\begin_inset Newline newline
\end_inset

( 0020014B ) SUBI, B| R| DL| 3 IB, 
\backslash
 LSBs of divisor
\begin_inset Newline newline
\end_inset

( 0020014E ) OUT|D, B'| 
\begin_inset Newline newline
\end_inset

( 0020014F ) XOR, X| T| AX'| R| AX| 
\backslash
 MSBs are 0
\begin_inset Newline newline
\end_inset

( 00200151 ) INC|X, DX| 
\backslash
 MSBs of divisor
\begin_inset Newline newline
\end_inset

( 00200152 ) OUT|D, B'| 
\begin_inset Newline newline
\end_inset

( 00200153 ) MOVI|B, AL| 3 IB, 
\backslash
 word length 8 bits (again)
\begin_inset Newline newline
\end_inset

( 00200155 ) ADDI, B| R| DL| 2 IB, 
\backslash
 point to LCR
\begin_inset Newline newline
\end_inset


\backslash
 clear bit 7, now we've set the baud rate;
\begin_inset Newline newline
\end_inset


\backslash
 this allows us to use 3F8 and 3F9 as transmit/receive buffer
\begin_inset Newline newline
\end_inset


\backslash
 and Interrupt Enable register (IER), respectively 
\begin_inset Newline newline
\end_inset

( 00200158 ) OUT|D, B'| 
\begin_inset Newline newline
\end_inset


\backslash
 zero all interrupt-enable bits 
\begin_inset Newline newline
\end_inset

( 00200159 ) XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 0020015B ) SUBI, B| R| DL| 2 IB, 
\backslash
 point to 3F9, IER
\begin_inset Newline newline
\end_inset

( 0020015E ) OUT|D, B'| 
\backslash
 disable all serial port interrupts
\begin_inset Newline newline
\end_inset


\backslash
 enable RTS (bit 1) and DTR (bit 0) 
\begin_inset Newline newline
\end_inset

( 0020015F ) MOVI|B, AL| 3 IB, 
\begin_inset Newline newline
\end_inset


\backslash
 point dx to Modem Control Register (MCR) 
\begin_inset Newline newline
\end_inset

( 00200161 ) ADDI, B| R| DL| 3 IB, 
\begin_inset Newline newline
\end_inset

( 00200164 ) OUT|D, B'| 
\backslash
 set the bits
\begin_inset Newline newline
\end_inset

( 00200165 ) JMPS, SetVideoMode RB, 
\begin_inset Newline newline
\end_inset

BITS-32
\begin_inset Newline newline
\end_inset

( 00200167 ) db 0 
\begin_inset Newline newline
\end_inset

( 00200168 ) :GdtStruct dw 0017 7D70 0000 0000 0000 0000 0000 0000 
\begin_inset Newline newline
\end_inset

( 00200178 ) dw FFFF 0000 9A00 00CF FFFF 0000 9200 00CF 
\begin_inset Newline newline
\end_inset

BITS-16
\begin_inset Newline newline
\end_inset


\backslash
 int 10 ax=4f02 set supervga video mode 
\begin_inset Newline newline
\end_inset

( 00200188 ) :SetVideoMode MOVI|X, AX| 4F02 IW, 
\begin_inset Newline newline
\end_inset


\backslash
 118 means 1024x768 pixels at 24 bits per pixel,
\begin_inset Newline newline
\end_inset


\backslash
 4000 sets linear framebuffer:
\begin_inset Newline newline
\end_inset


\backslash
 http://en.wikipedia.org/wiki/VESA_BIOS_Extensions 
\begin_inset Newline newline
\end_inset

( 0020018B ) MOVI|X, BX| 4118 IW, 
\begin_inset Newline newline
\end_inset

( 0020018E ) INT, 10 IB, 
\begin_inset Newline newline
\end_inset

( 00200190 ) CLI, 
\begin_inset Newline newline
\end_inset


\backslash
 size override allows us to use 32-bit registers in real mode 
\begin_inset Newline newline
\end_inset

( 00200191 ) OS:, 
\begin_inset Newline newline
\end_inset

( 00200192 ) XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200194 ) OS:, 
\begin_inset Newline newline
\end_inset

( 00200195 ) MOV, X| T| BX'| R| AX| 
\begin_inset Newline newline
\end_inset


\backslash
 zero out segment registers cs, ds, es 
\begin_inset Newline newline
\end_inset

( 00200197 ) MOV|SG, F| CS| R| BX| 
\begin_inset Newline newline
\end_inset

( 00200199 ) MOV|SG, T| DS| R| BX| 
\begin_inset Newline newline
\end_inset

( 0020019B ) MOV|SG, T| ES| R| AX| 
\begin_inset Newline newline
\end_inset

( 0020019D ) OS:, 
\begin_inset Newline newline
\end_inset


\backslash
 zero out registers esi and edi 
\begin_inset Newline newline
\end_inset

( 0020019E ) MOV, X| T| DI'| R| AX| 
\begin_inset Newline newline
\end_inset

( 002001A0 ) OS:, 
\begin_inset Newline newline
\end_inset

( 002001A1 ) MOV, X| T| SI'| R| AX| 
\begin_inset Newline newline
\end_inset

( 002001A3 ) MOV|SG, T| DS| R| AX| 
\begin_inset Newline newline
\end_inset


\backslash
 load Global Descriptor Table 
\begin_inset Newline newline
\end_inset

( 002001A5 ) LGDT, MEM|% 7D68 W, 
\backslash
 actually GdtStruct
\begin_inset Newline newline
\end_inset

( 002001AA ) MOVI|B, AL| 1 IB, 
\begin_inset Newline newline
\end_inset


\backslash
 see http://en.wikipedia.org/wiki/Protected_mode 
\begin_inset Newline newline
\end_inset

( 002001AC ) MOV|CD, T| CR0| AX| 
\backslash
 set PE bit
\begin_inset Newline newline
\end_inset


\backslash
 selector of 8 points cs to executable segment descriptor 
\begin_inset Newline newline
\end_inset

( 002001AF ) JMPFAR, 7DB4 W, 8 SG, 
\begin_inset Newline newline
\end_inset

BITS-32
\begin_inset Newline newline
\end_inset


\backslash
 now we are in Protected Mode (PM) 
\begin_inset Newline newline
\end_inset

( 002001B4 ) :Start32 JMPS, SetupDataSegments RB, 
\begin_inset Newline newline
\end_inset

( 002001B6 ) :SendSerial PUSH|X, AX| 
\begin_inset Newline newline
\end_inset

( 002001B7 ) PUSH|X, DX| 
\begin_inset Newline newline
\end_inset


\backslash
 fetch byte pointed to by stack return pointer 
\begin_inset Newline newline
\end_inset

( 002001B8 ) MOV, X| T| DX'| BO| [SP +1* 0] 8 B, 
\begin_inset Newline newline
\end_inset

( 002001BC ) MOV, B| T| AL'| ZO| [DX] 
\begin_inset Newline newline
\end_inset

( 002001BE ) MOVI|X, DX| 03F8 IL, 
\begin_inset Newline newline
\end_inset

( 002001C3 ) OUT|D, B'| 
\backslash
 send through serial port
\begin_inset Newline newline
\end_inset

( 002001C4 ) POP|X, DX| 
\begin_inset Newline newline
\end_inset

( 002001C5 ) POP|X, AX| 
\begin_inset Newline newline
\end_inset


\backslash
 real return address is one past data byte pointer 
\begin_inset Newline newline
\end_inset

( 002001C6 ) INC, X| ZO| [SP +1* 0] 
\begin_inset Newline newline
\end_inset

( 002001C9 ) RET, 
\begin_inset Newline newline
\end_inset


\backslash
 selector 10 points to segment descriptor
\begin_inset Newline newline
\end_inset


\backslash
 with executable bit cleared 
\begin_inset Newline newline
\end_inset

( 002001CA ) :SetupDataSegments MOVI|B, AL| 10 IB, 
\begin_inset Newline newline
\end_inset

( 002001CC ) MOV|SG, T| DS| R| AX| 
\begin_inset Newline newline
\end_inset

( 002001CE ) MOV|SG, T| ES| R| AX| 
\begin_inset Newline newline
\end_inset

( 002001D0 ) MOV|SG, T| SS| R| AX| 
\begin_inset Newline newline
\end_inset

( 002001D2 ) MOVI|X, SP| 000A0000 IL, 
\backslash
 set top of stack
\begin_inset Newline newline
\end_inset

( 002001D7 ) XOR, X| T| CX'| R| CX| 
\begin_inset Newline newline
\end_inset


\backslash
 see http://www.win.tue.nl/~aeb/linux/kbd/A20.html 
\begin_inset Newline newline
\end_inset

( 002001D9 ) MOVI|B, AL| 0D1 IB, 
\backslash
 enable address line 20
\begin_inset Newline newline
\end_inset


\backslash
 this just tells the keyboard controller we want to write to it 
\begin_inset Newline newline
\end_inset

( 002001DB ) OUT|P, B'| 64 P, 
\begin_inset Newline newline
\end_inset


\backslash
 busy-wait until keyboard controller ready 
\begin_inset Newline newline
\end_inset

( 002001DD ) :WaitKbdReady IN|P, B'| 64 P, 
\begin_inset Newline newline
\end_inset

( 002001DF ) ANDI|A, B'| 2 IB, 
\begin_inset Newline newline
\end_inset

( 002001E1 ) J, Z| N| WaitKbdReady RB, 
\begin_inset Newline newline
\end_inset


\backslash
 bit 1 (value 02) is set to enable A20 address line 
\begin_inset Newline newline
\end_inset

( 002001E3 ) MOVI|B, AL| 4B IB, 
\begin_inset Newline newline
\end_inset

( 002001E5 ) OUT|P, B'| 60 P, 
\begin_inset Newline newline
\end_inset

( 002001E7 ) MOVI|X, SI| 0009F400 IL, 
\backslash
 set esi to 9F400
\begin_inset Newline newline
\end_inset

( 002001EC ) CALL, SendSerial RL, 
\begin_inset Newline newline
\end_inset


\backslash
 send ASCII 'A' through serial port 
\begin_inset Newline newline
\end_inset

( 002001F1 ) d$ " A"
\begin_inset Newline newline
\end_inset


\backslash
 by this point, all code has been relocated to 0x200000 
\begin_inset Newline newline
\end_inset

( 002001F2 ) MOVI|X, DI| Init0 IL, 
\begin_inset Newline newline
\end_inset

( 002001F7 ) JMPO, R| DI| 
\begin_inset Newline newline
\end_inset

( 002001F9 ) db 0 0 0 0 0 55 0AA 
\begin_inset Newline newline
\end_inset

( 00200200 ) :Init0 JMPS, Init1 RB, 
\begin_inset Newline newline
\end_inset


\backslash
 see http://www.kwant.info/howto/mirror/ser-tr.html 
\begin_inset Newline newline
\end_inset

( 00200202 ) :SerialOut PUSH|X, AX| 
\begin_inset Newline newline
\end_inset

( 00200203 ) PUSH|X, DX| 
\begin_inset Newline newline
\end_inset


\backslash
 first serial port's Line Status Register [LSR] 
\begin_inset Newline newline
\end_inset

( 00200204 ) MOVI|X, DX| 03FD IL, 
\begin_inset Newline newline
\end_inset

( 00200209 ) :SOWaitReady IN|D, B'| 
\begin_inset Newline newline
\end_inset


\backslash
 check THRE, Transmitter Holding Register Empty 
\begin_inset Newline newline
\end_inset

( 0020020A ) TESTI|A, B'| 20 IB, 
\begin_inset Newline newline
\end_inset

( 0020020C ) J, Z| Y| SOWaitReady RB, 
\begin_inset Newline newline
\end_inset


\backslash
 now point to 03F8, transmit/receive buffer 
\begin_inset Newline newline
\end_inset

( 0020020E ) SUBI, B| R| DL| 5 IB, 
\begin_inset Newline newline
\end_inset


\backslash
 fetch return address from stack 
\begin_inset Newline newline
\end_inset

( 00200211 ) MOV, X| T| AX'| BO| [SP +1* 0] 8 B, 
\begin_inset Newline newline
\end_inset


\backslash
 retrieve byte at return address 
\begin_inset Newline newline
\end_inset

( 00200215 ) MOV, B| T| AL'| ZO| [AX] 
\begin_inset Newline newline
\end_inset

( 00200217 ) OUT|D, B'| 
\backslash
 send the byte out serial line
\begin_inset Newline newline
\end_inset

( 00200218 ) POP|X, DX| 
\begin_inset Newline newline
\end_inset

( 00200219 ) POP|X, AX| 
\begin_inset Newline newline
\end_inset


\backslash
 adjust return address to the opcode following data byte 
\begin_inset Newline newline
\end_inset

( 0020021A ) INC, X| ZO| [SP +1* 0] 
\begin_inset Newline newline
\end_inset

( 0020021D ) RET, 
\begin_inset Newline newline
\end_inset


\backslash
 same as SerialOut but uses byte in AL instead of from stack 
\begin_inset Newline newline
\end_inset

( 0020021E ) :SerialOutAL PUSH|X, DX| 
\begin_inset Newline newline
\end_inset

( 0020021F ) PUSH|X, AX| 
\begin_inset Newline newline
\end_inset

( 00200220 ) MOVI|X, DX| 03FD IL, 
\backslash
 serial port address
\begin_inset Newline newline
\end_inset

( 00200225 ) :SOAWaitReady IN|D, B'| 
\begin_inset Newline newline
\end_inset

( 00200226 ) TESTI|A, B'| 20 IB, 
\begin_inset Newline newline
\end_inset

( 00200228 ) J, Z| Y| SOAWaitReady RB, 
\begin_inset Newline newline
\end_inset

( 0020022A ) SUBI, B| R| DL| 5 IB, 
\begin_inset Newline newline
\end_inset

( 0020022D ) POP|X, AX| 
\begin_inset Newline newline
\end_inset

( 0020022E ) OUT|D, B'| 
\begin_inset Newline newline
\end_inset

( 0020022F ) POP|X, DX| 
\begin_inset Newline newline
\end_inset

( 00200230 ) RET, 
\begin_inset Newline newline
\end_inset


\backslash
 convert word in eax to hexadecimal and send out serial port 
\begin_inset Newline newline
\end_inset

( 00200231 ) :SerialOutHexWord PUSH|ALL, 
\begin_inset Newline newline
\end_inset

( 00200232 ) MOVI|X, CX| 8 IL, 
\begin_inset Newline newline
\end_inset

( 00200237 ) MOV, X| T| DX'| R| AX| 
\begin_inset Newline newline
\end_inset


\backslash
 rotate 4 MSBs into low nybble 
\begin_inset Newline newline
\end_inset

( 00200239 ) :SerialOutNybble ROLI, X| R| DX| 4 IS, 
\begin_inset Newline newline
\end_inset

( 0020023C ) MOV, X| T| AX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 0020023E ) ANDI|A, X'| 0F IL, 
\backslash
 mask off high bits
\begin_inset Newline newline
\end_inset


\backslash
 index into hexadecimal translation table binary->ASCII 
\begin_inset Newline newline
\end_inset

( 00200243 ) MOV, B| T| AL'| XO| [AX] 7C14 L, 
\begin_inset Newline newline
\end_inset

( 00200249 ) CALL, SerialOutAL RL, 
\begin_inset Newline newline
\end_inset

( 0020024E ) LOOP, SerialOutNybble RB, 
\begin_inset Newline newline
\end_inset


\backslash
 follow output with a space 
\begin_inset Newline newline
\end_inset

( 00200250 ) CALL, SerialOut RL, 
\begin_inset Newline newline
\end_inset

( 00200255 ) d$ BL
\begin_inset Newline newline
\end_inset

( 00200256 ) POP|ALL, 
\begin_inset Newline newline
\end_inset


\backslash
 load eax with next word from esi pointer, and increment pointer 
\begin_inset Newline newline
\end_inset

( 00200257 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200258 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200259 ) :Init1 JMPS, Initialize RB, 
\begin_inset Newline newline
\end_inset


\backslash
 send carriage return and linefeed out serial port 
\begin_inset Newline newline
\end_inset

( 0020025B ) :SerialOutCRLF CALL, SerialOut RL, 
\begin_inset Newline newline
\end_inset

( 00200260 ) d$ CTRL M
\begin_inset Newline newline
\end_inset


\backslash
 send linefeed out serial port 
\begin_inset Newline newline
\end_inset

( 00200261 ) :SerialOutLF CALL, SerialOut RL, 
\begin_inset Newline newline
\end_inset

( 00200266 ) d$ CTRL J
\begin_inset Newline newline
\end_inset

( 00200267 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200268 ) :X_serialDump MOV, X| T| CX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 0020026A ) SHRI, X| R| CX| 2 IS, 
\begin_inset Newline newline
\end_inset

( 0020026D ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 0020026E ) MOV, X| T| DI'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200270 ) XOR, X| T| DX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200272 ) :X_serialDumpLoop TESTI, B| R| DL| 0F IB, 
\begin_inset Newline newline
\end_inset

( 00200275 ) J, Z| N| X_serialDump2 RB, 
\begin_inset Newline newline
\end_inset

( 00200277 ) CALL, SerialOutCRLF RL, 
\begin_inset Newline newline
\end_inset

( 0020027C ) MOV, X| T| AX'| R| DI| 
\begin_inset Newline newline
\end_inset

( 0020027E ) ADD, X| T| AX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200280 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200283 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200285 ) CALL, SerialOutHexWord RL, 
\begin_inset Newline newline
\end_inset

( 0020028A ) CALL, SerialOut RL, 
\begin_inset Newline newline
\end_inset

( 0020028F ) d$ BL
\begin_inset Newline newline
\end_inset

( 00200290 ) :X_serialDump2 MOV, X| T| AX'| ZO| [DI +1* DX] 
\begin_inset Newline newline
\end_inset

( 00200293 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200296 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200298 ) CALL, SerialOutHexWord RL, 
\begin_inset Newline newline
\end_inset

( 0020029D ) ADDSI, R| DX| 4 IS, 
\begin_inset Newline newline
\end_inset

( 002002A0 ) LOOP, X_serialDumpLoop RB, 
\begin_inset Newline newline
\end_inset

( 002002A2 ) CALL, SerialOutCRLF RL, 
\begin_inset Newline newline
\end_inset

( 002002A7 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 002002A8 ) RET, 
\begin_inset Newline newline
\end_inset


\backslash
 this seems to be dead code, nothing calls it 
\begin_inset Newline newline
\end_inset

( 002002A9 ) :L002002A9 PUSH|ALL, 
\begin_inset Newline newline
\end_inset

( 002002AA ) MOV, X| T| DI'| BO| [SP +1* 0] 20 B, 
\begin_inset Newline newline
\end_inset

( 002002AE ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 002002B1 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002002B3 ) MOV, X| T| AX'| ZO| [DI] 
\begin_inset Newline newline
\end_inset

( 002002B5 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 002002B8 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002002BA ) MOV, X| T| AX'| BO| [DI] 4 B, 
\begin_inset Newline newline
\end_inset

( 002002BD ) CALL, X_serialDump RL, 
\begin_inset Newline newline
\end_inset

( 002002C2 ) POP|ALL, 
\begin_inset Newline newline
\end_inset

( 002002C3 ) ADDSI, ZO| [SP +1* 0] 8 IS, 
\begin_inset Newline newline
\end_inset

( 002002C7 ) RET, 
\begin_inset Newline newline
\end_inset

( 002002C8 ) :Initialize CALL, SerialOutCRLF RL, 
\begin_inset Newline newline
\end_inset


\backslash
 adding -4 to esi to push arg onto data stack 
\begin_inset Newline newline
\end_inset

( 002002CD ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset


\backslash
 though eax doesn't contain anything useful at this point 
\begin_inset Newline newline
\end_inset

( 002002D0 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset


\backslash
 checking SerialOutHexWord before sending any real data 
\begin_inset Newline newline
\end_inset

( 002002D2 ) MOVI|X, AX| 12345678 IL, 
\begin_inset Newline newline
\end_inset

( 002002D7 ) CALL, SerialOutHexWord RL, 
\begin_inset Newline newline
\end_inset

( 002002DC ) CALL, SerialOutCRLF RL, 
\begin_inset Newline newline
\end_inset

( 002002E1 ) JMP, Start0 RL, 
\begin_inset Newline newline
\end_inset

( 002002E6 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002002F6 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00200306 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00200316 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00200326 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00200336 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00200346 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00200356 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00200366 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00200376 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00200386 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00200396 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002003A6 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002003B6 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002003C6 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002003D6 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002003E6 ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002003F6 ) db 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00200400 ) :Start0 JMP, Start RL, 
\begin_inset Newline newline
\end_inset

( 00200405 ) d$ 0 0 0 0E9 0E5 1A 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00200410 ) :Version d$ " cmcf 4.1-pd" 0 
\begin_inset Newline newline
\end_inset

( 0020041C ) :X_pause LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020041F ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200421 ) PUSH|X, SI| 
\begin_inset Newline newline
\end_inset

( 00200422 ) MOV|TA, X'| L002027FC L, 
\begin_inset Newline newline
\end_inset

( 00200427 ) MOV, X| F| SP'| ZO| [AX] 
\begin_inset Newline newline
\end_inset

( 00200429 ) ADDSI, R| AX| 4 IS, 
\begin_inset Newline newline
\end_inset

( 0020042C ) JMPO, R| AX| 
\begin_inset Newline newline
\end_inset

( 0020042E ) :L0020042E POP|X, AX| 
\begin_inset Newline newline
\end_inset

( 0020042F ) MOV, X| T| SP'| ZO| [AX] 
\begin_inset Newline newline
\end_inset

( 00200431 ) MOV|FA, X'| L002027FC L, 
\begin_inset Newline newline
\end_inset

( 00200436 ) POP|X, SI| 
\begin_inset Newline newline
\end_inset

( 00200437 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200438 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200439 ) :L00200439 CALL, L0020042E RL, 
\begin_inset Newline newline
\end_inset

( 0020043E ) :L0020043E dl 0009FFF8 
\begin_inset Newline newline
\end_inset

( 00200442 ) :L00200442 CALL, L0020042E RL, 
\begin_inset Newline newline
\end_inset

( 00200447 ) :L00200447 dl 0009DBF8 
\begin_inset Newline newline
\end_inset

( 0020044B ) :L0020044B CALL, L0020042E RL, 
\begin_inset Newline newline
\end_inset

( 00200450 ) :L00200450 dl 0009B7F8 
\begin_inset Newline newline
\end_inset

( 00200454 ) :L00200454 JMPS, L00200439 RB, 
\begin_inset Newline newline
\end_inset

( 00200456 ) :L00200456 MOVI|X, DX| 0009CFFC IL, 
\begin_inset Newline newline
\end_inset

( 0020045B ) MOV, X| F| CX'| ZO| [DX] 
\begin_inset Newline newline
\end_inset

( 0020045D ) MOVI|X, CX| 0009DBFC IL, 
\begin_inset Newline newline
\end_inset

( 00200462 ) POP, ZO| [CX] 
\begin_inset Newline newline
\end_inset

( 00200464 ) LEA, CX'| BO| [CX] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200467 ) MOV, X| F| DX'| ZO| [CX] 
\begin_inset Newline newline
\end_inset

( 00200469 ) MOV, X| F| CX'| MEM| L00200447 L, 
\begin_inset Newline newline
\end_inset

( 0020046F ) RET, 
\begin_inset Newline newline
\end_inset

( 00200470 ) :L00200470 MOVI|X, DX| 0009ABFC IL, 
\begin_inset Newline newline
\end_inset

( 00200475 ) MOV, X| F| CX'| ZO| [DX] 
\begin_inset Newline newline
\end_inset

( 00200477 ) MOVI|X, CX| 0009B7FC IL, 
\begin_inset Newline newline
\end_inset

( 0020047C ) POP, ZO| [CX] 
\begin_inset Newline newline
\end_inset

( 0020047E ) LEA, CX'| BO| [CX] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200481 ) MOV, X| F| DX'| ZO| [CX] 
\begin_inset Newline newline
\end_inset

( 00200483 ) MOV, X| F| CX'| MEM| L00200450 L, 
\begin_inset Newline newline
\end_inset

( 00200489 ) RET, 
\begin_inset Newline newline
\end_inset

( 0020048A ) :X_nul RET, 
\begin_inset Newline newline
\end_inset

( 0020048B ) :X_show POP, MEM| L00202800 L, 
\begin_inset Newline newline
\end_inset

( 00200491 ) CALL, L00200456 RL, 
\begin_inset Newline newline
\end_inset

( 00200496 ) :L00200496 CALLO, MEM| L00202808 L, 
\begin_inset Newline newline
\end_inset

( 0020049C ) CALLO, MEM| L00202800 L, 
\begin_inset Newline newline
\end_inset

( 002004A2 ) CALLO, MEM| L0020280C L, 
\begin_inset Newline newline
\end_inset

( 002004A8 ) JMPS, L00200496 RB, 
\begin_inset Newline newline
\end_inset

( 002004AA ) :L002004AA CALL, X_show RL, 
\begin_inset Newline newline
\end_inset

( 002004AF ) RET, 
\begin_inset Newline newline
\end_inset

( 002004B0 ) :X_freeze POP, MEM| L00202800 L, 
\begin_inset Newline newline
\end_inset

( 002004B6 ) CALL, L00200456 RL, 
\begin_inset Newline newline
\end_inset

( 002004BB ) CALLO, MEM| L00202800 L, 
\begin_inset Newline newline
\end_inset

( 002004C1 ) JMPS, -8 (RB,) 
\begin_inset Newline newline
\end_inset

( 002004C3 ) :X_serve POP, MEM| L00202804 L, 
\begin_inset Newline newline
\end_inset

( 002004C9 ) CALL, L00200470 RL, 
\begin_inset Newline newline
\end_inset

( 002004CE ) :X_serveLoop CALL, X_pause RL, 
\begin_inset Newline newline
\end_inset

( 002004D3 ) CALLO, MEM| L00202804 L, 
\begin_inset Newline newline
\end_inset

( 002004D9 ) JMPS, X_serveLoop RB, 
\begin_inset Newline newline
\end_inset

( 002004DB ) :L002004DB CALL, X_serve RL, 
\begin_inset Newline newline
\end_inset

( 002004E0 ) RET, 
\begin_inset Newline newline
\end_inset

( 002004E1 ) :X_c MOVI|X, SI| 0009F404 IL, 
\begin_inset Newline newline
\end_inset

( 002004E6 ) RET, 
\begin_inset Newline newline
\end_inset

( 002004E7 ) :X_mark MOV, X| T| CX'| MEM| ForthMacros L, 
\begin_inset Newline newline
\end_inset

( 002004ED ) MOV, X| F| CX'| MEM| L00202794 L, 
\begin_inset Newline newline
\end_inset

( 002004F3 ) MOV, X| T| CX'| MEM| ForthWords L, 
\begin_inset Newline newline
\end_inset

( 002004F9 ) MOV, X| F| CX'| MEM| L00202798 L, 
\begin_inset Newline newline
\end_inset

( 002004FF ) MOV, X| T| CX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 00200505 ) MOV, X| F| CX'| MEM| L0020279C L, 
\begin_inset Newline newline
\end_inset

( 0020050B ) RET, 
\begin_inset Newline newline
\end_inset

( 0020050C ) :X_empt MOV, X| T| CX'| MEM| L0020279C L, 
\begin_inset Newline newline
\end_inset

( 00200512 ) MOV, X| F| CX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 00200518 ) MOV, X| T| CX'| MEM| L00202798 L, 
\begin_inset Newline newline
\end_inset

( 0020051E ) MOV, X| F| CX'| MEM| ForthWords L, 
\begin_inset Newline newline
\end_inset

( 00200524 ) MOV, X| T| CX'| MEM| L00202794 L, 
\begin_inset Newline newline
\end_inset

( 0020052A ) MOV, X| F| CX'| MEM| ForthMacros L, 
\begin_inset Newline newline
\end_inset

( 00200530 ) MOVI, X| MEM| L002027A8 L, 0 IL, 
\begin_inset Newline newline
\end_inset

( 0020053A ) RET, 
\begin_inset Newline newline
\end_inset

( 0020053B ) :L0020053B MOV, X| T| CX'| MEM| ForthMacros L, 
\begin_inset Newline newline
\end_inset

( 00200541 ) PUSH|X, DI| 
\begin_inset Newline newline
\end_inset

( 00200542 ) LEA, DI'| ZO| [MEM +4* CX] L00202838 L, 
\begin_inset Newline newline
\end_inset

( 00200549 ) JMPS, L00200559 RB, 
\begin_inset Newline newline
\end_inset

( 0020054B ) :L0020054B MOV, X| T| CX'| MEM| ForthWords L, 
\begin_inset Newline newline
\end_inset

( 00200551 ) PUSH|X, DI| 
\begin_inset Newline newline
\end_inset

( 00200552 ) LEA, DI'| ZO| [MEM +4* CX] 00367FFC L, 
\begin_inset Newline newline
\end_inset

( 00200559 ) :L00200559 STD, 
\begin_inset Newline newline
\end_inset

( 0020055A ) REPNZ, 
\begin_inset Newline newline
\end_inset

( 0020055B ) SCAS, X'| 
\begin_inset Newline newline
\end_inset

( 0020055C ) CLD, 
\begin_inset Newline newline
\end_inset

( 0020055D ) POP|X, DI| 
\begin_inset Newline newline
\end_inset

( 0020055E ) RET, 
\begin_inset Newline newline
\end_inset

( 0020055F ) :X_abort JMPO, MEM| L00202754 L, 
\begin_inset Newline newline
\end_inset

( 00200565 ) :X_drop MOV, X| T| DX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 0020056B ) MOV, X| F| DX'| MEM| L002027AC L, 
\begin_inset Newline newline
\end_inset

( 00200571 ) MOVI, B| ZO| [DX] 0AD IB, 
\begin_inset Newline newline
\end_inset

( 00200574 ) INC, X| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 0020057A ) RET, 
\begin_inset Newline newline
\end_inset

( 0020057B ) :X_?dup MOV, X| T| DX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 00200581 ) DEC|X, DX| 
\begin_inset Newline newline
\end_inset

( 00200582 ) CMP, X| F| DX'| MEM| L002027AC L, 
\begin_inset Newline newline
\end_inset

( 00200588 ) J, Z| N| X_dup RB, 
\begin_inset Newline newline
\end_inset

( 0020058A ) CMPI, B| ZO| [DX] 0AD IB, 
\begin_inset Newline newline
\end_inset

( 0020058D ) J, Z| N| X_dup RB, 
\begin_inset Newline newline
\end_inset

( 0020058F ) MOV, X| F| DX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 00200595 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200596 ) :X_dup MOV, X| T| DX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 0020059C ) MOVI, X| ZO| [DX] 89FC768D IL, 
\begin_inset Newline newline
\end_inset

( 002005A2 ) MOVI, B| BO| [DX] 4 B, 6 IB, 
\begin_inset Newline newline
\end_inset

( 002005A6 ) ADDSI, MEM| L002027A0 L, 5 IS, 
\begin_inset Newline newline
\end_inset

( 002005AD ) RET, 
\begin_inset Newline newline
\end_inset

( 002005AE ) :L002005AE LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 002005B1 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002005B3 ) RET, 
\begin_inset Newline newline
\end_inset

( 002005B4 ) :L002005B4 POP, MEM| L002027C8 L, 
\begin_inset Newline newline
\end_inset

( 002005BA ) RET, 
\begin_inset Newline newline
\end_inset

( 002005BB ) :X_macro CALL, L002005B4 RL, 
\begin_inset Newline newline
\end_inset

( 002005C0 ) PUSH|X, AX| 
\begin_inset Newline newline
\end_inset

( 002005C1 ) MOV, X| T| CX'| MEM| ForthMacros L, 
\begin_inset Newline newline
\end_inset

( 002005C7 ) INC, X| MEM| ForthMacros L, 
\begin_inset Newline newline
\end_inset

( 002005CD ) LEA, CX'| ZO| [MEM +4* CX] L0020283C L, 
\begin_inset Newline newline
\end_inset

( 002005D4 ) MOVI|X, AX| 0218 IL, 
\begin_inset Newline newline
\end_inset

( 002005D9 ) JMPS, L002005F9 RB, 
\begin_inset Newline newline
\end_inset

( 002005DB ) :X_forth CALL, L002005B4 RL, 
\begin_inset Newline newline
\end_inset

( 002005E0 ) :L002005E0 PUSH|X, AX| 
\begin_inset Newline newline
\end_inset

( 002005E1 ) MOV, X| T| CX'| MEM| ForthWords L, 
\begin_inset Newline newline
\end_inset

( 002005E7 ) INC, X| MEM| ForthWords L, 
\begin_inset Newline newline
\end_inset

( 002005ED ) LEA, CX'| ZO| [MEM +4* CX] 00368000 L, 
\begin_inset Newline newline
\end_inset

( 002005F4 ) MOVI|X, AX| 2800 IL, 
\begin_inset Newline newline
\end_inset

( 002005F9 ) :L002005F9 MOV, X| T| DX'| ZO| [MEM +4* DI] -4 L, 
\begin_inset Newline newline
\end_inset

( 00200600 ) ANDSI, R| DX| 0F0 IS, 
\begin_inset Newline newline
\end_inset

( 00200603 ) MOV, X| F| DX'| ZO| [CX] 
\begin_inset Newline newline
\end_inset

( 00200605 ) MOV, X| T| DX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 0020060B ) MOV, X| F| DX'| ZO| [CX +1* AX] 
\begin_inset Newline newline
\end_inset

( 0020060E ) LEA, DX'| ZO| [CX +1* AX] 
\begin_inset Newline newline
\end_inset

( 00200611 ) SHRI, X| R| DX| 2 IS, 
\begin_inset Newline newline
\end_inset

( 00200614 ) MOV, X| F| DX'| MEM| L002027A4 L, 
\begin_inset Newline newline
\end_inset

( 0020061A ) POP|X, AX| 
\begin_inset Newline newline
\end_inset

( 0020061B ) MOV, X| F| SP'| MEM| L002027AC L, 
\begin_inset Newline newline
\end_inset

( 00200621 ) MOVI, X| MEM| L00202790 L, L002005AE IL, 
\begin_inset Newline newline
\end_inset

( 0020062B ) TESTI, X| MEM| L002027A8 L, -1 IL, 
\begin_inset Newline newline
\end_inset

( 00200635 ) J, Z| Y| L0020063D RB, 
\begin_inset Newline newline
\end_inset

( 00200637 ) JMPO, MEM| L002027A8 L, 
\begin_inset Newline newline
\end_inset

( 0020063D ) :L0020063D RET, 
\begin_inset Newline newline
\end_inset

( 0020063E ) :L0020063E LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200641 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200643 ) MOV, X| T| AX'| ZO| [MEM +4* CX] 00368004 L, 
\begin_inset Newline newline
\end_inset

( 0020064A ) RET, 
\begin_inset Newline newline
\end_inset

( 0020064B ) :L0020064B CALL, L002005E0 RL, 
\begin_inset Newline newline
\end_inset

( 00200650 ) MOVI, X| XO| [CX] 2800 L, L0020063E IL, 
\begin_inset Newline newline
\end_inset

( 0020065A ) INC, X| MEM| ForthWords L, 
\begin_inset Newline newline
\end_inset

( 00200660 ) MOV, X| F| DI'| BO| [CX] 4 B, 
\begin_inset Newline newline
\end_inset

( 00200663 ) INC|X, DI| 
\begin_inset Newline newline
\end_inset

( 00200664 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200665 ) :L00200665 MOVI, X| MEM| L00202790 L, L002005AE IL, 
\begin_inset Newline newline
\end_inset

( 0020066F ) :L0020066F CALL, X_?dup RL, 
\begin_inset Newline newline
\end_inset

( 00200674 ) MOV, X| T| DX'| MEM| L002027AC L, 
\begin_inset Newline newline
\end_inset

( 0020067A ) MOV, X| F| DX'| MEM| L002027B0 L, 
\begin_inset Newline newline
\end_inset

( 00200680 ) MOV, X| T| DX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 00200686 ) MOV, X| F| DX'| MEM| L002027AC L, 
\begin_inset Newline newline
\end_inset

( 0020068C ) MOVI, B| ZO| [DX] 0B8 IB, 
\begin_inset Newline newline
\end_inset

( 0020068F ) MOV, X| F| AX'| BO| [DX] 1 B, 
\begin_inset Newline newline
\end_inset

( 00200692 ) ADDSI, MEM| L002027A0 L, 5 IS, 
\begin_inset Newline newline
\end_inset

( 00200699 ) RET, 
\begin_inset Newline newline
\end_inset

( 0020069A ) :L0020069A CALLO, MEM| L00202790 L, 
\begin_inset Newline newline
\end_inset

( 002006A0 ) MOV, X| T| AX'| ZO| [MEM +4* DI] 0 L, 
\begin_inset Newline newline
\end_inset

( 002006A7 ) INC|X, DI| 
\begin_inset Newline newline
\end_inset

( 002006A8 ) JMPS, L002006BA RB, 
\begin_inset Newline newline
\end_inset

( 002006AA ) :L002006AA CALLO, MEM| L00202790 L, 
\begin_inset Newline newline
\end_inset

( 002006B0 ) MOV, X| T| AX'| ZO| [MEM +4* DI] -4 L, 
\begin_inset Newline newline
\end_inset

( 002006B7 ) SARI, X| R| AX| 5 IS, 
\begin_inset Newline newline
\end_inset

( 002006BA ) :L002006BA CALL, L0020066F RL, 
\begin_inset Newline newline
\end_inset

( 002006BF ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 002006C0 ) RET, 
\begin_inset Newline newline
\end_inset

( 002006C1 ) :L002006C1 XOR, X| T| DI'| R| DI| 
\begin_inset Newline newline
\end_inset

( 002006C3 ) :L002006C3 DEC, X| MEM| L00202784 L, 
\begin_inset Newline newline
\end_inset

( 002006C9 ) J, Z| Y| L002006E7 RB, 
\begin_inset Newline newline
\end_inset

( 002006CB ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 002006CC ) JMPS, L002006C3 RB, 
\begin_inset Newline newline
\end_inset

( 002006CE ) :L002006CE MOVI, X| MEM| L00202790 L, L00200665 IL, 
\begin_inset Newline newline
\end_inset

( 002006D8 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 002006DB ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002006DD ) MOV, X| T| AX'| ZO| [MEM +4* DI] -4 L, 
\begin_inset Newline newline
\end_inset

( 002006E4 ) ANDSI, R| AX| 0F0 IS, 
\begin_inset Newline newline
\end_inset

( 002006E7 ) :L002006E7 CALL, L0020054B RL, 
\begin_inset Newline newline
\end_inset

( 002006EC ) J|X, Z| N| X_abort RL, 
\begin_inset Newline newline
\end_inset

( 002006F2 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 002006F3 ) JMPO, ZO| [MEM +4* CX] 0036A800 L, 
\begin_inset Newline newline
\end_inset

( 002006FA ) :L002006FA CALLO, MEM| L00202790 L, 
\begin_inset Newline newline
\end_inset

( 00200700 ) MOV, X| T| AX'| ZO| [MEM +4* DI] -4 L, 
\begin_inset Newline newline
\end_inset

( 00200707 ) ANDSI, R| AX| 0F0 IS, 
\begin_inset Newline newline
\end_inset

( 0020070A ) CALL, L0020053B RL, 
\begin_inset Newline newline
\end_inset

( 0020070F ) J, Z| N| L00200719 RB, 
\begin_inset Newline newline
\end_inset

( 00200711 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200712 ) JMPO, ZO| [MEM +4* CX] L00202A54 L, 
\begin_inset Newline newline
\end_inset

( 00200719 ) :L00200719 CALL, L0020054B RL, 
\begin_inset Newline newline
\end_inset

( 0020071E ) MOV, X| T| AX'| ZO| [MEM +4* CX] 0036A800 L, 
\begin_inset Newline newline
\end_inset

( 00200725 ) :L00200725 J|X, Z| N| X_abort RL, 
\begin_inset Newline newline
\end_inset

( 0020072B ) MOV, X| T| DX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 00200731 ) MOV, X| F| DX'| MEM| L002027AC L, 
\begin_inset Newline newline
\end_inset

( 00200737 ) MOVI, B| ZO| [DX] 0E8 IB, 
\begin_inset Newline newline
\end_inset

( 0020073A ) ADDSI, R| DX| 5 IS, 
\begin_inset Newline newline
\end_inset

( 0020073D ) SUB, X| T| AX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 0020073F ) MOV, X| F| AX'| BO| [DX] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200742 ) MOV, X| F| DX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 00200748 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200749 ) RET, 
\begin_inset Newline newline
\end_inset

( 0020074A ) :L0020074A CALLO, MEM| L00202790 L, 
\begin_inset Newline newline
\end_inset

( 00200750 ) MOV, X| T| AX'| ZO| [MEM +4* DI] -4 L, 
\begin_inset Newline newline
\end_inset

( 00200757 ) ANDSI, R| AX| 0F0 IS, 
\begin_inset Newline newline
\end_inset

( 0020075A ) CALL, L0020053B RL, 
\begin_inset Newline newline
\end_inset

( 0020075F ) MOV, X| T| AX'| ZO| [MEM +4* CX] L00202A54 L, 
\begin_inset Newline newline
\end_inset

( 00200766 ) JMPS, L00200725 RB, 
\begin_inset Newline newline
\end_inset

( 00200768 ) :L00200768 MOVI, X| MEM| L00202790 L, L00200665 IL, 
\begin_inset Newline newline
\end_inset

( 00200772 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200775 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200777 ) MOV, X| T| AX'| ZO| [MEM +4* DI] -4 L, 
\begin_inset Newline newline
\end_inset

( 0020077E ) SARI, X| R| AX| 5 IS, 
\begin_inset Newline newline
\end_inset

( 00200781 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200782 ) :L00200782 MOVI, X| MEM| L00202790 L, L00200665 IL, 
\begin_inset Newline newline
\end_inset

( 0020078C ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020078F ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200791 ) MOV, X| T| AX'| ZO| [MEM +4* DI] 0 L, 
\begin_inset Newline newline
\end_inset

( 00200798 ) INC|X, DI| 
\begin_inset Newline newline
\end_inset

( 00200799 ) RET, 
\begin_inset Newline newline
\end_inset

( 0020079A ) :X_, MOVI|X, CX| 4 IL, 
\begin_inset Newline newline
\end_inset

( 0020079F ) :L0020079F MOV, X| T| DX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 002007A5 ) MOV, X| F| AX'| ZO| [DX] 
\begin_inset Newline newline
\end_inset

( 002007A7 ) MOV, X| T| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002007A9 ) LEA, DX'| ZO| [CX +1* DX] 
\begin_inset Newline newline
\end_inset

( 002007AC ) LEA, SI'| BO| [SI] 4 B, 
\begin_inset Newline newline
\end_inset

( 002007AF ) MOV, X| F| DX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 002007B5 ) RET, 
\begin_inset Newline newline
\end_inset

( 002007B6 ) :X_1, MOVI|X, CX| 1 IL, 
\begin_inset Newline newline
\end_inset

( 002007BB ) JMPS, L0020079F RB, 
\begin_inset Newline newline
\end_inset

( 002007BD ) :X_2, MOVI|X, CX| 2 IL, 
\begin_inset Newline newline
\end_inset

( 002007C2 ) JMPS, L0020079F RB, 
\begin_inset Newline newline
\end_inset

( 002007C4 ) :X_3, MOVI|X, CX| 3 IL, 
\begin_inset Newline newline
\end_inset

( 002007C9 ) JMPS, L0020079F RB, 
\begin_inset Newline newline
\end_inset

( 002007CB ) :X_; MOV, X| T| DX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 002007D1 ) SUBSI, R| DX| 5 IS, 
\begin_inset Newline newline
\end_inset

( 002007D4 ) CMP, X| F| DX'| MEM| L002027AC L, 
\begin_inset Newline newline
\end_inset

( 002007DA ) J, Z| N| L002007E4 RB, 
\begin_inset Newline newline
\end_inset

( 002007DC ) CMPI, B| ZO| [DX] 0E8 IB, 
\begin_inset Newline newline
\end_inset

( 002007DF ) J, Z| N| L002007E4 RB, 
\begin_inset Newline newline
\end_inset

( 002007E1 ) INC, B| ZO| [DX] 
\begin_inset Newline newline
\end_inset

( 002007E3 ) RET, 
\begin_inset Newline newline
\end_inset

( 002007E4 ) :L002007E4 MOVI, B| BO| [DX] 5 B, 0C3 IB, 
\begin_inset Newline newline
\end_inset

( 002007E8 ) INC, X| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 002007EE ) RET, 
\begin_inset Newline newline
\end_inset

( 002007EF ) :X_then MOV, X| F| SP'| MEM| L002027AC L, 
\begin_inset Newline newline
\end_inset

( 002007F5 ) MOV, X| T| DX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 002007FB ) SUB, X| T| DX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 002007FD ) MOV, B| F| DL'| BO| [AX] 0FF B, 
\begin_inset Newline newline
\end_inset

( 00200800 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200801 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200802 ) :X_begin MOV, X| F| SP'| MEM| L002027AC L, 
\begin_inset Newline newline
\end_inset

( 00200808 ) :X_here LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020080B ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 0020080D ) MOV|TA, X'| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 00200812 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200813 ) :X_?lit MOV, X| T| DX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 00200819 ) LEA, DX'| BO| [DX] 0FB B, 
\begin_inset Newline newline
\end_inset

( 0020081C ) CMP, X| F| DX'| MEM| L002027AC L, 
\begin_inset Newline newline
\end_inset

( 00200822 ) J, Z| N| X_?lit2 RB, 
\begin_inset Newline newline
\end_inset

( 00200824 ) CMPI, B| ZO| [DX] 0B8 IB, 
\begin_inset Newline newline
\end_inset

( 00200827 ) J, Z| N| X_?lit2 RB, 
\begin_inset Newline newline
\end_inset

( 00200829 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020082C ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 0020082E ) MOV|TA, X'| L002027B0 L, 
\begin_inset Newline newline
\end_inset

( 00200833 ) MOV|FA, X'| L002027AC L, 
\begin_inset Newline newline
\end_inset

( 00200838 ) MOV, X| T| AX'| BO| [DX] 1 B, 
\begin_inset Newline newline
\end_inset

( 0020083B ) CMPI, X| BO| [DX] 0FB B, 89FC768D IL, 
\begin_inset Newline newline
\end_inset

( 00200842 ) J, Z| Y| X_?lit1 RB, 
\begin_inset Newline newline
\end_inset

( 00200844 ) MOV, X| F| DX'| MEM| L002027A0 L, 
\begin_inset Newline newline
\end_inset

( 0020084A ) JMP, X_drop RL, 
\begin_inset Newline newline
\end_inset

( 0020084F ) :X_?lit1 ADDSI, MEM| L002027A0 L, 0F6 IS, 
\begin_inset Newline newline
\end_inset

( 00200856 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200857 ) :X_?lit2 XOR, X| T| DX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200859 ) RET, 
\begin_inset Newline newline
\end_inset

( 0020085A ) :X_less CMP, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 0020085C ) J, S| Y| X_less1 RB, 
\begin_inset Newline newline
\end_inset

( 0020085E ) XOR, X| T| CX'| R| CX| 
\begin_inset Newline newline
\end_inset

( 00200860 ) :X_less1 RET, 
\begin_inset Newline newline
\end_inset

( 00200861 ) :L00200861 TESTI, X| ZO| [MEM +4* DI] -4 L, -10 IL, 
\begin_inset Newline newline
\end_inset

( 0020086C ) J, Z| N| L00200870 RB, 
\begin_inset Newline newline
\end_inset

( 0020086E ) POP|X, DI| 
\begin_inset Newline newline
\end_inset

( 0020086F ) POP|X, DI| 
\begin_inset Newline newline
\end_inset

( 00200870 ) :L00200870 RET, 
\begin_inset Newline newline
\end_inset

( 00200871 ) :X_jump POP|X, DX| 
\begin_inset Newline newline
\end_inset

( 00200872 ) ADD, X| T| DX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200874 ) LEA, DX'| BO| [DX +4* AX] 5 B, 
\begin_inset Newline newline
\end_inset

( 00200878 ) ADD, X| T| DX'| BO| [DX] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020087B ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 0020087C ) JMPO, R| DX| 
\begin_inset Newline newline
\end_inset

( 0020087E ) :X_load ADD, X| T| AX'| MEM| L00202744 L, 
\begin_inset Newline newline
\end_inset

( 00200884 ) SHLI, X| R| AX| 8 IS, 
\begin_inset Newline newline
\end_inset

( 00200887 ) PUSH|X, DI| 
\begin_inset Newline newline
\end_inset

( 00200888 ) MOV, X| T| DI'| R| AX| 
\begin_inset Newline newline
\end_inset

( 0020088A ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 0020088B ) :X_load1 MOV, X| T| DX'| ZO| [MEM +4* DI] 0 L, 
\begin_inset Newline newline
\end_inset

( 00200892 ) INC|X, DI| 
\begin_inset Newline newline
\end_inset

( 00200893 ) ANDSI, R| DX| 0F IS, 
\begin_inset Newline newline
\end_inset

( 00200896 ) CALLO, ZO| [MEM +4* DX] L002027BC L, 
\begin_inset Newline newline
\end_inset

( 0020089D ) JMPS, X_load1 RB, 
\begin_inset Newline newline
\end_inset

( 0020089F ) d$ 0 
\begin_inset Newline newline
\end_inset

( 002008A0 ) :X_top MOV, X| T| CX'| MEM| L00202814 L, 
\begin_inset Newline newline
\end_inset

( 002008A6 ) SHLI, X| R| CX| 10 IS, 
\begin_inset Newline newline
\end_inset

( 002008A9 ) ADDSI, R| CX| 3 IS, 
\begin_inset Newline newline
\end_inset

( 002008AC ) MOV, X| F| CX'| MEM| L00202810 L, 
\begin_inset Newline newline
\end_inset

( 002008B2 ) MOV, X| F| CX'| MEM| L0020281C L, 
\begin_inset Newline newline
\end_inset

( 002008B8 ) RET, 
\begin_inset Newline newline
\end_inset

( 002008B9 ) :L002008B9 OS:, 
\begin_inset Newline newline
\end_inset

( 002008BA ) MOV, X| T| CX'| MEM| L00202812 L, 
\begin_inset Newline newline
\end_inset

( 002008C0 ) OS:, 
\begin_inset Newline newline
\end_inset

( 002008C1 ) CMP, X| T| CX'| MEM| L00202818 L, 
\begin_inset Newline newline
\end_inset

( 002008C7 ) J, S| Y| X_cr1 RB, 
\begin_inset Newline newline
\end_inset

( 002008C9 ) :X_cr MOV, X| T| CX'| MEM| L00202814 L, 
\begin_inset Newline newline
\end_inset

( 002008CF ) SHLI, X| R| CX| 10 IS, 
\begin_inset Newline newline
\end_inset

( 002008D2 ) OS:, 
\begin_inset Newline newline
\end_inset

( 002008D3 ) MOV, X| T| CX'| MEM| L00202810 L, 
\begin_inset Newline newline
\end_inset

( 002008D9 ) ADDSI, R| CX| 1E IS, 
\begin_inset Newline newline
\end_inset

( 002008DC ) MOV, X| F| CX'| MEM| L00202810 L, 
\begin_inset Newline newline
\end_inset

( 002008E2 ) :X_cr1 RET, 
\begin_inset Newline newline
\end_inset

( 002008E3 ) :L002008E3 LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 002008E6 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002008E8 ) MOVI|X, AX| 00FFFFFF IL, 
\begin_inset Newline newline
\end_inset

( 002008ED ) :X_color MOV|FA, X'| L00202830 L, 
\begin_inset Newline newline
\end_inset

( 002008F2 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 002008F3 ) RET, 
\begin_inset Newline newline
\end_inset


\backslash
 pci [a - n] fetches a cell from PCI configuration space
\begin_inset Newline newline
\end_inset


\backslash
 given address.
 uses config mechanism as defined by PCI
\begin_inset Newline newline
\end_inset


\backslash
 local bus spec 2.0 
\begin_inset Newline newline
\end_inset

( 002008F4 ) :X_pci MOVI|X, DX| 0CF8 IL, 
\begin_inset Newline newline
\end_inset

( 002008F9 ) OUT|D, X'| 
\begin_inset Newline newline
\end_inset

( 002008FA ) LEA, DX'| BO| [DX] 4 B, 
\begin_inset Newline newline
\end_inset

( 002008FD ) IN|D, X'| 
\begin_inset Newline newline
\end_inset

( 002008FE ) RET, 
\begin_inset Newline newline
\end_inset


\backslash
 device [n - a] given class number in high byte of n,
\begin_inset Newline newline
\end_inset


\backslash
 return configuration register for first device,
\begin_inset Newline newline
\end_inset


\backslash
 searching downwards, matching it.
 if none found,
\begin_inset Newline newline
\end_inset


\backslash
 returns configuration register for last device examined 
\begin_inset Newline newline
\end_inset

( 002008FF ) :X_devic LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200902 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200904 ) MOVI|X, AX| 80080008 IL, 
\begin_inset Newline newline
\end_inset

( 00200909 ) MOVI|X, CX| 0FE IL, 
\begin_inset Newline newline
\end_inset

( 0020090E ) :X_devic1 LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200911 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200913 ) CALL, X_pci RL, 
\begin_inset Newline newline
\end_inset

( 00200918 ) ANDI|A, X'| FF000000 IL, 
\begin_inset Newline newline
\end_inset

( 0020091D ) XOR, X| T| AX'| BO| [SI] 4 B, 
\begin_inset Newline newline
\end_inset

( 00200920 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200921 ) J, Z| Y| X_devic2 RB, 
\begin_inset Newline newline
\end_inset

( 00200923 ) SUBI|A, X'| 0800 IL, 
\begin_inset Newline newline
\end_inset

( 00200928 ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200929 ) J, Z| N| X_devic1 RB, 
\begin_inset Newline newline
\end_inset

( 0020092B ) :X_devic2 LEA, SI'| BO| [SI] 4 B, 
\begin_inset Newline newline
\end_inset

( 0020092E ) LEA, AX'| BO| [AX] 0F8 B, 
\begin_inset Newline newline
\end_inset

( 00200931 ) RET, 
\begin_inset Newline newline
\end_inset


\backslash
 03 is PCI class code for display device 
\begin_inset Newline newline
\end_inset

( 00200932 ) :InitDisplay MOVI|X, AX| 03000000 IL, 
\begin_inset Newline newline
\end_inset

( 00200937 ) CALL, X_devic RL, 
\begin_inset Newline newline
\end_inset

( 0020093C ) LEA, AX'| BO| [AX] 10 B, 
\begin_inset Newline newline
\end_inset

( 0020093F ) MOVI|B, CL| 6 IB, 
\begin_inset Newline newline
\end_inset

( 00200941 ) :L00200941 LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200944 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200946 ) CALL, X_pci RL, 
\begin_inset Newline newline
\end_inset

( 0020094B ) ANDI|A, B'| 0FB IB, 
\begin_inset Newline newline
\end_inset

( 0020094D ) XORI|A, B'| 8 IB, 
\begin_inset Newline newline
\end_inset

( 0020094F ) J, Z| Y| L00200967 RB, 
\begin_inset Newline newline
\end_inset

( 00200951 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200952 ) LEA, AX'| BO| [AX] 4 B, 
\begin_inset Newline newline
\end_inset

( 00200955 ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200956 ) J, Z| N| L00200941 RB, 
\begin_inset Newline newline
\end_inset

( 00200958 ) LEA, AX'| BO| [AX] 0E8 B, 
\begin_inset Newline newline
\end_inset

( 0020095B ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020095E ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200960 ) CALL, X_pci RL, 
\begin_inset Newline newline
\end_inset

( 00200965 ) ANDI|A, B'| 0F0 IB, 
\begin_inset Newline newline
\end_inset

( 00200967 ) :L00200967 MOV|FA, X'| L0020282C L, 
\begin_inset Newline newline
\end_inset

( 0020096C ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 0020096D ) RET, 
\begin_inset Newline newline
\end_inset

( 0020096E ) :X_fifo LODS, X'| 
\begin_inset Newline newline
\end_inset

( 0020096F ) :X_graph RET, 
\begin_inset Newline newline
\end_inset

( 00200970 ) :X_switch PUSH|X, SI| 
\begin_inset Newline newline
\end_inset

( 00200971 ) MOV, X| T| SI'| MEM| L00202828 L, 
\begin_inset Newline newline
\end_inset

( 00200977 ) PUSH|X, DI| 
\begin_inset Newline newline
\end_inset

( 00200978 ) MOV, X| T| DI'| MEM| L0020282C L, 
\begin_inset Newline newline
\end_inset

( 0020097E ) MOVI|X, CX| 000C0000 IL, 
\begin_inset Newline newline
\end_inset

( 00200983 ) REPZ, 
\begin_inset Newline newline
\end_inset

( 00200984 ) MOVS, X'| 
\begin_inset Newline newline
\end_inset

( 00200985 ) POP|X, DI| 
\begin_inset Newline newline
\end_inset

( 00200986 ) POP|X, SI| 
\begin_inset Newline newline
\end_inset

( 00200987 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200988 ) :L00200988 CALL, X_switch RL, 
\begin_inset Newline newline
\end_inset

( 0020098D ) JMP, X_pause RL, 
\begin_inset Newline newline
\end_inset

( 00200992 ) :L00200992 MOV, X| T| DI'| MEM| L00202810 L, 
\begin_inset Newline newline
\end_inset

( 00200998 ) MOV, X| T| CX'| R| DI| 
\begin_inset Newline newline
\end_inset

( 0020099A ) OS:, 
\begin_inset Newline newline
\end_inset

( 0020099B ) TEST, X| CX'| R| CX| 
\begin_inset Newline newline
\end_inset

( 0020099D ) J, S| N| L002009A1 RB, 
\begin_inset Newline newline
\end_inset

( 0020099F ) XOR, X| T| CX'| R| CX| 
\begin_inset Newline newline
\end_inset

( 002009A1 ) :L002009A1 ANDI, X| R| CX| FFFF IL, 
\begin_inset Newline newline
\end_inset

( 002009A7 ) MOV, X| F| CX'| MEM| L00202838 L, 
\begin_inset Newline newline
\end_inset

( 002009AD ) IMULI, CX'| R| CX| 1000 IL, 
\begin_inset Newline newline
\end_inset

( 002009B3 ) SARI, X| R| DI| 10 IS, 
\begin_inset Newline newline
\end_inset

( 002009B6 ) J, S| N| L002009BA RB, 
\begin_inset Newline newline
\end_inset

( 002009B8 ) XOR, X| T| DI'| R| DI| 
\begin_inset Newline newline
\end_inset

( 002009BA ) :L002009BA MOV, X| F| DI'| MEM| L00202834 L, 
\begin_inset Newline newline
\end_inset

( 002009C0 ) LEA, DI'| ZO| [CX +4* DI] 
\begin_inset Newline newline
\end_inset

( 002009C3 ) ADD, X| T| DI'| MEM| L00202824 L, 
\begin_inset Newline newline
\end_inset

( 002009C9 ) RET, 
\begin_inset Newline newline
\end_inset

( 002009CA ) :L002009CA OS:, 
\begin_inset Newline newline
\end_inset

( 002009CB ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 002009CC ) XCHG, B| AL'| R| AH| 
\begin_inset Newline newline
\end_inset

( 002009CE ) MOVI|X, CX| 10 IL, 
\begin_inset Newline newline
\end_inset

( 002009D3 ) :L002009D3 OS:, 
\begin_inset Newline newline
\end_inset

( 002009D4 ) SHL, 1| X| R| AX| 
\begin_inset Newline newline
\end_inset

( 002009D6 ) J, C| N| L002009DA RB, 
\begin_inset Newline newline
\end_inset

( 002009D8 ) MOV, X| F| DX'| ZO| [DI] 
\begin_inset Newline newline
\end_inset

( 002009DA ) :L002009DA ADDSI, R| DI| 4 IS, 
\begin_inset Newline newline
\end_inset

( 002009DD ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 002009DE ) J, Z| N| L002009D3 RB, 
\begin_inset Newline newline
\end_inset

( 002009E0 ) RET, 
\begin_inset Newline newline
\end_inset

( 002009E1 ) :L002009E1 OS:, 
\begin_inset Newline newline
\end_inset

( 002009E2 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 002009E3 ) XCHG, B| AL'| R| AH| 
\begin_inset Newline newline
\end_inset

( 002009E5 ) MOVI|X, CX| 10 IL, 
\begin_inset Newline newline
\end_inset

( 002009EA ) :L002009EA SHL, 1| X| R| AX| 
\begin_inset Newline newline
\end_inset

( 002009EC ) J, C| N| L002009FF RB, 
\begin_inset Newline newline
\end_inset

( 002009EE ) MOV, X| F| DX'| ZO| [DI] 
\begin_inset Newline newline
\end_inset

( 002009F0 ) MOV, X| F| DX'| BO| [DI] 4 B, 
\begin_inset Newline newline
\end_inset

( 002009F3 ) MOV, X| F| DX'| XO| [DI] 1000 L, 
\begin_inset Newline newline
\end_inset

( 002009F9 ) MOV, X| F| DX'| XO| [DI] 1004 L, 
\begin_inset Newline newline
\end_inset

( 002009FF ) :L002009FF ADDSI, R| DI| 8 IS, 
\begin_inset Newline newline
\end_inset

( 00200A02 ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200A03 ) J, Z| N| L002009EA RB, 
\begin_inset Newline newline
\end_inset

( 00200A05 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200A06 ) :X_emit CALL, L002008B9 RL, 
\begin_inset Newline newline
\end_inset

( 00200A0B ) PUSH|X, SI| 
\begin_inset Newline newline
\end_inset

( 00200A0C ) PUSH|X, DI| 
\begin_inset Newline newline
\end_inset

( 00200A0D ) PUSH|X, DX| 
\begin_inset Newline newline
\end_inset

( 00200A0E ) IMULSI, AX'| R| AX| 30 IS, 
\begin_inset Newline newline
\end_inset

( 00200A11 ) LEA, SI'| XO| [AX] IconImages L, 
\begin_inset Newline newline
\end_inset

( 00200A17 ) CALL, L00200992 RL, 
\begin_inset Newline newline
\end_inset

( 00200A1C ) MOV, X| T| DX'| MEM| L00202830 L, 
\begin_inset Newline newline
\end_inset

( 00200A22 ) MOVI|X, CX| 18 IL, 
\begin_inset Newline newline
\end_inset

( 00200A27 ) :X_emit1 PUSH|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200A28 ) CALL, L002009CA RL, 
\begin_inset Newline newline
\end_inset

( 00200A2D ) ADDI, X| R| DI| 0FC0 IL, 
\begin_inset Newline newline
\end_inset

( 00200A33 ) POP|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200A34 ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200A35 ) J, Z| N| X_emit1 RB, 
\begin_inset Newline newline
\end_inset

( 00200A37 ) POP|X, DX| 
\begin_inset Newline newline
\end_inset

( 00200A38 ) POP|X, DI| 
\begin_inset Newline newline
\end_inset

( 00200A39 ) POP|X, SI| 
\begin_inset Newline newline
\end_inset

( 00200A3A ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200A3B ) :X_space ADDI, X| MEM| L00202810 L, 00160000 IL, 
\begin_inset Newline newline
\end_inset

( 00200A45 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200A46 ) :X_2emit PUSH|X, SI| 
\begin_inset Newline newline
\end_inset

( 00200A47 ) PUSH|X, DI| 
\begin_inset Newline newline
\end_inset

( 00200A48 ) PUSH|X, DX| 
\begin_inset Newline newline
\end_inset

( 00200A49 ) IMULSI, AX'| R| AX| 30 IS, 
\begin_inset Newline newline
\end_inset

( 00200A4C ) LEA, SI'| XO| [AX] IconImages L, 
\begin_inset Newline newline
\end_inset

( 00200A52 ) CALL, L00200992 RL, 
\begin_inset Newline newline
\end_inset

( 00200A57 ) MOV, X| T| DX'| MEM| L00202830 L, 
\begin_inset Newline newline
\end_inset

( 00200A5D ) MOVI|X, CX| 18 IL, 
\begin_inset Newline newline
\end_inset

( 00200A62 ) :X_2emit1 PUSH|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200A63 ) CALL, L002009E1 RL, 
\begin_inset Newline newline
\end_inset

( 00200A68 ) ADDI, X| R| DI| 1F80 IL, 
\begin_inset Newline newline
\end_inset

( 00200A6E ) POP|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200A6F ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200A70 ) J, Z| N| X_2emit1 RB, 
\begin_inset Newline newline
\end_inset

( 00200A72 ) POP|X, DX| 
\begin_inset Newline newline
\end_inset

( 00200A73 ) POP|X, DI| 
\begin_inset Newline newline
\end_inset

( 00200A74 ) POP|X, SI| 
\begin_inset Newline newline
\end_inset

( 00200A75 ) ADDI, X| MEM| L00202810 L, 002C0000 IL, 
\begin_inset Newline newline
\end_inset

( 00200A7F ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200A80 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200A81 ) :X_text CALL, L002008E3 RL, 
\begin_inset Newline newline
\end_inset

( 00200A86 ) MOVI, X| MEM| L00202814 L, 3 IL, 
\begin_inset Newline newline
\end_inset

( 00200A90 ) MOVI, X| MEM| L00202818 L, 03F4 IL, 
\begin_inset Newline newline
\end_inset

( 00200A9A ) JMP, X_top RL, 
\begin_inset Newline newline
\end_inset

( 00200A9F ) :X_line CALL, L00200992 RL, 
\begin_inset Newline newline
\end_inset

( 00200AA4 ) MOV, X| T| CX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200AA6 ) SHL, 1| X| R| CX| 
\begin_inset Newline newline
\end_inset

( 00200AA8 ) SHL, 1| X| R| CX| 
\begin_inset Newline newline
\end_inset

( 00200AAA ) SUB, X| T| DI'| R| CX| 
\begin_inset Newline newline
\end_inset

( 00200AAC ) MOV, X| T| CX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200AAE ) MOV|TA, X'| L00202830 L, 
\begin_inset Newline newline
\end_inset

( 00200AB3 ) REPZ, 
\begin_inset Newline newline
\end_inset

( 00200AB4 ) STOS, X'| 
\begin_inset Newline newline
\end_inset

( 00200AB5 ) INC, X| MEM| L00202810 L, 
\begin_inset Newline newline
\end_inset

( 00200ABB ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200ABC ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200ABD ) RET, 
\begin_inset Newline newline
\end_inset

( 00200ABE ) :X_box CALL, L00200992 RL, 
\begin_inset Newline newline
\end_inset

( 00200AC3 ) CMPI|A, X'| 0301 IL, 
\begin_inset Newline newline
\end_inset

( 00200AC8 ) J, S| Y| X_box1 RB, 
\begin_inset Newline newline
\end_inset

( 00200ACA ) MOVI|X, AX| 0300 IL, 
\begin_inset Newline newline
\end_inset

( 00200ACF ) :X_box1 MOV, X| T| CX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200AD1 ) SUB, X| T| CX'| MEM| L00202838 L, 
\begin_inset Newline newline
\end_inset

( 00200AD7 ) J, LE| Y| X_box4 RB, 
\begin_inset Newline newline
\end_inset

( 00200AD9 ) CMPI, X| ZO| [SI] 0401 IL, 
\begin_inset Newline newline
\end_inset

( 00200ADF ) J, S| Y| X_box2 RB, 
\begin_inset Newline newline
\end_inset

( 00200AE1 ) MOVI, X| ZO| [SI] 0400 IL, 
\begin_inset Newline newline
\end_inset

( 00200AE7 ) :X_box2 MOV|TA, X'| L00202834 L, 
\begin_inset Newline newline
\end_inset

( 00200AEC ) SUB, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200AEE ) J, LE| Y| X_box4 RB, 
\begin_inset Newline newline
\end_inset

( 00200AF0 ) MOVI|X, DX| 0400 IL, 
\begin_inset Newline newline
\end_inset

( 00200AF5 ) SUB, X| T| DX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200AF7 ) SHLI, X| R| DX| 2 IS, 
\begin_inset Newline newline
\end_inset

( 00200AFA ) MOV|TA, X'| L00202830 L, 
\begin_inset Newline newline
\end_inset

( 00200AFF ) :X_box3 PUSH|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200B00 ) MOV, X| T| CX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200B02 ) REPZ, 
\begin_inset Newline newline
\end_inset

( 00200B03 ) STOS, X'| 
\begin_inset Newline newline
\end_inset

( 00200B04 ) ADD, X| T| DI'| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200B06 ) POP|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200B07 ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200B08 ) J, Z| N| X_box3 RB, 
\begin_inset Newline newline
\end_inset

( 00200B0A ) :X_box4 LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200B0B ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200B0C ) RET, 
\begin_inset Newline newline
\end_inset

( 00200B0D ) :X_color0FF LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200B10 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200B12 ) MOVI|X, AX| FFFF IL, 
\begin_inset Newline newline
\end_inset

( 00200B17 ) JMP, X_color RL, 
\begin_inset Newline newline
\end_inset

( 00200B1C ) :X_colorF0F LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200B1F ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200B21 ) MOVI|X, AX| 00FF00FF IL, 
\begin_inset Newline newline
\end_inset

( 00200B26 ) JMP, X_color RL, 
\begin_inset Newline newline
\end_inset

( 00200B2B ) :X_colorCCC LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200B2E ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200B30 ) MOVI|X, AX| 00C0C0C0 IL, 
\begin_inset Newline newline
\end_inset

( 00200B35 ) JMP, X_color RL, 
\begin_inset Newline newline
\end_inset

( 00200B3A ) :X_color44F LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200B3D ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200B3F ) MOVI|X, AX| 004040FF IL, 
\begin_inset Newline newline
\end_inset

( 00200B44 ) JMP, X_color RL, 
\begin_inset Newline newline
\end_inset

( 00200B49 ) :X_colorF00 LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200B4C ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200B4E ) MOVI|X, AX| 00FF0000 IL, 
\begin_inset Newline newline
\end_inset

( 00200B53 ) JMP, X_color RL, 
\begin_inset Newline newline
\end_inset

( 00200B58 ) :X_color80F0 LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200B5B ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200B5D ) MOVI|X, AX| 8000FF00 IL, 
\begin_inset Newline newline
\end_inset

( 00200B62 ) JMP, X_color RL, 
\begin_inset Newline newline
\end_inset

( 00200B67 ) :L00200B67 db 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00200B71 ) :L00200B71 db 0 
\begin_inset Newline newline
\end_inset

( 00200B72 ) :L00200B72 PUSH|X, SI| 
\begin_inset Newline newline
\end_inset

( 00200B73 ) MOVI|X, CX| 0A IL, 
\begin_inset Newline newline
\end_inset

( 00200B78 ) LEA, DI'| MEM| L00200B67 L, 
\begin_inset Newline newline
\end_inset

( 00200B7E ) LEA, SI'| BO| [DI] 1 B, 
\begin_inset Newline newline
\end_inset

( 00200B81 ) REPZ, 
\begin_inset Newline newline
\end_inset

( 00200B82 ) MOVS, B'| 
\begin_inset Newline newline
\end_inset

( 00200B83 ) POP|X, SI| 
\begin_inset Newline newline
\end_inset

( 00200B84 ) MOV|FA, B'| L00200B71 L, 
\begin_inset Newline newline
\end_inset

( 00200B89 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200B8A ) RET, 
\begin_inset Newline newline
\end_inset

( 00200B8B ) :L00200B8B LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200B8E ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200B90 ) MOVI|X, CX| 0B IL, 
\begin_inset Newline newline
\end_inset

( 00200B95 ) LEA, DI'| MEM| L00200B67 L, 
\begin_inset Newline newline
\end_inset

( 00200B9B ) XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200B9D ) REPZ, 
\begin_inset Newline newline
\end_inset

( 00200B9E ) STOS, B'| 
\begin_inset Newline newline
\end_inset

( 00200B9F ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200BA0 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200BA1 ) :X_down LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200BA4 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200BA6 ) XOR, X| T| DX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200BA8 ) MOVI|X, CX| 1E IL, 
\begin_inset Newline newline
\end_inset

( 00200BAD ) DIV|AD, X| R| CX| 
\begin_inset Newline newline
\end_inset

( 00200BAF ) MOV, X| T| AX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200BB1 ) ADDI, X| R| DX| 00037FE5 IL, 
\begin_inset Newline newline
\end_inset

( 00200BB7 ) MOV, X| F| DX'| MEM| L00202810 L, 
\begin_inset Newline newline
\end_inset

( 00200BBD ) TEST, X| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200BBF ) MOVI|X, AX| 0 IL, 
\begin_inset Newline newline
\end_inset

( 00200BC4 ) J, Z| N| X_down1 RB, 
\begin_inset Newline newline
\end_inset

( 00200BC6 ) INC|X, AX| 
\begin_inset Newline newline
\end_inset

( 00200BC7 ) :X_down1 RET, 
\begin_inset Newline newline
\end_inset

( 00200BC8 ) :L00200BC8 LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200BCB ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200BCD ) XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200BCF ) MOV|FA, X'| L00202810 L, 
\begin_inset Newline newline
\end_inset

( 00200BD4 ) CALL, X_color RL, 
\begin_inset Newline newline
\end_inset

( 00200BD9 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200BDC ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200BDE ) MOVI|X, AX| 0400 IL, 
\begin_inset Newline newline
\end_inset

( 00200BE3 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200BE6 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200BE8 ) MOVI|X, AX| 0300 IL, 
\begin_inset Newline newline
\end_inset

( 00200BED ) JMP, X_box RL, 
\begin_inset Newline newline
\end_inset

( 00200BF2 ) :X_lm MOV|FA, X'| L00202814 L, 
\begin_inset Newline newline
\end_inset

( 00200BF7 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200BF8 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200BF9 ) :X_rm MOV|FA, X'| L00202818 L, 
\begin_inset Newline newline
\end_inset

( 00200BFE ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200BFF ) RET, 
\begin_inset Newline newline
\end_inset

( 00200C00 ) :X_at OS:, 
\begin_inset Newline newline
\end_inset

( 00200C01 ) MOV|FA, X'| L00202810 L, 
\begin_inset Newline newline
\end_inset

( 00200C06 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200C07 ) OS:, 
\begin_inset Newline newline
\end_inset

( 00200C08 ) MOV|FA, X'| L00202812 L, 
\begin_inset Newline newline
\end_inset

( 00200C0D ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200C0E ) RET, 
\begin_inset Newline newline
\end_inset

( 00200C0F ) :X_+at OS:, 
\begin_inset Newline newline
\end_inset

( 00200C10 ) ADD, X| F| AX'| MEM| L00202810 L, 
\begin_inset Newline newline
\end_inset

( 00200C16 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200C17 ) OS:, 
\begin_inset Newline newline
\end_inset

( 00200C18 ) ADD, X| F| AX'| MEM| L00202812 L, 
\begin_inset Newline newline
\end_inset

( 00200C1E ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200C1F ) RET, 
\begin_inset Newline newline
\end_inset

( 00200C20 ) :X_octant LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200C23 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200C25 ) MOVI|X, AX| 43 IL, 
\begin_inset Newline newline
\end_inset

( 00200C2A ) MOV, X| T| DX'| BO| [SI] 4 B, 
\begin_inset Newline newline
\end_inset

( 00200C2D ) TEST, X| DX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200C2F ) J, S| N| X_octant1 RB, 
\begin_inset Newline newline
\end_inset

( 00200C31 ) NEG, X| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200C33 ) MOV, X| F| DX'| BO| [SI] 4 B, 
\begin_inset Newline newline
\end_inset

( 00200C36 ) XORI|A, B'| 1 IB, 
\begin_inset Newline newline
\end_inset

( 00200C38 ) :X_octant1 CMP, X| T| DX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200C3A ) J, S| N| X_octant2 RB, 
\begin_inset Newline newline
\end_inset

( 00200C3C ) XORI|A, B'| 4 IB, 
\begin_inset Newline newline
\end_inset

( 00200C3E ) :X_octant2 RET, 
\begin_inset Newline newline
\end_inset

( 00200C3F ) :digitChars db 18 19 1A 1B 1C 1D 1E 1F 20 21 5 13 0A 10 4 0E
 
\begin_inset Newline newline
\end_inset

( 00200C4F ) :L00200C4F LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200C52 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200C54 ) :X_digit PUSH|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200C55 ) MOV, B| T| AL'| XO| [AX] digitChars L, 
\begin_inset Newline newline
\end_inset

( 00200C5B ) CALL, X_emit RL, 
\begin_inset Newline newline
\end_inset

( 00200C60 ) POP|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200C61 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200C62 ) :L00200C62 ROLI, X| R| AX| 4 IS, 
\begin_inset Newline newline
\end_inset

( 00200C65 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200C68 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200C6A ) ANDSI, R| AX| 0F IS, 
\begin_inset Newline newline
\end_inset

( 00200C6D ) RET, 
\begin_inset Newline newline
\end_inset

( 00200C6E ) :X_h.n MOV, X| T| DX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200C70 ) NEG, X| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200C72 ) LEA, CX'| ZO| [MEM +4* AX] 20 L, 
\begin_inset Newline newline
\end_inset

( 00200C79 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200C7A ) ROL, V| X| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200C7C ) MOV, X| T| CX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200C7E ) JMPS, X_h.1 RB, 
\begin_inset Newline newline
\end_inset

( 00200C80 ) :X_h.
 MOVI|X, CX| 8 IL, 
\begin_inset Newline newline
\end_inset

( 00200C85 ) :X_h.1 CALL, L00200C62 RL, 
\begin_inset Newline newline
\end_inset

( 00200C8A ) CALL, X_digit RL, 
\begin_inset Newline newline
\end_inset

( 00200C8F ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200C90 ) J, Z| N| X_h.1 RB, 
\begin_inset Newline newline
\end_inset

( 00200C92 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200C93 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200C94 ) :L00200C94 MOVI|X, CX| 7 IL, 
\begin_inset Newline newline
\end_inset

( 00200C99 ) :L00200C99 CALL, L00200C62 RL, 
\begin_inset Newline newline
\end_inset

( 00200C9E ) J, Z| N| L00200CB9 RB, 
\begin_inset Newline newline
\end_inset

( 00200CA0 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200CA1 ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200CA2 ) J, Z| N| L00200C99 RB, 
\begin_inset Newline newline
\end_inset

( 00200CA4 ) INC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200CA5 ) :L00200CA5 CALL, L00200C62 RL, 
\begin_inset Newline newline
\end_inset

( 00200CAA ) :L00200CAA CALL, X_digit RL, 
\begin_inset Newline newline
\end_inset

( 00200CAF ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200CB0 ) J, Z| N| L00200CA5 RB, 
\begin_inset Newline newline
\end_inset

( 00200CB2 ) CALL, X_space RL, 
\begin_inset Newline newline
\end_inset

( 00200CB7 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200CB8 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200CB9 ) :L00200CB9 INC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200CBA ) JMPS, L00200CAA RB, 
\begin_inset Newline newline
\end_inset

( 00200CBC ) :L00200CBC CMPSI, MEM| L0020276C L, 0A IS, 
\begin_inset Newline newline
\end_inset

( 00200CC3 ) J, Z| N| L00200C94 RB, 
\begin_inset Newline newline
\end_inset

( 00200CC5 ) :X_.
 MOV, X| T| DX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200CC7 ) TEST, X| DX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200CC9 ) J, S| N| X_.1 RB, 
\begin_inset Newline newline
\end_inset

( 00200CCB ) NEG, X| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200CCD ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200CD0 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200CD2 ) MOVI|X, AX| 23 IL, 
\begin_inset Newline newline
\end_inset

( 00200CD7 ) CALL, X_emit RL, 
\begin_inset Newline newline
\end_inset

( 00200CDC ) :X_.1 MOVI|X, CX| 8 IL, 
\begin_inset Newline newline
\end_inset

( 00200CE1 ) :X_.2 MOV, X| T| AX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200CE3 ) XOR, X| T| DX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200CE5 ) DIV|AD, X| ZO| [MEM +4* CX] L00202700 L, 
\begin_inset Newline newline
\end_inset

( 00200CEC ) TEST, X| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200CEE ) J, Z| N| X_.4 RB, 
\begin_inset Newline newline
\end_inset

( 00200CF0 ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200CF1 ) J, S| N| X_.2 RB, 
\begin_inset Newline newline
\end_inset

( 00200CF3 ) JMPS, X_.5 RB, 
\begin_inset Newline newline
\end_inset

( 00200CF5 ) :X_.3 MOV, X| T| AX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200CF7 ) XOR, X| T| DX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200CF9 ) DIV|AD, X| ZO| [MEM +4* CX] L00202700 L, 
\begin_inset Newline newline
\end_inset

( 00200D00 ) :X_.4 CALL, L00200C4F RL, 
\begin_inset Newline newline
\end_inset

( 00200D05 ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200D06 ) J, S| N| X_.3 RB, 
\begin_inset Newline newline
\end_inset

( 00200D08 ) :X_.5 MOV, X| T| AX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200D0A ) CALL, L00200C4F RL, 
\begin_inset Newline newline
\end_inset

( 00200D0F ) CALL, X_space RL, 
\begin_inset Newline newline
\end_inset

( 00200D14 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00200D15 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200D16 ) :L00200D16 ADDSI, R| DI| 0C IS, 
\begin_inset Newline newline
\end_inset

( 00200D19 ) CALL, L00200D26 RL, 
\begin_inset Newline newline
\end_inset

( 00200D1E ) CALL, X_space RL, 
\begin_inset Newline newline
\end_inset

( 00200D23 ) SUBSI, R| DI| 10 IS, 
\begin_inset Newline newline
\end_inset

( 00200D26 ) :L00200D26 MOVI|X, CX| 4 IL, 
\begin_inset Newline newline
\end_inset

( 00200D2B ) :L00200D2B PUSH|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200D2C ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200D2F ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200D31 ) XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200D33 ) MOV, B| T| AL'| BO| [DI] 4 B, 
\begin_inset Newline newline
\end_inset

( 00200D36 ) INC|X, DI| 
\begin_inset Newline newline
\end_inset

( 00200D37 ) CALL, X_emit RL, 
\begin_inset Newline newline
\end_inset

( 00200D3C ) POP|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200D3D ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00200D3E ) J, Z| N| L00200D2B RB, 
\begin_inset Newline newline
\end_inset

( 00200D40 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200D41 ) :L00200D41 MOVI|X, DI| 0009F3FC IL, 
\begin_inset Newline newline
\end_inset

( 00200D46 ) :L00200D46 MOV, X| T| DX'| MEM| L0020043E L, 
\begin_inset Newline newline
\end_inset

( 00200D4C ) CMP, X| F| DI'| ZO| [DX] 
\begin_inset Newline newline
\end_inset

( 00200D4E ) J, C| N| 11 (RB,) 
\begin_inset Newline newline
\end_inset

( 00200D50 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200D53 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200D55 ) MOV, X| T| AX'| ZO| [DI] 
\begin_inset Newline newline
\end_inset

( 00200D57 ) SUBSI, R| DI| 4 IS, 
\begin_inset Newline newline
\end_inset

( 00200D5A ) CALL, L00200CBC RL, 
\begin_inset Newline newline
\end_inset

( 00200D5F ) :L00200D5F JMPS, L00200D46 RB, 
\begin_inset Newline newline
\end_inset

( 00200D61 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200D62 ) :X_keybo CALL, X_text RL, 
\begin_inset Newline newline
\end_inset

( 00200D67 ) MOV, X| T| DI'| MEM| L00202764 L, 
\begin_inset Newline newline
\end_inset

( 00200D6D ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200D70 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200D72 ) MOV|TA, X'| L00202774 L, 
\begin_inset Newline newline
\end_inset

( 00200D77 ) CALL, X_color RL, 
\begin_inset Newline newline
\end_inset

( 00200D7C ) MOV|TA, X'| L0020275C L, 
\begin_inset Newline newline
\end_inset

( 00200D81 ) ADDSI, R| AX| 0 IS, 
\begin_inset Newline newline
\end_inset

( 00200D84 ) MOV|FA, X'| L00202814 L, 
\begin_inset Newline newline
\end_inset

( 00200D89 ) MOV, X| T| DX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200D8B ) ADDI, X| R| DX| 0C6 IL, 
\begin_inset Newline newline
\end_inset

( 00200D91 ) MOV, X| F| DX'| MEM| L00202818 L, 
\begin_inset Newline newline
\end_inset

( 00200D97 ) SHLI, X| R| AX| 10 IS, 
\begin_inset Newline newline
\end_inset

( 00200D9A ) ADD, X| T| AX'| MEM| L00202760 L, 
\begin_inset Newline newline
\end_inset

( 00200DA0 ) MOV|FA, X'| L00202810 L, 
\begin_inset Newline newline
\end_inset

( 00200DA5 ) CALL, L00200D16 RL, 
\begin_inset Newline newline
\end_inset

( 00200DAA ) CALL, L00200D16 RL, 
\begin_inset Newline newline
\end_inset

( 00200DAF ) CALL, L00200D16 RL, 
\begin_inset Newline newline
\end_inset

( 00200DB4 ) CALL, X_cr RL, 
\begin_inset Newline newline
\end_inset

( 00200DB9 ) ADDI, X| MEM| L00202810 L, 00580000 IL, 
\begin_inset Newline newline
\end_inset

( 00200DC3 ) MOV, X| T| DI'| MEM| L00202768 L, 
\begin_inset Newline newline
\end_inset

( 00200DC9 ) ADDSI, R| DI| 0C IS, 
\begin_inset Newline newline
\end_inset

( 00200DCC ) MOVI|X, CX| 3 IL, 
\begin_inset Newline newline
\end_inset

( 00200DD1 ) CALL, L00200D2B RL, 
\begin_inset Newline newline
\end_inset

( 00200DD6 ) MOVI, X| MEM| L00202814 L, 3 IL, 
\begin_inset Newline newline
\end_inset

( 00200DE0 ) OS:, 
\begin_inset Newline newline
\end_inset

( 00200DE1 ) MOVI, X| MEM| L00202812 L, 3 IW, 
\begin_inset Newline newline
\end_inset

( 00200DE9 ) CALL, L00200D41 RL, 
\begin_inset Newline newline
\end_inset

( 00200DEE ) OS:, 
\begin_inset Newline newline
\end_inset

( 00200DEF ) MOVI, X| MEM| L00202812 L, 024B IW, 
\begin_inset Newline newline
\end_inset

( 00200DF7 ) LEA, DI'| MEM| L00200B63 L, 
\begin_inset Newline newline
\end_inset

( 00200DFD ) MOVI|X, CX| 0B IL, 
\begin_inset Newline newline
\end_inset

( 00200E02 ) JMP, L00200D2B RL, 
\begin_inset Newline newline
\end_inset

( 00200E07 ) db 0D 0A 1 0C 14 2 6 8 13 9 0F 11 12 0B 0E 7 
\begin_inset Newline newline
\end_inset

( 00200E17 ) db 5 3 4 16 
\begin_inset Newline newline
\end_inset

( 00200E1B ) :L00200E1B db 17 24 15 10 19 1A 1B 0 1C 1D 1E 18 
\begin_inset Newline newline
\end_inset

( 00200E27 ) db 1F 20 21 2F 29 28 2A 2C 26 22 25 2E 
\begin_inset Newline newline
\end_inset

( 00200E33 ) :L00200E33 db 2D 27 2B 23 
\begin_inset Newline newline
\end_inset

( 00200E37 ) db 19 1A 1B 0 1C 1D 1E 18 1F 20 21 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00200E47 ) db 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00200E4B ) :L00200E4B db 0 0 0 0 19 1A 1B 0 1C 1D 1E 18 
\begin_inset Newline newline
\end_inset

( 00200E57 ) db 1F 20 21 0 0 5 13 0A 0 10 4 0E 0 0 
\begin_inset Newline newline
\end_inset

( 00200E65 ) :L00200E65 db 0 0 
\begin_inset Newline newline
\end_inset

( 00200E67 ) :L00200E67 CMPI|A, B'| 4 IB, 
\begin_inset Newline newline
\end_inset

( 00200E69 ) J, S| Y| L00200E74 RB, 
\begin_inset Newline newline
\end_inset

( 00200E6B ) MOV, X| T| DX'| MEM| L00202764 L, 
\begin_inset Newline newline
\end_inset

( 00200E71 ) MOV, B| T| AL'| ZO| [AX +1* DX] 
\begin_inset Newline newline
\end_inset

( 00200E74 ) :L00200E74 RET, 
\begin_inset Newline newline
\end_inset

( 00200E75 ) dl 13121110 05040000 0706 15140000 
\begin_inset Newline newline
\end_inset

( 00200E85 ) dl 1716 0B0A0908 0 1B1A1918 
\begin_inset Newline newline
\end_inset

( 00200E95 ) dl 0D0C0100 0F0E 768D0203 
\begin_inset Newline newline
\end_inset

( 00200E9F ) :L00200E9F LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200EA2 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200EA4 ) XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200EA6 ) CALL, X_pause RL, 
\begin_inset Newline newline
\end_inset

( 00200EAB ) :L00200EAB IN|P, B'| 64 P, 
\begin_inset Newline newline
\end_inset

( 00200EAD ) TESTI|A, B'| 1 IB, 
\begin_inset Newline newline
\end_inset

( 00200EAF ) J, Z| Y| L00200EAB RB, 
\begin_inset Newline newline
\end_inset

( 00200EB1 ) IN|P, B'| 60 P, 
\begin_inset Newline newline
\end_inset

( 00200EB3 ) TESTI|A, B'| 0F0 IB, 
\begin_inset Newline newline
\end_inset

( 00200EB5 ) J, Z| Y| L00200EAB RB, 
\begin_inset Newline newline
\end_inset

( 00200EB7 ) CMPI|A, B'| 3A IB, 
\begin_inset Newline newline
\end_inset

( 00200EB9 ) J, C| N| L00200EAB RB, 
\begin_inset Newline newline
\end_inset

( 00200EBB ) MOV, B| T| AL'| XO| [AX] L00200E65 L, 
\begin_inset Newline newline
\end_inset

( 00200EC1 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200EC2 ) db 90 0 
\begin_inset Newline newline
\end_inset

( 00200EC4 ) :L00200EC4 db 0B 18 2 19 3 1A 4 1B 5 1C 6 1D 7 1E 
\begin_inset Newline newline
\end_inset

( 00200ED2 ) db 8 1F 9 20 0A 21 1E 5 30 13 2E 0A 20 10 12 4 
\begin_inset Newline newline
\end_inset

( 00200EE2 ) db 21 0E 22 0D 23 14 17 7 24 22 25 24 26 0C 32 9 
\begin_inset Newline newline
\end_inset

( 00200EF2 ) db 31 6 18 3 19 12 10 17 13 1 1F 8 14 2 16 16 
\begin_inset Newline newline
\end_inset

( 00200F02 ) db 2F 11 11 0F 2D 15 15 0B 2C 26 0C 23 34 25 35 27 
\begin_inset Newline newline
\end_inset

( 00200F12 ) db 27 28 28 29 82 2A 8D 2B 83 2C 89 2D 33 2E 0B5 2F 
\begin_inset Newline newline
\end_inset

( 00200F22 ) db 39 80 1C 81 0E 82 1 83 3B 84 29 30 
\begin_inset Newline newline
\end_inset

( 00200F2E ) :X_qkey LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00200F31 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00200F33 ) XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200F35 ) CALL, X_pause RL, 
\begin_inset Newline newline
\end_inset

( 00200F3A ) :X_qkey1 IN|P, B'| 64 P, 
\begin_inset Newline newline
\end_inset

( 00200F3C ) TESTI|A, B'| 1 IB, 
\begin_inset Newline newline
\end_inset

( 00200F3E ) J, Z| Y| X_qkey1 RB, 
\begin_inset Newline newline
\end_inset

( 00200F40 ) IN|P, B'| 60 P, 
\begin_inset Newline newline
\end_inset

( 00200F42 ) MOV, X| T| CX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200F44 ) ANDI, B| R| CL| 7F IB, 
\begin_inset Newline newline
\end_inset

( 00200F47 ) CMPI, B| R| CL| 2A IB, 
\begin_inset Newline newline
\end_inset

( 00200F4A ) J, Z| Y| X_qkey2 RB, 
\begin_inset Newline newline
\end_inset

( 00200F4C ) CMPI, B| R| CL| 36 IB, 
\begin_inset Newline newline
\end_inset

( 00200F4F ) J, Z| N| X_qkey3 RB, 
\begin_inset Newline newline
\end_inset

( 00200F51 ) :X_qkey2 ANDI|A, B'| 80 IB, 
\begin_inset Newline newline
\end_inset

( 00200F53 ) XORI|A, B'| 80 IB, 
\begin_inset Newline newline
\end_inset

( 00200F55 ) MOV|FA, X'| L00202788 L, 
\begin_inset Newline newline
\end_inset

( 00200F5A ) JMPS, X_qkey1 RB, 
\begin_inset Newline newline
\end_inset

( 00200F5C ) :X_qkey3 OR, B| T| AL'| R| AL| 
\begin_inset Newline newline
\end_inset

( 00200F5E ) J, S| Y| X_qkey1 RB, 
\begin_inset Newline newline
\end_inset

( 00200F60 ) ANDI|A, B'| 7F IB, 
\begin_inset Newline newline
\end_inset

( 00200F62 ) OR, X| T| AX'| MEM| L00202788 L, 
\begin_inset Newline newline
\end_inset

( 00200F68 ) MOVI|X, DX| L00200EC4 IL, 
\begin_inset Newline newline
\end_inset

( 00200F6D ) MOVI|X, CX| 35 IL, 
\begin_inset Newline newline
\end_inset

( 00200F72 ) :X_qkey4 CMP, B| F| AL'| ZO| [DX] 
\begin_inset Newline newline
\end_inset

( 00200F74 ) J, Z| Y| X_qkey5 RB, 
\begin_inset Newline newline
\end_inset

( 00200F76 ) ADDSI, R| DX| 2 IS, 
\begin_inset Newline newline
\end_inset

( 00200F79 ) LOOP, X_qkey4 RB, 
\begin_inset Newline newline
\end_inset

( 00200F7B ) XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00200F7D ) RET, 
\begin_inset Newline newline
\end_inset

( 00200F7E ) :X_qkey5 MOV, B| T| AL'| BO| [DX] 1 B, 
\begin_inset Newline newline
\end_inset

( 00200F81 ) SUBI, X| R| DX| L00200EC4 IL, 
\begin_inset Newline newline
\end_inset

( 00200F87 ) SHR, 1| X| R| DX| 
\begin_inset Newline newline
\end_inset

( 00200F89 ) MOV, X| F| DX'| MEM| L0020278C L, 
\begin_inset Newline newline
\end_inset

( 00200F8F ) TESTI|A, X'| 80 IL, 
\begin_inset Newline newline
\end_inset

( 00200F94 ) RET, 
\begin_inset Newline newline
\end_inset

( 00200F95 ) :L00200F95 db 0CF 11 20 0 0CF 11 20 0 0CF 11 20 0 21 12 20
 0 
\begin_inset Newline newline
\end_inset

( 00200FA5 ) db 0 0 5 0 
\begin_inset Newline newline
\end_inset

( 00200FA9 ) :L00200FA9 db 0DC 10 20 0 74 10 20 0 1A 10 20 0 
\begin_inset Newline newline
\end_inset

( 00200FB5 ) db 46 12 20 0 15 25 5 0 
\begin_inset Newline newline
\end_inset

( 00200FBD ) :L00200FBD db 0CF 11 20 0 
\begin_inset Newline newline
\end_inset

( 00200FC1 ) :L00200FC1 db 0CF 11 20 0 
\begin_inset Newline newline
\end_inset

( 00200FC5 ) db 0D 11 20 0 33 12 20 0 
\begin_inset Newline newline
\end_inset

( 00200FCD ) :L00200FCD db 0 21 2D 0 
\begin_inset Newline newline
\end_inset

( 00200FD1 ) :L00200FD1 db 0DC 10 20 0 
\begin_inset Newline newline
\end_inset

( 00200FD5 ) db 74 10 20 0 1A 10 20 0 58 12 20 0 15 25 2D 0 
\begin_inset Newline newline
\end_inset

( 00200FE5 ) :L00200FE5 db 0CF 11 20 0 3 11 20 0 20 12 20 0 
\begin_inset Newline newline
\end_inset

( 00200FF1 ) :L00200FF1 db 0AB 11 20 0 
\begin_inset Newline newline
\end_inset

( 00200FF5 ) db 23 5 
\begin_inset Newline newline
\end_inset

( 00200FF7 ) :L00200FF7 db 0E 0 
\begin_inset Newline newline
\end_inset

( 00200FF9 ) :L00200FF9 db 0A 11 20 0 0C7 11 20 0 60 11 20 0 
\begin_inset Newline newline
\end_inset

( 00201005 ) db 0A 11 20 0 15 25 0 0 
\begin_inset Newline newline
\end_inset

( 0020100D ) :L0020100D db 1C 
\begin_inset Newline newline
\end_inset

( 0020100E ) :L0020100E MOV, B| T| CL'| MEM| L0020100D L, 
\begin_inset Newline newline
\end_inset

( 00201014 ) ADDI, B| R| CL| 4 IB, 
\begin_inset Newline newline
\end_inset

( 00201017 ) SHL, V| X| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201019 ) RET, 
\begin_inset Newline newline
\end_inset

( 0020101A ) :L0020101A CALL, L0020100E RL, 
\begin_inset Newline newline
\end_inset

( 0020101F ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201020 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201021 ) :L00201021 CALL, L0020100E RL, 
\begin_inset Newline newline
\end_inset

( 00201026 ) INC, X| MEM| L00202784 L, 
\begin_inset Newline newline
\end_inset

( 0020102C ) MOVI, B| MEM| L0020100D L, 1C IB, 
\begin_inset Newline newline
\end_inset

( 00201033 ) SUB, B| F| CH'| MEM| L0020100D L, 
\begin_inset Newline newline
\end_inset

( 00201039 ) MOV, X| T| AX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 0020103B ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020103E ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201040 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201041 ) :L00201041 ADDSI, R| AX| 50 IS, 
\begin_inset Newline newline
\end_inset

( 00201044 ) MOVI|B, CL| 7 IB, 
\begin_inset Newline newline
\end_inset

( 00201046 ) JMPS, L00201055 RB, 
\begin_inset Newline newline
\end_inset

( 00201048 ) :L00201048 CMPI|A, B'| 10 IB, 
\begin_inset Newline newline
\end_inset

( 0020104A ) J, C| N| L00201041 RB, 
\begin_inset Newline newline
\end_inset

( 0020104C ) MOVI|B, CL| 4 IB, 
\begin_inset Newline newline
\end_inset

( 0020104E ) TESTI|A, B'| 8 IB, 
\begin_inset Newline newline
\end_inset

( 00201050 ) J, Z| Y| L00201055 RB, 
\begin_inset Newline newline
\end_inset

( 00201052 ) INC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00201053 ) XORI|A, B'| 18 IB, 
\begin_inset Newline newline
\end_inset

( 00201055 ) :L00201055 MOV, X| T| DX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201057 ) MOV, B| T| CH'| R| CL| 
\begin_inset Newline newline
\end_inset

( 00201059 ) :L00201059 CMP, B| F| CL'| MEM| L0020100D L, 
\begin_inset Newline newline
\end_inset

( 0020105F ) J, C| N| L00201069 RB, 
\begin_inset Newline newline
\end_inset

( 00201061 ) SHR, 1| B| R| AL| 
\begin_inset Newline newline
\end_inset

( 00201063 ) J, C| Y| L00201021 RB, 
\begin_inset Newline newline
\end_inset

( 00201065 ) DEC, B| R| CL| 
\begin_inset Newline newline
\end_inset

( 00201067 ) JMPS, L00201059 RB, 
\begin_inset Newline newline
\end_inset

( 00201069 ) :L00201069 SHL, V| X| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 0020106B ) XOR, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 0020106D ) SUB, B| F| CL'| MEM| L0020100D L, 
\begin_inset Newline newline
\end_inset

( 00201073 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201074 ) :L00201074 CALL, L00200B8B RL, 
\begin_inset Newline newline
\end_inset

( 00201079 ) MOV|TA, X'| L00202784 L, 
\begin_inset Newline newline
\end_inset

( 0020107E ) LEA, SI'| ZO| [SI +4* AX] 
\begin_inset Newline newline
\end_inset

( 00201081 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201082 ) JMPO, MEM| L0020274C L, 
\begin_inset Newline newline
\end_inset

( 00201088 ) :L00201088 CALL, L00200B8B RL, 
\begin_inset Newline newline
\end_inset

( 0020108D ) MOVI, X| MEM| L00202784 L, 1 IL, 
\begin_inset Newline newline
\end_inset

( 00201097 ) MOVI, X| MEM| L00202778 L, 1 IL, 
\begin_inset Newline newline
\end_inset

( 002010A1 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 002010A4 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002010A6 ) MOVI, X| ZO| [SI] 0 IL, 
\begin_inset Newline newline
\end_inset

( 002010AC ) MOVI, B| MEM| L0020100D L, 1C IB, 
\begin_inset Newline newline
\end_inset

( 002010B3 ) :L002010B3 CALL, L00200E67 RL, 
\begin_inset Newline newline
\end_inset

( 002010B8 ) J, S| N| L002010C3 RB, 
\begin_inset Newline newline
\end_inset

( 002010BA ) MOV, X| T| DX'| MEM| L00202768 L, 
\begin_inset Newline newline
\end_inset

( 002010C0 ) JMPO, ZO| [DX +4* AX] 
\begin_inset Newline newline
\end_inset

( 002010C3 ) :L002010C3 TEST, B| AL'| R| AL| 
\begin_inset Newline newline
\end_inset

( 002010C5 ) J, Z| Y| 15 (RB,) 
\begin_inset Newline newline
\end_inset

( 002010C7 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 002010CA ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002010CC ) CALL, L00200B72 RL, 
\begin_inset Newline newline
\end_inset

( 002010D1 ) CALL, L00201048 RL, 
\begin_inset Newline newline
\end_inset

( 002010D6 ) INC, X| MEM| L00202778 L, 
\begin_inset Newline newline
\end_inset

( 002010DC ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 002010DD ) CALL, L00200E9F RL, 
\begin_inset Newline newline
\end_inset

( 002010E2 ) JMPS, L002010B3 RB, 
\begin_inset Newline newline
\end_inset

( 002010E4 ) db 0E 0A 0 0 0 0 0C 0 0 0 0F 0 0D 0 0 0B 
\begin_inset Newline newline
\end_inset

( 002010F4 ) db 0 0 0 0 0 1 2 3 4 5 6 7 8 9 
\begin_inset Newline newline
\end_inset

( 00201102 ) :L00201102 db 0 
\begin_inset Newline newline
\end_inset

( 00201103 ) :L00201103 MOV|FA, B'| L00201102 L, 
\begin_inset Newline newline
\end_inset

( 00201108 ) JMPS, L00201153 RB, 
\begin_inset Newline newline
\end_inset

( 0020110A ) :L0020110A LODS, X'| 
\begin_inset Newline newline
\end_inset

( 0020110B ) JMPS, L0020111C RB, 
\begin_inset Newline newline
\end_inset

( 0020110D ) :L0020110D CALLO, MEM| L00202770 L, 
\begin_inset Newline newline
\end_inset

( 00201113 ) MOVI, B| MEM| L00201102 L, 0 IB, 
\begin_inset Newline newline
\end_inset

( 0020111A ) XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 0020111C ) :L0020111C CALL, L00200E9F RL, 
\begin_inset Newline newline
\end_inset

( 00201121 ) CALL, L00200E67 RL, 
\begin_inset Newline newline
\end_inset

( 00201126 ) J, S| N| L00201131 RB, 
\begin_inset Newline newline
\end_inset

( 00201128 ) MOV, X| T| DX'| MEM| L00202768 L, 
\begin_inset Newline newline
\end_inset

( 0020112E ) JMPO, ZO| [DX +4* AX] 
\begin_inset Newline newline
\end_inset

( 00201131 ) :L00201131 TEST, B| AL'| R| AL| 
\begin_inset Newline newline
\end_inset

( 00201133 ) J, Z| Y| L0020110A RB, 
\begin_inset Newline newline
\end_inset

( 00201135 ) MOV, B| T| AL'| XO| [AX] L002010E0 L, 
\begin_inset Newline newline
\end_inset

( 0020113B ) TESTI, B| MEM| L00201102 L, 1F IB, 
\begin_inset Newline newline
\end_inset

( 00201142 ) J, Z| Y| L00201146 RB, 
\begin_inset Newline newline
\end_inset

( 00201144 ) NEG, X| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201146 ) :L00201146 MOV, X| T| DX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201148 ) IMUL, DX'| MEM| L0020276C L, 
\begin_inset Newline newline
\end_inset

( 0020114F ) ADD, X| T| DX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201151 ) MOV, X| F| DX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201153 ) :L00201153 LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201154 ) MOVI, X| MEM| L00202768 L, L00200FF9 IL, 
\begin_inset Newline newline
\end_inset

( 0020115E ) JMPS, L0020111C RB, 
\begin_inset Newline newline
\end_inset

( 00201160 ) :L00201160 LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201161 ) CALLO, MEM| L00202780 L, 
\begin_inset Newline newline
\end_inset

( 00201167 ) JMPO, MEM| L0020274C L, 
\begin_inset Newline newline
\end_inset

( 0020116D ) :L0020116D MOVI, X| MEM| L0020276C L, 0A IL, 
\begin_inset Newline newline
\end_inset

( 00201177 ) MOVI, X| MEM| L00202768 L, L00200FE5 IL, 
\begin_inset Newline newline
\end_inset

( 00201181 ) MOVI, X| MEM| L00202764 L, L00200E33 IL, 
\begin_inset Newline newline
\end_inset

( 0020118B ) RET, 
\begin_inset Newline newline
\end_inset

( 0020118C ) :L0020118C MOVI, X| MEM| L0020276C L, 10 IL, 
\begin_inset Newline newline
\end_inset

( 00201196 ) MOVI, X| MEM| L00202768 L, L00200FE5 IL, 
\begin_inset Newline newline
\end_inset

( 002011A0 ) MOVI, X| MEM| L00202764 L, L00200E4B IL, 
\begin_inset Newline newline
\end_inset

( 002011AA ) RET, 
\begin_inset Newline newline
\end_inset

( 002011AB ) :L002011AB XORI, X| MEM| L00202770 L, 0E1 IL, 
\begin_inset Newline newline
\end_inset

( 002011B5 ) XORI, B| MEM| L00200FF7 L, 2F IB, 
\begin_inset Newline newline
\end_inset

( 002011BC ) CALLO, MEM| L00202770 L, 
\begin_inset Newline newline
\end_inset

( 002011C2 ) JMP, L0020110A RL, 
\begin_inset Newline newline
\end_inset

( 002011C7 ) :L002011C7 LODS, X'| 
\begin_inset Newline newline
\end_inset

( 002011C8 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 002011C9 ) JMPO, MEM| L0020274C L, 
\begin_inset Newline newline
\end_inset

( 002011CF ) :L002011CF LODS, X'| 
\begin_inset Newline newline
\end_inset

( 002011D0 ) JMPS, X_accept2 RB, 
\begin_inset Newline newline
\end_inset

( 002011D2 ) :X_accept MOVI, X| MEM| L00202768 L, L00200FBD IL, 
\begin_inset Newline newline
\end_inset

( 002011DC ) LEA, DI'| MEM| L00200E03 L, 
\begin_inset Newline newline
\end_inset

( 002011E2 ) :X_accept1 MOV, X| F| DI'| MEM| L00202764 L, 
\begin_inset Newline newline
\end_inset

( 002011E8 ) :X_accept2 TESTI, X| MEM| L00202750 L, -1 IL, 
\begin_inset Newline newline
\end_inset

( 002011F2 ) J, Z| Y| X_accept3 RB, 
\begin_inset Newline newline
\end_inset

( 002011F4 ) JMPO, MEM| L00202750 L, 
\begin_inset Newline newline
\end_inset

( 002011FA ) :X_accept3 CALL, L00200E9F RL, 
\begin_inset Newline newline
\end_inset

( 002011FF ) CMPI|A, B'| 4 IB, 
\begin_inset Newline newline
\end_inset

( 00201201 ) J, S| N| X_accept4 RB, 
\begin_inset Newline newline
\end_inset

( 00201203 ) MOV, X| T| DX'| MEM| L00202768 L, 
\begin_inset Newline newline
\end_inset

( 00201209 ) JMPO, ZO| [DX +4* AX] 
\begin_inset Newline newline
\end_inset

( 0020120C ) :X_accept4 ADDSI, MEM| L00202768 L, 14 IS, 
\begin_inset Newline newline
\end_inset

( 00201213 ) CALL, L00201088 RL, 
\begin_inset Newline newline
\end_inset

( 00201218 ) CALLO, MEM| L0020277C L, 
\begin_inset Newline newline
\end_inset

( 0020121E ) JMPS, X_accept RB, 
\begin_inset Newline newline
\end_inset

( 00201220 ) :L00201220 LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201221 ) :L00201221 MOVI, X| MEM| L00202768 L, L00200FBD IL, 
\begin_inset Newline newline
\end_inset

( 0020122B ) LEA, DI'| MEM| L00200E03 L, 
\begin_inset Newline newline
\end_inset

( 00201231 ) JMPS, L00201243 RB, 
\begin_inset Newline newline
\end_inset

( 00201233 ) :L00201233 MOVI, X| MEM| L00202768 L, L00200F95 IL, 
\begin_inset Newline newline
\end_inset

( 0020123D ) LEA, DI'| MEM| L00200E1B L, 
\begin_inset Newline newline
\end_inset

( 00201243 ) :L00201243 LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201244 ) JMPS, X_accept1 RB, 
\begin_inset Newline newline
\end_inset

( 00201246 ) :L00201246 MOVI, X| MEM| L00202768 L, L00200FD1 IL, 
\begin_inset Newline newline
\end_inset

( 00201250 ) LEA, DI'| MEM| L00200E03 L, 
\begin_inset Newline newline
\end_inset

( 00201256 ) JMPS, L00201268 RB, 
\begin_inset Newline newline
\end_inset

( 00201258 ) :L00201258 MOVI, X| MEM| L00202768 L, L00200FA9 IL, 
\begin_inset Newline newline
\end_inset

( 00201262 ) LEA, DI'| MEM| L00200E1B L, 
\begin_inset Newline newline
\end_inset

( 00201268 ) :L00201268 MOV, X| F| DI'| MEM| L00202764 L, 
\begin_inset Newline newline
\end_inset

( 0020126E ) JMP, -197 (RL,) 
\begin_inset Newline newline
\end_inset

( 00201273 ) :X_unpac LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201276 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201278 ) TEST, X| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 0020127A ) J, S| Y| X_unpac1 RB, 
\begin_inset Newline newline
\end_inset

( 0020127C ) SHLI, X| ZO| [SI] 4 IS, 
\begin_inset Newline newline
\end_inset

( 0020127F ) ROLI, X| R| AX| 4 IS, 
\begin_inset Newline newline
\end_inset

( 00201282 ) ANDSI, R| AX| 7 IS, 
\begin_inset Newline newline
\end_inset

( 00201285 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201286 ) :X_unpac1 SHL, 1| X| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201288 ) J, S| Y| X_unpac2 RB, 
\begin_inset Newline newline
\end_inset

( 0020128A ) SHLI, X| ZO| [SI] 5 IS, 
\begin_inset Newline newline
\end_inset

( 0020128D ) ROLI, X| R| AX| 4 IS, 
\begin_inset Newline newline
\end_inset

( 00201290 ) ANDSI, R| AX| 7 IS, 
\begin_inset Newline newline
\end_inset

( 00201293 ) XORI|A, B'| 8 IB, 
\begin_inset Newline newline
\end_inset

( 00201295 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201296 ) :X_unpac2 SHLI, X| ZO| [SI] 7 IS, 
\begin_inset Newline newline
\end_inset

( 00201299 ) ROLI, X| R| AX| 6 IS, 
\begin_inset Newline newline
\end_inset

( 0020129C ) ANDSI, R| AX| 3F IS, 
\begin_inset Newline newline
\end_inset

( 0020129F ) SUBI|A, B'| 10 IB, 
\begin_inset Newline newline
\end_inset

( 002012A1 ) RET, 
\begin_inset Newline newline
\end_inset

( 002012A2 ) :L002012A2 LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 002012A5 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002012A7 ) INC, X| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002012A9 ) CMP, X| F| DI'| MEM| L00202730 L, 
\begin_inset Newline newline
\end_inset

( 002012AF ) J, Z| N| L002012B6 RB, 
\begin_inset Newline newline
\end_inset

( 002012B1 ) MOV|FA, X'| L00202730 L, 
\begin_inset Newline newline
\end_inset

( 002012B6 ) :L002012B6 CMP, X| T| AX'| MEM| L00202730 L, 
\begin_inset Newline newline
\end_inset

( 002012BC ) J, Z| Y| L002012C8 RB, 
\begin_inset Newline newline
\end_inset

( 002012BE ) J, S| N| L002012C6 RB, 
\begin_inset Newline newline
\end_inset

( 002012C0 ) MOV, X| F| DI'| MEM| L00202738 L, 
\begin_inset Newline newline
\end_inset

( 002012C6 ) :L002012C6 LODS, X'| 
\begin_inset Newline newline
\end_inset

( 002012C7 ) RET, 
\begin_inset Newline newline
\end_inset

( 002012C8 ) :L002012C8 MOV, X| F| DI'| MEM| L00202734 L, 
\begin_inset Newline newline
\end_inset

( 002012CE ) SUBI, X| MEM| L00202810 L, 00160000 IL, 
\begin_inset Newline newline
\end_inset

( 002012D8 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 002012DB ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002012DD ) MOVI|X, AX| 00E04000 IL, 
\begin_inset Newline newline
\end_inset

( 002012E2 ) CALL, X_color RL, 
\begin_inset Newline newline
\end_inset

( 002012E7 ) MOVI|X, AX| 30 IL, 
\begin_inset Newline newline
\end_inset

( 002012EC ) OS:, 
\begin_inset Newline newline
\end_inset

( 002012ED ) MOV, X| T| CX'| MEM| L00202812 L, 
\begin_inset Newline newline
\end_inset

( 002012F3 ) OS:, 
\begin_inset Newline newline
\end_inset

( 002012F4 ) CMP, X| T| CX'| MEM| L00202818 L, 
\begin_inset Newline newline
\end_inset

( 002012FA ) J, S| Y| L0020130C RB, 
\begin_inset Newline newline
\end_inset

( 002012FC ) CALL, X_emit RL, 
\begin_inset Newline newline
\end_inset

( 00201301 ) SUBI, X| MEM| L00202810 L, 00160000 IL, 
\begin_inset Newline newline
\end_inset

( 0020130B ) RET, 
\begin_inset Newline newline
\end_inset

( 0020130C ) :L0020130C JMP, X_emit RL, 
\begin_inset Newline newline
\end_inset

( 00201311 ) :L00201311 CALL, L002008E3 RL, 
\begin_inset Newline newline
\end_inset

( 00201316 ) :L00201316 LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201319 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 0020131B ) MOV, X| T| AX'| ZO| [MEM +4* DI] -4 L, 
\begin_inset Newline newline
\end_inset

( 00201322 ) ANDSI, R| AX| 0F0 IS, 
\begin_inset Newline newline
\end_inset

( 00201325 ) :L00201325 CALL, X_unpac RL, 
\begin_inset Newline newline
\end_inset

( 0020132A ) J, Z| Y| L00201333 RB, 
\begin_inset Newline newline
\end_inset

( 0020132C ) CALL, X_emit RL, 
\begin_inset Newline newline
\end_inset

( 00201331 ) JMPS, L00201325 RB, 
\begin_inset Newline newline
\end_inset

( 00201333 ) :L00201333 CALL, X_space RL, 
\begin_inset Newline newline
\end_inset

( 00201338 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201339 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 0020133A ) RET, 
\begin_inset Newline newline
\end_inset

( 0020133B ) :L0020133B OS:, 
\begin_inset Newline newline
\end_inset

( 0020133C ) MOV, X| T| CX'| MEM| L00202812 L, 
\begin_inset Newline newline
\end_inset

( 00201342 ) OS:, 
\begin_inset Newline newline
\end_inset

( 00201343 ) CMP, X| T| CX'| MEM| L00202814 L, 
\begin_inset Newline newline
\end_inset

( 00201349 ) J, Z| Y| L00201350 RB, 
\begin_inset Newline newline
\end_inset

( 0020134B ) CALL, X_cr RL, 
\begin_inset Newline newline
\end_inset

( 00201350 ) :L00201350 CALL, X_colorF00 RL, 
\begin_inset Newline newline
\end_inset

( 00201355 ) JMPS, L00201316 RB, 
\begin_inset Newline newline
\end_inset

( 00201357 ) :L00201357 CALL, X_color80F0 RL, 
\begin_inset Newline newline
\end_inset

( 0020135C ) JMPS, L00201316 RB, 
\begin_inset Newline newline
\end_inset

( 0020135E ) :L0020135E CALL, X_color0FF RL, 
\begin_inset Newline newline
\end_inset

( 00201363 ) JMPS, L00201316 RB, 
\begin_inset Newline newline
\end_inset

( 00201365 ) :L00201365 LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201368 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 0020136A ) MOVI|X, AX| 00FFFF00 IL, 
\begin_inset Newline newline
\end_inset

( 0020136F ) CALL, X_color RL, 
\begin_inset Newline newline
\end_inset

( 00201374 ) JMPS, L00201316 RB, 
\begin_inset Newline newline
\end_inset

( 00201376 ) :L00201376 CALL, L002008E3 RL, 
\begin_inset Newline newline
\end_inset

( 0020137B ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020137E ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201380 ) MOV, X| T| AX'| ZO| [MEM +4* DI] -4 L, 
\begin_inset Newline newline
\end_inset

( 00201387 ) ANDSI, R| AX| 0F0 IS, 
\begin_inset Newline newline
\end_inset

( 0020138A ) CALL, X_unpac RL, 
\begin_inset Newline newline
\end_inset

( 0020138F ) ADDI|A, B'| 30 IB, 
\begin_inset Newline newline
\end_inset

( 00201391 ) CALL, X_emit RL, 
\begin_inset Newline newline
\end_inset

( 00201396 ) JMPS, L00201325 RB, 
\begin_inset Newline newline
\end_inset

( 00201398 ) :L00201398 CALL, L002008E3 RL, 
\begin_inset Newline newline
\end_inset

( 0020139D ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 002013A0 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002013A2 ) MOV, X| T| AX'| ZO| [MEM +4* DI] -4 L, 
\begin_inset Newline newline
\end_inset

( 002013A9 ) ANDSI, R| AX| 0F0 IS, 
\begin_inset Newline newline
\end_inset

( 002013AC ) :L002013AC CALL, X_unpac RL, 
\begin_inset Newline newline
\end_inset

( 002013B1 ) J, Z| Y| L00201333 RB, 
\begin_inset Newline newline
\end_inset

( 002013B3 ) ADDI|A, B'| 30 IB, 
\begin_inset Newline newline
\end_inset

( 002013B5 ) CALL, X_emit RL, 
\begin_inset Newline newline
\end_inset

( 002013BA ) JMPS, L002013AC RB, 
\begin_inset Newline newline
\end_inset

( 002013BC ) :L002013BC SUBI, X| MEM| L00202810 L, 00160000 IL, 
\begin_inset Newline newline
\end_inset

( 002013C6 ) TESTI, X| ZO| [MEM +4* DI] -4 L, -10 IL, 
\begin_inset Newline newline
\end_inset

( 002013D1 ) J|X, Z| N| L00201316 RL, 
\begin_inset Newline newline
\end_inset

( 002013D7 ) DEC|X, DI| 
\begin_inset Newline newline
\end_inset

( 002013D8 ) MOV, X| F| DI'| MEM| L0020273C L, 
\begin_inset Newline newline
\end_inset

( 002013DE ) CALL, X_space RL, 
\begin_inset Newline newline
\end_inset

( 002013E3 ) CALL, L002012A2 RL, 
\begin_inset Newline newline
\end_inset

( 002013E8 ) POP|X, DX| 
\begin_inset Newline newline
\end_inset

( 002013E9 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 002013EA ) RET, 
\begin_inset Newline newline
\end_inset

( 002013EB ) :L002013EB MOV, X| T| DX'| ZO| [MEM +4* DI] -4 L, 
\begin_inset Newline newline
\end_inset

( 002013F2 ) SARI, X| R| DX| 5 IS, 
\begin_inset Newline newline
\end_inset

( 002013F5 ) JMPS, L00201413 RB, 
\begin_inset Newline newline
\end_inset

( 002013F7 ) :L002013F7 MOVI, X| MEM| L00202724 L, X_.
 IL, 
\begin_inset Newline newline
\end_inset

( 00201401 ) CALL, X_colorF0F RL, 
\begin_inset Newline newline
\end_inset

( 00201406 ) CALL, L00201316 RL, 
\begin_inset Newline newline
\end_inset

( 0020140B ) :L0020140B MOV, X| T| DX'| ZO| [MEM +4* DI] 0 L, 
\begin_inset Newline newline
\end_inset

( 00201412 ) INC|X, DI| 
\begin_inset Newline newline
\end_inset

( 00201413 ) :L00201413 LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201416 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201418 ) MOVI|X, AX| F800 IL, 
\begin_inset Newline newline
\end_inset

( 0020141D ) CMPI, X| MEM| L00202724 L, X_.
 IL, 
\begin_inset Newline newline
\end_inset

( 00201427 ) J, Z| Y| L0020145F RB, 
\begin_inset Newline newline
\end_inset

( 00201429 ) MOVI|X, AX| C000 IL, 
\begin_inset Newline newline
\end_inset

( 0020142E ) JMPS, L0020145F RB, 
\begin_inset Newline newline
\end_inset

( 00201430 ) :L00201430 MOV, X| T| DX'| ZO| [MEM +4* DI] -4 L, 
\begin_inset Newline newline
\end_inset

( 00201437 ) SARI, X| R| DX| 5 IS, 
\begin_inset Newline newline
\end_inset

( 0020143A ) JMPS, L00201444 RB, 
\begin_inset Newline newline
\end_inset

( 0020143C ) :L0020143C MOV, X| T| DX'| ZO| [MEM +4* DI] 0 L, 
\begin_inset Newline newline
\end_inset

( 00201443 ) INC|X, DI| 
\begin_inset Newline newline
\end_inset

( 00201444 ) :L00201444 LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201447 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201449 ) MOVI|X, AX| 00FFFF00 IL, 
\begin_inset Newline newline
\end_inset

( 0020144E ) CMPI, X| MEM| L00202724 L, X_.
 IL, 
\begin_inset Newline newline
\end_inset

( 00201458 ) J, Z| Y| L0020145F RB, 
\begin_inset Newline newline
\end_inset

( 0020145A ) MOVI|X, AX| 00C0C000 IL, 
\begin_inset Newline newline
\end_inset

( 0020145F ) :L0020145F CALL, X_color RL, 
\begin_inset Newline newline
\end_inset

( 00201464 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201467 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201469 ) MOV, X| T| AX'| R| DX| 
\begin_inset Newline newline
\end_inset

( 0020146B ) JMPO, MEM| L00202724 L, 
\begin_inset Newline newline
\end_inset

( 00201471 ) :L00201471 MOV, X| T| DX'| ZO| [MEM +4* DI] -4 L, 
\begin_inset Newline newline
\end_inset

( 00201478 ) SARI, X| R| DX| 5 IS, 
\begin_inset Newline newline
\end_inset

( 0020147B ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020147E ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201480 ) MOVI|X, AX| 00FFFFFF IL, 
\begin_inset Newline newline
\end_inset

( 00201485 ) CMPI, X| MEM| L00202724 L, X_.
 IL, 
\begin_inset Newline newline
\end_inset

( 0020148F ) J, Z| Y| L00201496 RB, 
\begin_inset Newline newline
\end_inset

( 00201491 ) MOVI|X, AX| 00C0C0C0 IL, 
\begin_inset Newline newline
\end_inset

( 00201496 ) :L00201496 JMPS, L0020145F RB, 
\begin_inset Newline newline
\end_inset

( 00201498 ) :L00201498 dl L002013BC L00201365 L0020143C L0020133B 
\begin_inset Newline newline
\end_inset

( 002014A8 ) dl L00201357 L0020140B L002013EB L0020135E 
\begin_inset Newline newline
\end_inset

( 002014B8 ) dl L00201430 L00201311 L00201376 L00201398 
\begin_inset Newline newline
\end_inset

( 002014C8 ) dl L002013F7 X_nul X_nul L00201471 
\begin_inset Newline newline
\end_inset

( 002014D8 ) :X_+list CALL, X_text RL, 
\begin_inset Newline newline
\end_inset

( 002014DD ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 002014E0 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002014E2 ) MOV|TA, X'| L0020273C L, 
\begin_inset Newline newline
\end_inset

( 002014E7 ) MOV|FA, X'| L00202734 L, 
\begin_inset Newline newline
\end_inset

( 002014EC ) XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 002014EE ) MOV, X| T| DI'| MEM| L00202728 L, 
\begin_inset Newline newline
\end_inset

( 002014F4 ) ADD, X| T| DI'| MEM| L00202744 L, 
\begin_inset Newline newline
\end_inset

( 002014FA ) :X_+list1 SHLI, X| R| DI| 8 IS, 
\begin_inset Newline newline
\end_inset

( 002014FD ) MOV, X| F| DI'| MEM| L00202738 L, 
\begin_inset Newline newline
\end_inset

( 00201503 ) :X_+list2 TESTI, X| ZO| [MEM +4* DI] 0 L, 0F IL, 
\begin_inset Newline newline
\end_inset

( 0020150E ) J, Z| Y| X_+list3 RB, 
\begin_inset Newline newline
\end_inset

( 00201510 ) CALL, L002012A2 RL, 
\begin_inset Newline newline
\end_inset

( 00201515 ) :X_+list3 MOV, X| T| DX'| ZO| [MEM +4* DI] 0 L, 
\begin_inset Newline newline
\end_inset

( 0020151C ) INC|X, DI| 
\begin_inset Newline newline
\end_inset

( 0020151D ) MOVI, X| MEM| L00202724 L, X_.
 IL, 
\begin_inset Newline newline
\end_inset

( 00201527 ) TESTI, B| R| DL| 10 IB, 
\begin_inset Newline newline
\end_inset

( 0020152A ) J, Z| Y| X_+list4 RB, 
\begin_inset Newline newline
\end_inset

( 0020152C ) MOVI, X| MEM| L00202724 L, L00200C94 IL, 
\begin_inset Newline newline
\end_inset

( 00201536 ) :X_+list4 ANDSI, R| DX| 0F IS, 
\begin_inset Newline newline
\end_inset

( 00201539 ) CALLO, ZO| [MEM +4* DX] L00201498 L, 
\begin_inset Newline newline
\end_inset

( 00201540 ) JMPS, X_+list2 RB, 
\begin_inset Newline newline
\end_inset

( 00201542 ) :X_lis CALL, X_show RL, 
\begin_inset Newline newline
\end_inset

( 00201547 ) CALL, L00200BC8 RL, 
\begin_inset Newline newline
\end_inset

( 0020154C ) CALL, X_+list RL, 
\begin_inset Newline newline
\end_inset

( 00201551 ) JMP, X_keybo RL, 
\begin_inset Newline newline
\end_inset

( 00201556 ) db 0 0 0 0FF 0FF 0 0 0 0 0 0 0 0FF 0 0 0C0 
\begin_inset Newline newline
\end_inset

( 00201566 ) db 0 0 0 0 0 0 0 0 0 0 0FF 0FF 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00201576 ) db 0 0 0FF 0FF 0FF 0 0FF 0FF 0FF 0 0FF 0FF 0FF 0 0FF 80 
\begin_inset Newline newline
\end_inset

( 00201586 ) db 80 0 0C0 0C0 0C0 0 0FF 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00201594 ) :L00201594 db 0 0 
\begin_inset Newline newline
\end_inset

( 00201596 ) db 0 0 
\begin_inset Newline newline
\end_inset

( 00201598 ) :L00201598 db 1 
\begin_inset Newline newline
\end_inset

( 00201599 ) :L00201599 DEC, X| MEM| L00202730 L, 
\begin_inset Newline newline
\end_inset

( 0020159F ) J, S| N| L002015A7 RB, 
\begin_inset Newline newline
\end_inset

( 002015A1 ) :L002015A1 INC, X| MEM| L00202730 L, 
\begin_inset Newline newline
\end_inset

( 002015A7 ) :L002015A7 RET, 
\begin_inset Newline newline
\end_inset

( 002015A8 ) :L002015A8 SUBSI, MEM| L00202730 L, 8 IS, 
\begin_inset Newline newline
\end_inset

( 002015AF ) J, S| N| L002015BB RB, 
\begin_inset Newline newline
\end_inset

( 002015B1 ) MOVI, X| MEM| L00202730 L, 0 IL, 
\begin_inset Newline newline
\end_inset

( 002015BB ) :L002015BB RET, 
\begin_inset Newline newline
\end_inset

( 002015BC ) :L002015BC ADDSI, MEM| L00202730 L, 8 IS, 
\begin_inset Newline newline
\end_inset

( 002015C3 ) RET, 
\begin_inset Newline newline
\end_inset

( 002015C4 ) :L002015C4 ADDSI, MEM| L00202728 L, 2 IS, 
\begin_inset Newline newline
\end_inset

( 002015CB ) RET, 
\begin_inset Newline newline
\end_inset

( 002015CC ) :L002015CC CMPSI, MEM| L00202728 L, 14 IS, 
\begin_inset Newline newline
\end_inset

( 002015D3 ) J, S| Y| L002015DC RB, 
\begin_inset Newline newline
\end_inset

( 002015D5 ) SUBSI, MEM| L00202728 L, 2 IS, 
\begin_inset Newline newline
\end_inset

( 002015DC ) :L002015DC RET, 
\begin_inset Newline newline
\end_inset

( 002015DD ) :L002015DD MOV, X| T| CX'| MEM| L00202728 L, 
\begin_inset Newline newline
\end_inset

( 002015E3 ) XCHG, X| CX'| MEM| L0020272C L, 
\begin_inset Newline newline
\end_inset

( 002015E9 ) MOV, X| F| CX'| MEM| L00202728 L, 
\begin_inset Newline newline
\end_inset

( 002015EF ) RET, 
\begin_inset Newline newline
\end_inset

( 002015F0 ) :L002015F0 XORSI, MEM| L00202728 L, 1 IS, 
\begin_inset Newline newline
\end_inset

( 002015F7 ) RET, 
\begin_inset Newline newline
\end_inset

( 002015F8 ) :L002015F8 MOV, X| T| CX'| MEM| L0020273C L, 
\begin_inset Newline newline
\end_inset

( 002015FE ) ADD, X| T| CX'| MEM| L00202784 L, 
\begin_inset Newline newline
\end_inset

( 00201604 ) XOR, X| T| CX'| MEM| L0020273C L, 
\begin_inset Newline newline
\end_inset

( 0020160A ) ANDI, X| R| CX| FFFFFF00 IL, 
\begin_inset Newline newline
\end_inset

( 00201610 ) J, Z| Y| L0020161D RB, 
\begin_inset Newline newline
\end_inset

( 00201612 ) MOV, X| T| CX'| MEM| L00202784 L, 
\begin_inset Newline newline
\end_inset

( 00201618 ) :L00201618 LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201619 ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 0020161A ) J, Z| N| L00201618 RB, 
\begin_inset Newline newline
\end_inset

( 0020161C ) RET, 
\begin_inset Newline newline
\end_inset

( 0020161D ) :L0020161D PUSH|X, SI| 
\begin_inset Newline newline
\end_inset

( 0020161E ) MOV, X| T| SI'| MEM| L0020273C L, 
\begin_inset Newline newline
\end_inset

( 00201624 ) MOV, X| T| CX'| R| SI| 
\begin_inset Newline newline
\end_inset

( 00201626 ) DEC|X, SI| 
\begin_inset Newline newline
\end_inset

( 00201627 ) MOV, X| T| DI'| R| SI| 
\begin_inset Newline newline
\end_inset

( 00201629 ) ADD, X| T| DI'| MEM| L00202784 L, 
\begin_inset Newline newline
\end_inset

( 0020162F ) SHLI, X| R| DI| 2 IS, 
\begin_inset Newline newline
\end_inset

( 00201632 ) SUB, X| T| CX'| MEM| L00202734 L, 
\begin_inset Newline newline
\end_inset

( 00201638 ) J, S| Y| L00201641 RB, 
\begin_inset Newline newline
\end_inset

( 0020163A ) SHLI, X| R| SI| 2 IS, 
\begin_inset Newline newline
\end_inset

( 0020163D ) STD, 
\begin_inset Newline newline
\end_inset

( 0020163E ) REPZ, 
\begin_inset Newline newline
\end_inset

( 0020163F ) MOVS, X'| 
\begin_inset Newline newline
\end_inset

( 00201640 ) CLD, 
\begin_inset Newline newline
\end_inset

( 00201641 ) :L00201641 POP|X, SI| 
\begin_inset Newline newline
\end_inset

( 00201642 ) SHRI, X| R| DI| 2 IS, 
\begin_inset Newline newline
\end_inset

( 00201645 ) INC|X, DI| 
\begin_inset Newline newline
\end_inset

( 00201646 ) MOV, X| F| DI'| MEM| L00202730 L, 
\begin_inset Newline newline
\end_inset

( 0020164C ) MOV, X| T| CX'| MEM| L00202784 L, 
\begin_inset Newline newline
\end_inset

( 00201652 ) :L00201652 DEC|X, DI| 
\begin_inset Newline newline
\end_inset

( 00201653 ) MOV, X| F| AX'| ZO| [MEM +4* DI] 0 L, 
\begin_inset Newline newline
\end_inset

( 0020165A ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 0020165B ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 0020165C ) J, Z| N| L00201652 RB, 
\begin_inset Newline newline
\end_inset

( 0020165E ) RET, 
\begin_inset Newline newline
\end_inset

( 0020165F ) :L0020165F CALL, L002015F8 RL, 
\begin_inset Newline newline
\end_inset

( 00201664 ) MOV, B| T| CL'| MEM| L00201598 L, 
\begin_inset Newline newline
\end_inset

( 0020166A ) XOR, B| F| CL'| ZO| [MEM +4* DI] 0 L, 
\begin_inset Newline newline
\end_inset

( 00201671 ) CMPI, B| R| CL| 3 IB, 
\begin_inset Newline newline
\end_inset

( 00201674 ) J, Z| N| L00201687 RB, 
\begin_inset Newline newline
\end_inset

( 00201676 ) MOVI, B| MEM| L00201598 L, 4 IB, 
\begin_inset Newline newline
\end_inset

( 0020167D ) MOVI, X| MEM| L00202774 L, C000 IL, 
\begin_inset Newline newline
\end_inset

( 00201687 ) :L00201687 RET, 
\begin_inset Newline newline
\end_inset

( 00201688 ) :L00201688 POP, MEM| L0020277C L, 
\begin_inset Newline newline
\end_inset

( 0020168E ) MOVI, X| MEM| L0020277C L, L002006C1 IL, 
\begin_inset Newline newline
\end_inset

( 00201698 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201699 ) :X_word MOVI, X| MEM| L0020277C L, L00201688 IL, 
\begin_inset Newline newline
\end_inset

( 002016A3 ) JMP, X_accept RL, 
\begin_inset Newline newline
\end_inset

( 002016A8 ) :L002016A8 LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 002016AB ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002016AD ) MOVI|X, AX| 1 IL, 
\begin_inset Newline newline
\end_inset

( 002016B2 ) CMPI, B| MEM| L00201598 L, 4 IB, 
\begin_inset Newline newline
\end_inset

( 002016B9 ) J, Z| Y| L002016BD RB, 
\begin_inset Newline newline
\end_inset

( 002016BB ) MOVI|B, AL| 3 IB, 
\begin_inset Newline newline
\end_inset

( 002016BD ) :L002016BD CMPSI, MEM| L0020276C L, 0A IS, 
\begin_inset Newline newline
\end_inset

( 002016C4 ) J, Z| Y| L002016C8 RB, 
\begin_inset Newline newline
\end_inset

( 002016C6 ) XORI|A, B'| 10 IB, 
\begin_inset Newline newline
\end_inset

( 002016C8 ) :L002016C8 XCHG, X| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002016CA ) MOVI, X| MEM| L00202784 L, 2 IL, 
\begin_inset Newline newline
\end_inset

( 002016D4 ) JMPS, L0020165F RB, 
\begin_inset Newline newline
\end_inset

( 002016D6 ) :L002016D6 TESTI, B| MEM| L00201598 L, 0A IB, 
\begin_inset Newline newline
\end_inset

( 002016DD ) J, Z| N| L0020171B RB, 
\begin_inset Newline newline
\end_inset

( 002016DF ) MOV, X| T| DX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 002016E1 ) ANDI, X| R| DX| FC000000 IL, 
\begin_inset Newline newline
\end_inset

( 002016E7 ) J, Z| Y| L002016F1 RB, 
\begin_inset Newline newline
\end_inset

( 002016E9 ) CMPI, X| R| DX| FC000000 IL, 
\begin_inset Newline newline
\end_inset

( 002016EF ) J, Z| N| L002016A8 RB, 
\begin_inset Newline newline
\end_inset

( 002016F1 ) :L002016F1 SHLI, X| R| AX| 5 IS, 
\begin_inset Newline newline
\end_inset

( 002016F4 ) XORI|A, B'| 2 IB, 
\begin_inset Newline newline
\end_inset

( 002016F6 ) CMPI, B| MEM| L00201598 L, 4 IB, 
\begin_inset Newline newline
\end_inset

( 002016FD ) J, Z| Y| L00201701 RB, 
\begin_inset Newline newline
\end_inset

( 002016FF ) XORI|A, B'| 0B IB, 
\begin_inset Newline newline
\end_inset

( 00201701 ) :L00201701 CMPSI, MEM| L0020276C L, 0A IS, 
\begin_inset Newline newline
\end_inset

( 00201708 ) J, Z| Y| L0020170C RB, 
\begin_inset Newline newline
\end_inset

( 0020170A ) XORI|A, B'| 10 IB, 
\begin_inset Newline newline
\end_inset

( 0020170C ) :L0020170C MOVI, X| MEM| L00202784 L, 1 IL, 
\begin_inset Newline newline
\end_inset

( 00201716 ) JMP, L0020165F RL, 
\begin_inset Newline newline
\end_inset

( 0020171B ) :L0020171B CMPI, B| MEM| L00201598 L, 9 IB, 
\begin_inset Newline newline
\end_inset

( 00201722 ) J, Z| N| L00201730 RB, 
\begin_inset Newline newline
\end_inset

( 00201724 ) MOV, X| T| DX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201726 ) SHLI, X| R| DX| 5 IS, 
\begin_inset Newline newline
\end_inset

( 00201729 ) SARI, X| R| DX| 5 IS, 
\begin_inset Newline newline
\end_inset

( 0020172C ) CMP, X| T| DX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 0020172E ) J, Z| Y| L00201732 RB, 
\begin_inset Newline newline
\end_inset

( 00201730 ) :L00201730 LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201731 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201732 ) :L00201732 SHLI, X| R| AX| 5 IS, 
\begin_inset Newline newline
\end_inset

( 00201735 ) XORI|A, B'| 6 IB, 
\begin_inset Newline newline
\end_inset

( 00201737 ) JMPS, L00201701 RB, 
\begin_inset Newline newline
\end_inset

( 00201739 ) :L00201739 LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020173C ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 0020173E ) MOV|TA, X'| L00202734 L, 
\begin_inset Newline newline
\end_inset

( 00201743 ) SUB, X| T| AX'| MEM| L00202738 L, 
\begin_inset Newline newline
\end_inset

( 00201749 ) J, Z| Y| L00201772 RB, 
\begin_inset Newline newline
\end_inset

( 0020174B ) MOV, X| T| CX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 0020174D ) XCHG|AX, DX| 
\begin_inset Newline newline
\end_inset

( 0020174E ) PUSH|X, SI| 
\begin_inset Newline newline
\end_inset

( 0020174F ) MOV, X| T| SI'| MEM| L00202734 L, 
\begin_inset Newline newline
\end_inset

( 00201755 ) LEA, SI'| ZO| [MEM +4* SI] -4 L, 
\begin_inset Newline newline
\end_inset

( 0020175C ) MOV, X| T| DI'| MEM| L00202740 L, 
\begin_inset Newline newline
\end_inset

( 00201762 ) :L00201762 STD, 
\begin_inset Newline newline
\end_inset

( 00201763 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201764 ) CLD, 
\begin_inset Newline newline
\end_inset

( 00201765 ) STOS, X'| 
\begin_inset Newline newline
\end_inset

( 00201766 ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00201767 ) J, Z| N| L00201762 RB, 
\begin_inset Newline newline
\end_inset

( 00201769 ) XCHG|AX, DX| 
\begin_inset Newline newline
\end_inset

( 0020176A ) STOS, X'| 
\begin_inset Newline newline
\end_inset

( 0020176B ) MOV, X| F| DI'| MEM| L00202740 L, 
\begin_inset Newline newline
\end_inset

( 00201771 ) POP|X, SI| 
\begin_inset Newline newline
\end_inset

( 00201772 ) :L00201772 LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201773 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201774 ) :L00201774 CALL, L00201739 RL, 
\begin_inset Newline newline
\end_inset

( 00201779 ) MOV, X| T| DI'| MEM| L00202738 L, 
\begin_inset Newline newline
\end_inset

( 0020177F ) MOV, X| T| CX'| MEM| L0020273C L, 
\begin_inset Newline newline
\end_inset

( 00201785 ) SUB, X| T| CX'| R| DI| 
\begin_inset Newline newline
\end_inset

( 00201787 ) SHLI, X| R| DI| 2 IS, 
\begin_inset Newline newline
\end_inset

( 0020178A ) PUSH|X, SI| 
\begin_inset Newline newline
\end_inset

( 0020178B ) MOV, X| T| SI'| MEM| L00202734 L, 
\begin_inset Newline newline
\end_inset

( 00201791 ) SHLI, X| R| SI| 2 IS, 
\begin_inset Newline newline
\end_inset

( 00201794 ) REPZ, 
\begin_inset Newline newline
\end_inset

( 00201795 ) MOVS, X'| 
\begin_inset Newline newline
\end_inset

( 00201796 ) POP|X, SI| 
\begin_inset Newline newline
\end_inset

( 00201797 ) JMP, L00201599 RL, 
\begin_inset Newline newline
\end_inset

( 0020179C ) :L0020179C CALL, L00201739 RL, 
\begin_inset Newline newline
\end_inset

( 002017A1 ) JMP, L00201599 RL, 
\begin_inset Newline newline
\end_inset

( 002017A6 ) :L002017A6 MOVI|B, AL| 1 IB, 
\begin_inset Newline newline
\end_inset

( 002017A8 ) JMPS, L002017C8 RB, 
\begin_inset Newline newline
\end_inset

( 002017AA ) :L002017AA MOVI|B, AL| 3 IB, 
\begin_inset Newline newline
\end_inset

( 002017AC ) JMPS, L002017C8 RB, 
\begin_inset Newline newline
\end_inset

( 002017AE ) :L002017AE MOVI|B, AL| 4 IB, 
\begin_inset Newline newline
\end_inset

( 002017B0 ) JMPS, L002017C8 RB, 
\begin_inset Newline newline
\end_inset

( 002017B2 ) :L002017B2 MOVI|B, AL| 9 IB, 
\begin_inset Newline newline
\end_inset

( 002017B4 ) JMPS, L002017C8 RB, 
\begin_inset Newline newline
\end_inset

( 002017B6 ) :L002017B6 MOVI|B, AL| 0A IB, 
\begin_inset Newline newline
\end_inset

( 002017B8 ) JMPS, L002017C8 RB, 
\begin_inset Newline newline
\end_inset

( 002017BA ) :L002017BA MOVI|B, AL| 0B IB, 
\begin_inset Newline newline
\end_inset

( 002017BC ) JMPS, L002017C8 RB, 
\begin_inset Newline newline
\end_inset

( 002017BE ) :L002017BE MOVI|B, AL| 0D IB, 
\begin_inset Newline newline
\end_inset

( 002017C0 ) JMPS, L002017C8 RB, 
\begin_inset Newline newline
\end_inset

( 002017C2 ) :L002017C2 MOVI|B, AL| 0E IB, 
\begin_inset Newline newline
\end_inset

( 002017C4 ) JMPS, L002017C8 RB, 
\begin_inset Newline newline
\end_inset

( 002017C6 ) :L002017C6 MOVI|B, AL| 7 IB, 
\begin_inset Newline newline
\end_inset

( 002017C8 ) :L002017C8 MOV|FA, B'| L00201598 L, 
\begin_inset Newline newline
\end_inset

( 002017CD ) MOVI, X| MEM| L0020277C L, L0020165F IL, 
\begin_inset Newline newline
\end_inset

( 002017D7 ) MOV, X| T| AX'| ZO| [MEM +4* AX] L00201554 L, 
\begin_inset Newline newline
\end_inset

( 002017DE ) :L002017DE MOV|FA, X'| L00202774 L, 
\begin_inset Newline newline
\end_inset

( 002017E3 ) POP|X, AX| 
\begin_inset Newline newline
\end_inset

( 002017E4 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 002017E5 ) JMP, X_accept RL, 
\begin_inset Newline newline
\end_inset

( 002017EA ) :L002017EA LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 002017ED ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002017EF ) XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 002017F1 ) INC, X| MEM| L00202784 L, 
\begin_inset Newline newline
\end_inset

( 002017F7 ) JMP, L0020165F RL, 
\begin_inset Newline newline
\end_inset

( 002017FC ) :L002017FC MOVI, B| MEM| L00201598 L, 0C IB, 
\begin_inset Newline newline
\end_inset

( 00201803 ) MOVI|X, AX| 00FF00FF IL, 
\begin_inset Newline newline
\end_inset

( 00201808 ) MOVI, X| MEM| L0020277C L, L002017EA IL, 
\begin_inset Newline newline
\end_inset

( 00201812 ) JMPS, L002017DE RB, 
\begin_inset Newline newline
\end_inset

( 00201814 ) :L00201814 POP|X, AX| 
\begin_inset Newline newline
\end_inset

( 00201815 ) :L00201815 LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201816 ) MOVI, X| MEM| L0020277C L, L002006C1 IL, 
\begin_inset Newline newline
\end_inset

( 00201820 ) MOVI, X| MEM| L00202780 L, X_nul IL, 
\begin_inset Newline newline
\end_inset

( 0020182A ) MOVI, B| MEM| L00200FCD L, 0 IB, 
\begin_inset Newline newline
\end_inset

( 00201831 ) MOVI, X| MEM| L00200FC1 L, L002011CF IL, 
\begin_inset Newline newline
\end_inset

( 0020183B ) MOVI, X| MEM| L00202774 L, 00FFFF00 IL, 
\begin_inset Newline newline
\end_inset

( 00201845 ) JMP, X_accept RL, 
\begin_inset Newline newline
\end_inset

( 0020184A ) :L0020184A MOV, X| T| DX'| MEM| L00202740 L, 
\begin_inset Newline newline
\end_inset

( 00201850 ) CMPI, X| R| DX| 00094C00 IL, 
\begin_inset Newline newline
\end_inset

( 00201856 ) J, Z| N| L00201859 RB, 
\begin_inset Newline newline
\end_inset

( 00201858 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201859 ) :L00201859 SUBSI, R| DX| 8 IS, 
\begin_inset Newline newline
\end_inset

( 0020185C ) MOV, X| T| CX'| BO| [DX] 4 B, 
\begin_inset Newline newline
\end_inset

( 0020185F ) MOV, X| F| CX'| MEM| L00202784 L, 
\begin_inset Newline newline
\end_inset

( 00201865 ) :L00201865 LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201868 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 0020186A ) MOV, X| T| AX'| ZO| [DX] 
\begin_inset Newline newline
\end_inset

( 0020186C ) SUBSI, R| DX| 4 IS, 
\begin_inset Newline newline
\end_inset

( 0020186F ) DEC|X, CX| 
\begin_inset Newline newline
\end_inset

( 00201870 ) J, Z| N| L00201865 RB, 
\begin_inset Newline newline
\end_inset

( 00201872 ) ADDSI, R| DX| 4 IS, 
\begin_inset Newline newline
\end_inset

( 00201875 ) MOV, X| F| DX'| MEM| L00202740 L, 
\begin_inset Newline newline
\end_inset

( 0020187B ) JMP, L002015F8 RL, 
\begin_inset Newline newline
\end_inset

( 00201880 ) :L00201880 dl X_nul L00201774 L00201814 L0020184A 
\begin_inset Newline newline
\end_inset

( 00201890 ) dl L002017A6 L002017AA L002017AE L002015F0 
\begin_inset Newline newline
\end_inset

( 002018A0 ) dl L00201599 L002015A8 L002015BC L002015A1 
\begin_inset Newline newline
\end_inset

( 002018B0 ) dl L002015CC L002017FC L002017C6 L002015C4 
\begin_inset Newline newline
\end_inset

( 002018C0 ) dl X_nul L002017BA L002017B6 L002017B2 
\begin_inset Newline newline
\end_inset

( 002018D0 ) dl X_nul X_nul X_nul L002015DD 
\begin_inset Newline newline
\end_inset

( 002018E0 ) :L002018E0 dl L002017BE L002017C2 X_nul L0020179C 
\begin_inset Newline newline
\end_inset

( 002018F0 ) :L002018F0 dl 00072515 2D0D010B 0110160C 2B0A0923 
\begin_inset Newline newline
\end_inset

( 00201900 ) dl 023A3800 220E1000 24001305 
\begin_inset Newline newline
\end_inset

( 0020190C ) :L0020190C dl X_no-ret 
\begin_inset Newline newline
\end_inset

( 00201910 ) :L00201910 LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201911 ) JMPS, X_e2 RB, 
\begin_inset Newline newline
\end_inset

( 00201913 ) :X_edit MOV, X| T| CX'| MEM| L00202728 L, 
\begin_inset Newline newline
\end_inset

( 00201919 ) MOV, X| F| CX'| MEM| L0020272C L, 
\begin_inset Newline newline
\end_inset

( 0020191F ) MOV|FA, X'| L00202728 L, 
\begin_inset Newline newline
\end_inset

( 00201924 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201925 ) :X_e CALL, X_lis RL, 
\begin_inset Newline newline
\end_inset

( 0020192A ) :X_+e CALLO, MEM| L0020190C L, 
\begin_inset Newline newline
\end_inset

( 00201930 ) MOVI, X| MEM| L00202780 L, L002016D6 IL, 
\begin_inset Newline newline
\end_inset

( 0020193A ) MOVI, B| MEM| L00200FCD L, 25 IB, 
\begin_inset Newline newline
\end_inset

( 00201941 ) MOVI, X| MEM| L00200FC1 L, L00201910 IL, 
\begin_inset Newline newline
\end_inset

( 0020194B ) :X_e2 MOVI, X| MEM| L00202768 L, L002018E0 IL, 
\begin_inset Newline newline
\end_inset

( 00201955 ) MOVI, X| MEM| L00202764 L, L002018F0 IL, 
\begin_inset Newline newline
\end_inset

( 0020195F ) MOVI, X| MEM| L00202774 L, 00FFFF00 IL, 
\begin_inset Newline newline
\end_inset

( 00201969 ) :X_e3 CALL, L00200E9F RL, 
\begin_inset Newline newline
\end_inset

( 0020196E ) CALLO, ZO| [MEM +4* AX] L00201880 L, 
\begin_inset Newline newline
\end_inset

( 00201975 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201976 ) JMPS, X_e3 RB, 
\begin_inset Newline newline
\end_inset

( 00201978 ) :X_pad POP|X, DX| 
\begin_inset Newline newline
\end_inset

( 00201979 ) MOV, X| F| DX'| MEM| L00201594 L, 
\begin_inset Newline newline
\end_inset

( 0020197F ) ADDI, X| R| DX| 8C IL, 
\begin_inset Newline newline
\end_inset

( 00201985 ) MOV, X| F| DX'| MEM| L00202764 L, 
\begin_inset Newline newline
\end_inset

( 0020198B ) SUBSI, R| DX| 10 IS, 
\begin_inset Newline newline
\end_inset

( 0020198E ) MOV, X| F| DX'| MEM| L00202768 L, 
\begin_inset Newline newline
\end_inset

( 00201994 ) :X_pad1 CALL, L00200E9F RL, 
\begin_inset Newline newline
\end_inset

( 00201999 ) MOV, X| T| DX'| MEM| L00201594 L, 
\begin_inset Newline newline
\end_inset

( 0020199F ) ADD, X| T| DX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 002019A1 ) LEA, DX'| BO| [DX +4* AX] 5 B, 
\begin_inset Newline newline
\end_inset

( 002019A5 ) ADD, X| T| DX'| BO| [DX] 0FC B, 
\begin_inset Newline newline
\end_inset

( 002019A8 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 002019A9 ) :L002019A9 CALLO, R| DX| 
\begin_inset Newline newline
\end_inset

( 002019AB ) JMPS, X_pad1 RB, 
\begin_inset Newline newline
\end_inset

( 002019AD ) :L002019AD db 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002019B1 ) :L002019B1 db 0 0 0 0 0 0 0 0 17 0F 4 1 
\begin_inset Newline newline
\end_inset

( 002019BD ) db 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002019C5 ) :L002019C5 XORI, X| MEM| L00202770 L, 0E1 IL, 
\begin_inset Newline newline
\end_inset

( 002019CF ) XORI, B| MEM| L00200FF1 L, 2F IB, 
\begin_inset Newline newline
\end_inset

( 002019D6 ) :L002019D6 CALLO, MEM| L00202770 L, 
\begin_inset Newline newline
\end_inset

( 002019DC ) MOVI, X| MEM| L002019AD L, 0 IL, 
\begin_inset Newline newline
\end_inset

( 002019E6 ) CMPSI, MEM| L0020276C L, 10 IS, 
\begin_inset Newline newline
\end_inset

( 002019ED ) J, Z| N| L002019F9 RB, 
\begin_inset Newline newline
\end_inset

( 002019EF ) MOVI, X| MEM| L002019AD L, 00150414 IL, 
\begin_inset Newline newline
\end_inset

( 002019F9 ) :L002019F9 MOVI, X| MEM| L00202764 L, L002019A9 IL, 
\begin_inset Newline newline
\end_inset

( 00201A03 ) MOVI, X| MEM| L00202768 L, L002019AD IL, 
\begin_inset Newline newline
\end_inset

( 00201A0D ) RET, 
\begin_inset Newline newline
\end_inset

( 00201A0E ) :L00201A0E CALL, L002019C5 RL, 
\begin_inset Newline newline
\end_inset

( 00201A13 ) JMPS, L00201A8E RB, 
\begin_inset Newline newline
\end_inset

( 00201A15 ) dl L00201160 L00201160 L002011C7 L00201A8E 
\begin_inset Newline newline
\end_inset

( 00201A25 ) dl L00201A0E 
\begin_inset Newline newline
\end_inset

( 00201A29 ) :L00201A29 CALL, L00200B8B RL, 
\begin_inset Newline newline
\end_inset

( 00201A2E ) MOVI, X| MEM| L002019B1 L, 00091606 IL, 
\begin_inset Newline newline
\end_inset

( 00201A38 ) CALL, L002019D6 RL, 
\begin_inset Newline newline
\end_inset

( 00201A3D ) MOVI, B| MEM| L00201102 L, 0 IB, 
\begin_inset Newline newline
\end_inset

( 00201A44 ) MOV|TA, X'| L0020278C L, 
\begin_inset Newline newline
\end_inset

( 00201A49 ) :L00201A49 CALL, X_qkey RL, 
\begin_inset Newline newline
\end_inset

( 00201A4E ) J, Z| Y| L00201A57 RB, 
\begin_inset Newline newline
\end_inset

( 00201A50 ) JMPO, ZO| [MEM +4* AX] L00201815 L, 
\begin_inset Newline newline
\end_inset

( 00201A57 ) :L00201A57 TEST, X| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201A59 ) J, LE| Y| L00201A8E RB, 
\begin_inset Newline newline
\end_inset

( 00201A5B ) CMPI|A, B'| 23 IB, 
\begin_inset Newline newline
\end_inset

( 00201A5D ) J, Z| Y| L00201A86 RB, 
\begin_inset Newline newline
\end_inset

( 00201A5F ) MOV|TA, X'| L0020278C L, 
\begin_inset Newline newline
\end_inset

( 00201A64 ) CMP, X| T| AX'| MEM| L0020276C L, 
\begin_inset Newline newline
\end_inset

( 00201A6A ) J, S| N| 18 (RB,) 
\begin_inset Newline newline
\end_inset

( 00201A6C ) TESTI, B| MEM| L00201102 L, 0FF IB, 
\begin_inset Newline newline
\end_inset

( 00201A73 ) J, Z| Y| L00201A77 RB, 
\begin_inset Newline newline
\end_inset

( 00201A75 ) NEG, X| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201A77 ) :L00201A77 MOV, X| T| DX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201A79 ) IMUL, DX'| MEM| L0020276C L, 
\begin_inset Newline newline
\end_inset

( 00201A80 ) ADD, X| T| DX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201A82 ) MOV, X| F| DX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201A84 ) JMPS, L00201A8E RB, 
\begin_inset Newline newline
\end_inset

( 00201A86 ) :L00201A86 XOR, X| F| AX'| MEM| L00201102 L, 
\begin_inset Newline newline
\end_inset

( 00201A8C ) NEG, X| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201A8E ) :L00201A8E LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201A8F ) JMPS, L00201A49 RB, 
\begin_inset Newline newline
\end_inset

( 00201A91 ) dl L0020101A L0020101A L00201074 
\begin_inset Newline newline
\end_inset

( 00201A9D ) :L00201A9D MOVI, X| MEM| L002019B1 L, 02150402 IL, 
\begin_inset Newline newline
\end_inset

( 00201AA7 ) CALL, L00200B8B RL, 
\begin_inset Newline newline
\end_inset

( 00201AAC ) MOVI, X| MEM| L00202784 L, 1 IL, 
\begin_inset Newline newline
\end_inset

( 00201AB6 ) MOVI, X| MEM| L00202778 L, 1 IL, 
\begin_inset Newline newline
\end_inset

( 00201AC0 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201AC3 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201AC5 ) MOVI, X| ZO| [SI] 0 IL, 
\begin_inset Newline newline
\end_inset

( 00201ACB ) MOVI, B| MEM| L0020100D L, 1C IB, 
\begin_inset Newline newline
\end_inset

( 00201AD2 ) :L00201AD2 J, Z| Y| L00201AE2 RB, 
\begin_inset Newline newline
\end_inset

( 00201AD4 ) CMPI|A, X'| 83 IL, 
\begin_inset Newline newline
\end_inset

( 00201AD9 ) J, S| N| L00201AE2 RB, 
\begin_inset Newline newline
\end_inset

( 00201ADB ) JMPO, ZO| [MEM +4* AX] L00201891 L, 
\begin_inset Newline newline
\end_inset

( 00201AE2 ) :L00201AE2 TEST, X| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201AE4 ) J, LE| Y| L00201B02 RB, 
\begin_inset Newline newline
\end_inset

( 00201AE6 ) CMPI|A, X'| 30 IL, 
\begin_inset Newline newline
\end_inset

( 00201AEB ) J, S| N| L00201B02 RB, 
\begin_inset Newline newline
\end_inset

( 00201AED ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201AF0 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201AF2 ) CALL, L00200B72 RL, 
\begin_inset Newline newline
\end_inset

( 00201AF7 ) CALL, L00201048 RL, 
\begin_inset Newline newline
\end_inset

( 00201AFC ) INC, X| MEM| L00202778 L, 
\begin_inset Newline newline
\end_inset

( 00201B02 ) :L00201B02 LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201B03 ) CALL, X_qkey RL, 
\begin_inset Newline newline
\end_inset

( 00201B08 ) JMPS, L00201AD2 RB, 
\begin_inset Newline newline
\end_inset

( 00201B0A ) CALL, L002019C5 RL, 
\begin_inset Newline newline
\end_inset

( 00201B0F ) JMP, L002011CF RL, 
\begin_inset Newline newline
\end_inset

( 00201B14 ) :L00201B14 JMPO, MEM| L00200FC1 L, 
\begin_inset Newline newline
\end_inset

( 00201B1A ) IRET, 
\begin_inset Newline newline
\end_inset

( 00201B1B ) ADC, X| F| SP'| ZO| [AX] 
\begin_inset Newline newline
\end_inset

( 00201B1D ) ADD, B| F| CL'| R| BH| 
\begin_inset Newline newline
\end_inset

( 00201B1F ) ADC, X| F| SP'| ZO| [AX] 
\begin_inset Newline newline
\end_inset

( 00201B21 ) ADD, B| F| CL'| R| BH| 
\begin_inset Newline newline
\end_inset

( 00201B23 ) ADC, X| F| SP'| ZO| [AX] 
\begin_inset Newline newline
\end_inset

( 00201B25 ) ADD, B| F| DL'| ZO| [BX +1* BX] 
\begin_inset Newline newline
\end_inset

( 00201B28 ) AND, B| F| AL'| ZO| [AX] 
\begin_inset Newline newline
\end_inset

( 00201B2A ) OR, B| T| BL'| ZO| [BX] 
\begin_inset Newline newline
\end_inset

( 00201B2C ) AND, B| F| AL'| ZO| [AX] 
\begin_inset Newline newline
\end_inset

( 00201B2E ) :L00201B2E MOVI, X| MEM| L002019B1 L, 0 IL, 
\begin_inset Newline newline
\end_inset

( 00201B38 ) MOVI, X| MEM| L00202768 L, L002019AD IL, 
\begin_inset Newline newline
\end_inset

( 00201B42 ) MOVI, X| MEM| L00202764 L, L002019A9 IL, 
\begin_inset Newline newline
\end_inset

( 00201B4C ) :L00201B4C CALL, X_qkey RL, 
\begin_inset Newline newline
\end_inset

( 00201B51 ) J, Z| Y| L00201B5A RB, 
\begin_inset Newline newline
\end_inset

( 00201B53 ) JMPO, ZO| [MEM +4* AX] L0020191A L, 
\begin_inset Newline newline
\end_inset

( 00201B5A ) :L00201B5A CMPI|A, B'| 30 IB, 
\begin_inset Newline newline
\end_inset

( 00201B5C ) J, Z| N| L00201B6B RB, 
\begin_inset Newline newline
\end_inset

( 00201B5E ) MOVI, X| MEM| L002019B1 L, 02150402 IL, 
\begin_inset Newline newline
\end_inset

( 00201B68 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201B69 ) JMPS, L00201B4C RB, 
\begin_inset Newline newline
\end_inset

( 00201B6B ) :L00201B6B TEST, X| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201B6D ) J, LE| Y| L00201B9F RB, 
\begin_inset Newline newline
\end_inset

( 00201B6F ) TESTI, X| MEM| L002019B1 L, -1 IL, 
\begin_inset Newline newline
\end_inset

( 00201B79 ) J, Z| N| L00201B88 RB, 
\begin_inset Newline newline
\end_inset

( 00201B7B ) CMPI, B| MEM| L0020278C L, 0A IB, 
\begin_inset Newline newline
\end_inset

( 00201B82 ) J|X, S| Y| L00201A29 RL, 
\begin_inset Newline newline
\end_inset

( 00201B88 ) :L00201B88 CMPI|A, X'| 30 IL, 
\begin_inset Newline newline
\end_inset

( 00201B8D ) J, S| N| L00201B9F RB, 
\begin_inset Newline newline
\end_inset

( 00201B8F ) CALL, L00201A9D RL, 
\begin_inset Newline newline
\end_inset

( 00201B94 ) CALLO, MEM| L0020277C L, 
\begin_inset Newline newline
\end_inset

( 00201B9A ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201B9D ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201B9F ) :L00201B9F LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201BA0 ) JMP, X_accept RL, 
\begin_inset Newline newline
\end_inset

( 00201BA5 ) :X_qwert MOVI, X| MEM| L00202750 L, L00201B2E IL, 
\begin_inset Newline newline
\end_inset

( 00201BAF ) RET, 
\begin_inset Newline newline
\end_inset

( 00201BB0 ) :L00201BB0 SUBI, X| R| DI| 00081200 IL, 
\begin_inset Newline newline
\end_inset

( 00201BB6 ) J, C| Y| L00201BE1 RB, 
\begin_inset Newline newline
\end_inset

( 00201BB8 ) ADDI, X| R| DI| 1200 IL, 
\begin_inset Newline newline
\end_inset

( 00201BBE ) MOV, X| T| AX'| R| DI| 
\begin_inset Newline newline
\end_inset

( 00201BC0 ) ANDI|A, X'| 0FF IL, 
\begin_inset Newline newline
\end_inset

( 00201BC5 ) SHRI, X| R| DI| 8 IS, 
\begin_inset Newline newline
\end_inset

( 00201BC8 ) CMPI, X| R| DI| 05A0 IL, 
\begin_inset Newline newline
\end_inset

( 00201BCE ) J, C| N| L00201BE1 RB, 
\begin_inset Newline newline
\end_inset

( 00201BD0 ) MOV|FA, X'| L00202730 L, 
\begin_inset Newline newline
\end_inset

( 00201BD5 ) MOV, X| F| DI'| MEM| L00202728 L, 
\begin_inset Newline newline
\end_inset

( 00201BDB ) CALLO, MEM| L00202758 L, 
\begin_inset Newline newline
\end_inset

( 00201BE1 ) :L00201BE1 MOVI|X, SP| 000A0000 IL, 
\begin_inset Newline newline
\end_inset

( 00201BE6 ) CMPI, X| R| SI| 0009F400 IL, 
\begin_inset Newline newline
\end_inset

( 00201BEC ) J, C| Y| L00201BF3 RB, 
\begin_inset Newline newline
\end_inset

( 00201BEE ) MOVI|X, SI| 0009F400 IL, 
\begin_inset Newline newline
\end_inset

( 00201BF3 ) :L00201BF3 MOVI, X| MEM| L002027C8 L, L002005E0 IL, 
\begin_inset Newline newline
\end_inset

( 00201BFD ) MOVI, X| MEM| L002027CC L, L002006FA IL, 
\begin_inset Newline newline
\end_inset

( 00201C07 ) MOVI, X| MEM| L002027D0 L, L0020069A IL, 
\begin_inset Newline newline
\end_inset

( 00201C11 ) MOVI, X| MEM| L002027D4 L, L002006AA IL, 
\begin_inset Newline newline
\end_inset

( 00201C1B ) MOVI|X, AX| 2F IL, 
\begin_inset Newline newline
\end_inset

( 00201C20 ) CALL, L00200B72 RL, 
\begin_inset Newline newline
\end_inset

( 00201C25 ) JMP, X_accept RL, 
\begin_inset Newline newline
\end_inset

( 00201C2A ) :X_no-ret POP|X, CX| 
\begin_inset Newline newline
\end_inset

( 00201C2B ) MOVI|X, SP| 000A0000 IL, 
\begin_inset Newline newline
\end_inset

( 00201C30 ) JMPO, R| CX| 
\begin_inset Newline newline
\end_inset

( 00201C32 ) :X_r? LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201C35 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201C37 ) MOVI|X, AX| 000A0000 IL, 
\begin_inset Newline newline
\end_inset

( 00201C3C ) SUB, X| T| AX'| R| SP| 
\begin_inset Newline newline
\end_inset

( 00201C3E ) SHR, 1| X| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201C40 ) SHR, 1| X| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201C42 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201C43 ) :X_boot MOVI|B, AL| 0FE IB, 
\begin_inset Newline newline
\end_inset

( 00201C45 ) OUT|P, B'| 64 P, 
\begin_inset Newline newline
\end_inset

( 00201C47 ) :X_bootLoop JMPS, X_bootLoop RB, 
\begin_inset Newline newline
\end_inset

( 00201C49 ) :X_erase MOV, X| T| CX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201C4B ) SHLI, X| R| CX| 8 IS, 
\begin_inset Newline newline
\end_inset

( 00201C4E ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201C4F ) PUSH|X, DI| 
\begin_inset Newline newline
\end_inset

( 00201C50 ) MOV, X| T| DI'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201C52 ) SHLI, X| R| DI| 0A IS, 
\begin_inset Newline newline
\end_inset

( 00201C55 ) XOR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201C57 ) REPZ, 
\begin_inset Newline newline
\end_inset

( 00201C58 ) STOS, X'| 
\begin_inset Newline newline
\end_inset

( 00201C59 ) POP|X, DI| 
\begin_inset Newline newline
\end_inset

( 00201C5A ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201C5B ) RET, 
\begin_inset Newline newline
\end_inset

( 00201C5C ) :X_copy CMPSI, R| AX| 0C IS, 
\begin_inset Newline newline
\end_inset

( 00201C5F ) J|X, C| Y| X_abort RL, 
\begin_inset Newline newline
\end_inset

( 00201C65 ) PUSH|X, DI| 
\begin_inset Newline newline
\end_inset

( 00201C66 ) MOV, X| T| DI'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201C68 ) SHLI, X| R| DI| 0A IS, 
\begin_inset Newline newline
\end_inset

( 00201C6B ) PUSH|X, SI| 
\begin_inset Newline newline
\end_inset

( 00201C6C ) MOV, X| T| SI'| MEM| L00202728 L, 
\begin_inset Newline newline
\end_inset

( 00201C72 ) SHLI, X| R| SI| 0A IS, 
\begin_inset Newline newline
\end_inset

( 00201C75 ) MOVI|X, CX| 0200 IL, 
\begin_inset Newline newline
\end_inset

( 00201C7A ) REPZ, 
\begin_inset Newline newline
\end_inset

( 00201C7B ) MOVS, X'| 
\begin_inset Newline newline
\end_inset

( 00201C7C ) POP|X, SI| 
\begin_inset Newline newline
\end_inset

( 00201C7D ) POP|X, DI| 
\begin_inset Newline newline
\end_inset

( 00201C7E ) MOV|FA, X'| L00202728 L, 
\begin_inset Newline newline
\end_inset

( 00201C83 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201C84 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201C85 ) :X_debu MOVI, X| MEM| L00202810 L, 000302B5 IL, 
\begin_inset Newline newline
\end_inset

( 00201C8F ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201C92 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201C94 ) MOV|TA, X'| L0020043E L, 
\begin_inset Newline newline
\end_inset

( 00201C99 ) PUSH, ZO| [AX] 
\begin_inset Newline newline
\end_inset

( 00201C9B ) CALL, L00200C94 RL, 
\begin_inset Newline newline
\end_inset

( 00201CA0 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201CA3 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201CA5 ) POP|X, AX| 
\begin_inset Newline newline
\end_inset

( 00201CA6 ) CALL, L00200C94 RL, 
\begin_inset Newline newline
\end_inset

( 00201CAB ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201CAE ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201CB0 ) MOV|TA, X'| L00200447 L, 
\begin_inset Newline newline
\end_inset

( 00201CB5 ) CALL, L00200C94 RL, 
\begin_inset Newline newline
\end_inset

( 00201CBA ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201CBD ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201CBF ) MOV, X| T| AX'| R| SI| 
\begin_inset Newline newline
\end_inset

( 00201CC1 ) JMP, L00200C94 RL, 
\begin_inset Newline newline
\end_inset

( 00201CC6 ) :L00201CC6 DEC, X| MEM| L00202784 L, 
\begin_inset Newline newline
\end_inset

( 00201CCC ) J, Z| Y| L00201CD1 RB, 
\begin_inset Newline newline
\end_inset

( 00201CCE ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201CCF ) JMPS, L00201CC6 RB, 
\begin_inset Newline newline
\end_inset

( 00201CD1 ) :L00201CD1 RET, 
\begin_inset Newline newline
\end_inset

( 00201CD2 ) :X_tic CALL, X_word RL, 
\begin_inset Newline newline
\end_inset

( 00201CD7 ) CALL, L00201CC6 RL, 
\begin_inset Newline newline
\end_inset

( 00201CDC ) CALL, L0020054B RL, 
\begin_inset Newline newline
\end_inset

( 00201CE1 ) J|X, Z| N| X_abort RL, 
\begin_inset Newline newline
\end_inset

( 00201CE7 ) MOV, X| T| AX'| ZO| [MEM +4* CX] 0036A800 L, 
\begin_inset Newline newline
\end_inset

( 00201CEE ) RET, 
\begin_inset Newline newline
\end_inset

( 00201CEF ) :X_itick ANDI|A, X'| -10 IL, 
\begin_inset Newline newline
\end_inset

( 00201CF4 ) CALL, L0020054B RL, 
\begin_inset Newline newline
\end_inset

( 00201CF9 ) MOV, X| T| AX'| ZO| [MEM +4* CX] 0036A800 L, 
\begin_inset Newline newline
\end_inset

( 00201D00 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201D01 ) :X_winver LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201D04 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201D06 ) MOVI|X, AX| 0 IL, 
\begin_inset Newline newline
\end_inset

( 00201D0B ) OR, X| T| AX'| R| AX| 
\begin_inset Newline newline
\end_inset

( 00201D0D ) RET, 
\begin_inset Newline newline
\end_inset

( 00201D0E ) db 0 0 
\begin_inset Newline newline
\end_inset

( 00201D10 ) :L00201D10 db 1 0 
\begin_inset Newline newline
\end_inset

( 00201D12 ) :L00201D12 db 0 
\begin_inset Newline newline
\end_inset

( 00201D13 ) :L00201D13 db 0 
\begin_inset Newline newline
\end_inset

( 00201D14 ) :L00201D14 db 0 0 1 2 12 1B 0FF 0 
\begin_inset Newline newline
\end_inset

( 00201D1C ) :L00201D1C OS:, 
\begin_inset Newline newline
\end_inset

( 00201D1D ) MOVI|X, DX| 03F4 IW, 
\begin_inset Newline newline
\end_inset

( 00201D20 ) :L00201D20 IN|D, B'| 
\begin_inset Newline newline
\end_inset

( 00201D21 ) OUT|P, B'| 0E1 P, 
\begin_inset Newline newline
\end_inset

( 00201D23 ) SHL, 1| B| R| AL| 
\begin_inset Newline newline
\end_inset

( 00201D25 ) J, C| N| L00201D20 RB, 
\begin_inset Newline newline
\end_inset

( 00201D27 ) INC|X, DX| 
\begin_inset Newline newline
\end_inset

( 00201D28 ) TEST, B| AL'| R| AL| 
\begin_inset Newline newline
\end_inset

( 00201D2A ) RET, 
\begin_inset Newline newline
\end_inset

( 00201D2B ) :L00201D2B LEA, DX'| MEM| L00201D12 L, 
\begin_inset Newline newline
\end_inset

( 00201D31 ) MOV, B| F| AL'| ZO| [DX] 
\begin_inset Newline newline
\end_inset

( 00201D33 ) :L00201D33 PUSH|X, SI| 
\begin_inset Newline newline
\end_inset

( 00201D34 ) MOV, X| T| SI'| R| DX| 
\begin_inset Newline newline
\end_inset

( 00201D36 ) :L00201D36 CALL, L00201D1C RL, 
\begin_inset Newline newline
\end_inset

( 00201D3B ) J, S| N| L00201D42 RB, 
\begin_inset Newline newline
\end_inset

( 00201D3D ) IN|D, B'| 
\begin_inset Newline newline
\end_inset

( 00201D3E ) OUT|P, B'| 0E1 P, 
\begin_inset Newline newline
\end_inset

( 00201D40 ) JMPS, L00201D36 RB, 
\begin_inset Newline newline
\end_inset

( 00201D42 ) :L00201D42 LODS, B'| 
\begin_inset Newline newline
\end_inset

( 00201D43 ) MOVI|B, AH| 1E IB, 
\begin_inset Newline newline
\end_inset

( 00201D45 ) OUT|D, B'| 
\begin_inset Newline newline
\end_inset

( 00201D46 ) :L00201D46 OUT|P, B'| 0E1 P, 
\begin_inset Newline newline
\end_inset

( 00201D48 ) DEC, B| R| AH| 
\begin_inset Newline newline
\end_inset

( 00201D4A ) J, Z| N| L00201D46 RB, 
\begin_inset Newline newline
\end_inset

( 00201D4C ) LOOP, L00201D36 RB, 
\begin_inset Newline newline
\end_inset

( 00201D4E ) POP|X, SI| 
\begin_inset Newline newline
\end_inset

( 00201D4F ) RET, 
\begin_inset Newline newline
\end_inset

( 00201D50 ) :L00201D50 MOVI|B, AL| 8 IB, 
\begin_inset Newline newline
\end_inset

( 00201D52 ) MOVI|B, CL| 1 IB, 
\begin_inset Newline newline
\end_inset

( 00201D54 ) CALL, L00201D2B RL, 
\begin_inset Newline newline
\end_inset

( 00201D59 ) CALL, L00201D1C RL, 
\begin_inset Newline newline
\end_inset

( 00201D5E ) IN|D, B'| 
\begin_inset Newline newline
\end_inset

( 00201D5F ) OUT|P, B'| 0E1 P, 
\begin_inset Newline newline
\end_inset

( 00201D61 ) CMPI|A, B'| 80 IB, 
\begin_inset Newline newline
\end_inset

( 00201D63 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201D64 ) :L00201D64 OUT|P, B'| 0B P, 
\begin_inset Newline newline
\end_inset

( 00201D66 ) :L00201D66 CALL, L00201D50 RL, 
\begin_inset Newline newline
\end_inset

( 00201D6B ) J, Z| N| L00201D66 RB, 
\begin_inset Newline newline
\end_inset

( 00201D6D ) MOVI|B, AL| 0F IB, 
\begin_inset Newline newline
\end_inset

( 00201D6F ) MOVI|B, CL| 3 IB, 
\begin_inset Newline newline
\end_inset

( 00201D71 ) :L00201D71 CALL, L00201D2B RL, 
\begin_inset Newline newline
\end_inset

( 00201D76 ) :L00201D76 CALL, L00201D50 RL, 
\begin_inset Newline newline
\end_inset

( 00201D7B ) J, Z| Y| L00201D76 RB, 
\begin_inset Newline newline
\end_inset

( 00201D7D ) RET, 
\begin_inset Newline newline
\end_inset

( 00201D7E ) :L00201D7E MOVI, X| MEM| L00202740 L, 00094C00 IL, 
\begin_inset Newline newline
\end_inset

( 00201D88 ) MOVI|B, AL| 0C IB, 
\begin_inset Newline newline
\end_inset

( 00201D8A ) :L00201D8A OS:, 
\begin_inset Newline newline
\end_inset

( 00201D8B ) MOVI|X, DX| 03F2 IW, 
\begin_inset Newline newline
\end_inset

( 00201D8E ) MOVI|B, AH| 0F IB, 
\begin_inset Newline newline
\end_inset

( 00201D90 ) OUT|D, B'| 
\begin_inset Newline newline
\end_inset

( 00201D91 ) :L00201D91 OUT|P, B'| 0E1 P, 
\begin_inset Newline newline
\end_inset

( 00201D93 ) DEC, B| R| AH| 
\begin_inset Newline newline
\end_inset

( 00201D95 ) J, Z| N| L00201D91 RB, 
\begin_inset Newline newline
\end_inset

( 00201D97 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201D98 ) :L00201D98 MOVI|B, AL| 1C IB, 
\begin_inset Newline newline
\end_inset

( 00201D9A ) CALL, L00201D8A RL, 
\begin_inset Newline newline
\end_inset

( 00201D9F ) MOVI|X, CX| 047868C0 IL, 
\begin_inset Newline newline
\end_inset

( 00201DA4 ) :L00201DA4 LOOP, L00201DA4 RB, 
\begin_inset Newline newline
\end_inset

( 00201DA6 ) MOVI|B, AL| 7 IB, 
\begin_inset Newline newline
\end_inset

( 00201DA8 ) MOVI|B, CL| 2 IB, 
\begin_inset Newline newline
\end_inset

( 00201DAA ) JMPS, L00201D71 RB, 
\begin_inset Newline newline
\end_inset

( 00201DAC ) :L00201DAC OUT|P, B'| 5 P, 
\begin_inset Newline newline
\end_inset

( 00201DAE ) MOV, B| T| AL'| R| AH| 
\begin_inset Newline newline
\end_inset

( 00201DB0 ) OUT|P, B'| 5 P, 
\begin_inset Newline newline
\end_inset

( 00201DB2 ) MOVI|X, AX| 00094C00 IL, 
\begin_inset Newline newline
\end_inset

( 00201DB7 ) OUT|P, B'| 4 P, 
\begin_inset Newline newline
\end_inset

( 00201DB9 ) MOV, B| T| AL'| R| AH| 
\begin_inset Newline newline
\end_inset

( 00201DBB ) OUT|P, B'| 4 P, 
\begin_inset Newline newline
\end_inset

( 00201DBD ) SHRI, X| R| AX| 10 IS, 
\begin_inset Newline newline
\end_inset

( 00201DC0 ) OUT|P, B'| 81 P, 
\begin_inset Newline newline
\end_inset

( 00201DC2 ) MOVI|B, AL| 0B IB, 
\begin_inset Newline newline
\end_inset

( 00201DC4 ) OUT|P, B'| 0F P, 
\begin_inset Newline newline
\end_inset

( 00201DC6 ) OS:, 
\begin_inset Newline newline
\end_inset

( 00201DC7 ) MOVI, X| MEM| L00201D13 L, 02A1 IW, 
\begin_inset Newline newline
\end_inset

( 00201DCF ) MOVI|B, AL| 3 IB, 
\begin_inset Newline newline
\end_inset

( 00201DD1 ) MOVI|B, CL| 3 IB, 
\begin_inset Newline newline
\end_inset

( 00201DD3 ) CALL, L00201D2B RL, 
\begin_inset Newline newline
\end_inset

( 00201DD8 ) OS:, 
\begin_inset Newline newline
\end_inset

( 00201DD9 ) MOVI, X| MEM| L00201D13 L, 0 IW, 
\begin_inset Newline newline
\end_inset

( 00201DE1 ) MOVI, B| MEM| L00201D10 L, 0 IB, 
\begin_inset Newline newline
\end_inset

( 00201DE8 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201DE9 ) :L00201DE9 MOVI|B, CL| 9 IB, 
\begin_inset Newline newline
\end_inset

( 00201DEB ) CALL, L00201D2B RL, 
\begin_inset Newline newline
\end_inset

( 00201DF0 ) INC, B| MEM| L00201D14 L, 
\begin_inset Newline newline
\end_inset

( 00201DF6 ) :L00201DF6 CALL, L00201D1C RL, 
\begin_inset Newline newline
\end_inset

( 00201DFB ) J, S| N| L00201DF6 RB, 
\begin_inset Newline newline
\end_inset

( 00201DFD ) RET, 
\begin_inset Newline newline
\end_inset

( 00201DFE ) :L00201DFE MOVI|B, AL| 16 IB, 
\begin_inset Newline newline
\end_inset

( 00201E00 ) CALL, L00201D64 RL, 
\begin_inset Newline newline
\end_inset

( 00201E05 ) MOVI|B, AL| 0E6 IB, 
\begin_inset Newline newline
\end_inset

( 00201E07 ) CALL, L00201DE9 RL, 
\begin_inset Newline newline
\end_inset

( 00201E0C ) PUSH|X, SI| 
\begin_inset Newline newline
\end_inset

( 00201E0D ) MOVI|X, SI| 00094C00 IL, 
\begin_inset Newline newline
\end_inset

( 00201E12 ) MOVI|X, CX| 1200 IL, 
\begin_inset Newline newline
\end_inset

( 00201E17 ) REPZ, 
\begin_inset Newline newline
\end_inset

( 00201E18 ) MOVS, X'| 
\begin_inset Newline newline
\end_inset

( 00201E19 ) POP|X, SI| 
\begin_inset Newline newline
\end_inset

( 00201E1A ) RET, 
\begin_inset Newline newline
\end_inset

( 00201E1B ) :L00201E1B MOVI|X, DI| 00094C00 IL, 
\begin_inset Newline newline
\end_inset

( 00201E20 ) MOVI|X, CX| 1200 IL, 
\begin_inset Newline newline
\end_inset

( 00201E25 ) REPZ, 
\begin_inset Newline newline
\end_inset

( 00201E26 ) MOVS, X'| 
\begin_inset Newline newline
\end_inset

( 00201E27 ) MOVI|B, AL| 1A IB, 
\begin_inset Newline newline
\end_inset

( 00201E29 ) CALL, L00201D64 RL, 
\begin_inset Newline newline
\end_inset

( 00201E2E ) MOVI|B, AL| 0C5 IB, 
\begin_inset Newline newline
\end_inset

( 00201E30 ) JMPS, L00201DE9 RB, 
\begin_inset Newline newline
\end_inset

( 00201E32 ) :L00201E32 MOV|FA, B'| L00201D14 L, 
\begin_inset Newline newline
\end_inset

( 00201E37 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201E3A ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201E3C ) OS:, 
\begin_inset Newline newline
\end_inset

( 00201E3D ) MOVI|X, DX| 03F2 IW, 
\begin_inset Newline newline
\end_inset

( 00201E40 ) IN|D, B'| 
\begin_inset Newline newline
\end_inset

( 00201E41 ) OUT|P, B'| 0E1 P, 
\begin_inset Newline newline
\end_inset

( 00201E43 ) TESTI|A, B'| 10 IB, 
\begin_inset Newline newline
\end_inset

( 00201E45 ) J, Z| N| L00201E4C RB, 
\begin_inset Newline newline
\end_inset

( 00201E47 ) JMP, L00201D98 RL, 
\begin_inset Newline newline
\end_inset

( 00201E4C ) :L00201E4C RET, 
\begin_inset Newline newline
\end_inset

( 00201E4D ) :L00201E4D XOR, X| T| CX'| R| CX| 
\begin_inset Newline newline
\end_inset

( 00201E4F ) TESTI, B| MEM| L00201D10 L, 0FF IB, 
\begin_inset Newline newline
\end_inset

( 00201E56 ) J, Z| Y| L00201E68 RB, 
\begin_inset Newline newline
\end_inset

( 00201E58 ) LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201E5B ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201E5D ) MOVI|X, AX| 47FF IL, 
\begin_inset Newline newline
\end_inset

( 00201E62 ) CALL, L00201DAC RL, 
\begin_inset Newline newline
\end_inset

( 00201E67 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201E68 ) :L00201E68 RET, 
\begin_inset Newline newline
\end_inset

( 00201E69 ) :X_read CALL, L00201E4D RL, 
\begin_inset Newline newline
\end_inset

( 00201E6E ) CALL, L00201E32 RL, 
\begin_inset Newline newline
\end_inset

( 00201E73 ) PUSH|X, DI| 
\begin_inset Newline newline
\end_inset

( 00201E74 ) MOV, X| T| DI'| BO| [SI] 4 B, 
\begin_inset Newline newline
\end_inset

( 00201E77 ) SHLI, X| R| DI| 2 IS, 
\begin_inset Newline newline
\end_inset

( 00201E7A ) CALL, L00201DFE RL, 
\begin_inset Newline newline
\end_inset

( 00201E7F ) POP|X, DI| 
\begin_inset Newline newline
\end_inset

( 00201E80 ) :X_read1 LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201E81 ) INC|X, AX| 
\begin_inset Newline newline
\end_inset

( 00201E82 ) ADDI, X| ZO| [SI] 1200 IL, 
\begin_inset Newline newline
\end_inset

( 00201E88 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201E89 ) :X_write CALL, L00201E4D RL, 
\begin_inset Newline newline
\end_inset

( 00201E8E ) CALL, L00201E32 RL, 
\begin_inset Newline newline
\end_inset

( 00201E93 ) PUSH|X, SI| 
\begin_inset Newline newline
\end_inset

( 00201E94 ) MOV, X| T| SI'| BO| [SI] 4 B, 
\begin_inset Newline newline
\end_inset

( 00201E97 ) SHLI, X| R| SI| 2 IS, 
\begin_inset Newline newline
\end_inset

( 00201E9A ) CALL, L00201E1B RL, 
\begin_inset Newline newline
\end_inset

( 00201E9F ) POP|X, SI| 
\begin_inset Newline newline
\end_inset

( 00201EA0 ) JMPS, X_read1 RB, 
\begin_inset Newline newline
\end_inset

( 00201EA2 ) :X_stop LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201EA5 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201EA7 ) CALL, L00201D7E RL, 
\begin_inset Newline newline
\end_inset

( 00201EAC ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201EAD ) RET, 
\begin_inset Newline newline
\end_inset

( 00201EAE ) :L00201EAE MOVI|B, AL| 1A IB, 
\begin_inset Newline newline
\end_inset

( 00201EB0 ) CALL, L00201D64 RL, 
\begin_inset Newline newline
\end_inset

( 00201EB5 ) MOV, X| T| DX'| R| SI| 
\begin_inset Newline newline
\end_inset

( 00201EB7 ) MOVI|B, CL| 6 IB, 
\begin_inset Newline newline
\end_inset

( 00201EB9 ) CALL, L00201D33 RL, 
\begin_inset Newline newline
\end_inset

( 00201EBE ) :L00201EBE CALL, L00201D1C RL, 
\begin_inset Newline newline
\end_inset

( 00201EC3 ) J, S| N| L00201EBE RB, 
\begin_inset Newline newline
\end_inset

( 00201EC5 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201EC6 ) :X_format PUSH|X, AX| 
\begin_inset Newline newline
\end_inset

( 00201EC7 ) MOVI|X, AX| 47 IL, 
\begin_inset Newline newline
\end_inset

( 00201ECC ) XOR, X| T| CX'| R| CX| 
\begin_inset Newline newline
\end_inset

( 00201ECE ) CALL, L00201DAC RL, 
\begin_inset Newline newline
\end_inset

( 00201ED3 ) POP|X, AX| 
\begin_inset Newline newline
\end_inset

( 00201ED4 ) CALL, L00201E32 RL, 
\begin_inset Newline newline
\end_inset

( 00201ED9 ) PUSH|X, SI| 
\begin_inset Newline newline
\end_inset

( 00201EDA ) MOV, X| T| SI'| BO| [SI] 4 B, 
\begin_inset Newline newline
\end_inset

( 00201EDD ) SHLI, X| R| SI| 2 IS, 
\begin_inset Newline newline
\end_inset

( 00201EE0 ) CALL, L00201EAE RL, 
\begin_inset Newline newline
\end_inset

( 00201EE5 ) POP|X, SI| 
\begin_inset Newline newline
\end_inset

( 00201EE6 ) MOVI|X, AX| 47FF IL, 
\begin_inset Newline newline
\end_inset

( 00201EEB ) CALL, L00201DAC RL, 
\begin_inset Newline newline
\end_inset

( 00201EF0 ) LODS, X'| 
\begin_inset Newline newline
\end_inset

( 00201EF1 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201EF2 ) :X_warm LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201EF5 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201EF7 ) :Start CALL, InitDisplay RL, 
\begin_inset Newline newline
\end_inset

( 00201EFC ) CALL, L002004AA RL, 
\begin_inset Newline newline
\end_inset

( 00201F01 ) CALL, L002004DB RL, 
\begin_inset Newline newline
\end_inset

( 00201F06 ) CALL, X_stop RL, 
\begin_inset Newline newline
\end_inset

( 00201F0B ) MOVI, B| MEM| L00201D10 L, 1 IB, 
\begin_inset Newline newline
\end_inset


\backslash
 95 high-level Forth words embedded in kernel 
\begin_inset Newline newline
\end_inset

( 00201F12 ) MOVI, X| MEM| ForthWords L, 5E IL, 
\begin_inset Newline newline
\end_inset


\backslash
 6 high-level Forth macros 
\begin_inset Newline newline
\end_inset

( 00201F1C ) MOVI, X| MEM| ForthMacros L, 6 IL, 
\begin_inset Newline newline
\end_inset

( 00201F26 ) MOVI, X| MEM| L00202740 L, 00094C00 IL, 
\begin_inset Newline newline
\end_inset

( 00201F30 ) PUSH|X, SI| 
\begin_inset Newline newline
\end_inset


\backslash
 point to Shannon-encoded high-level Forth words 
\begin_inset Newline newline
\end_inset

( 00201F31 ) LEA, SI'| MEM| EncodedWords L, 
\begin_inset Newline newline
\end_inset

( 00201F37 ) MOVI|X, DI| 00368000 IL, 
\backslash
 move to higher memory
\begin_inset Newline newline
\end_inset

( 00201F3C ) MOV, X| T| CX'| MEM| ForthWords L, 
\begin_inset Newline newline
\end_inset

( 00201F42 ) REPZ, 
\begin_inset Newline newline
\end_inset

( 00201F43 ) MOVS, X'| 
\begin_inset Newline newline
\end_inset


\backslash
 point to list of code pointers for high-level Forth words 
\begin_inset Newline newline
\end_inset

( 00201F44 ) LEA, SI'| MEM| CodePointers L, 
\begin_inset Newline newline
\end_inset

( 00201F4A ) MOVI|X, DI| 0036A800 IL, 
\backslash
 move to high memory
\begin_inset Newline newline
\end_inset

( 00201F4F ) MOV, X| T| CX'| MEM| ForthWords L, 
\begin_inset Newline newline
\end_inset

( 00201F55 ) REPZ, 
\begin_inset Newline newline
\end_inset

( 00201F56 ) MOVS, X'| 
\begin_inset Newline newline
\end_inset

( 00201F57 ) POP|X, SI| 
\begin_inset Newline newline
\end_inset

( 00201F58 ) MOVI, X| MEM| L002027A0 L, 0036D000 IL, 
\begin_inset Newline newline
\end_inset

( 00201F62 ) MOVI, X| MEM| L00202758 L, X_nul IL, 
\begin_inset Newline newline
\end_inset

( 00201F6C ) MOVI, X| MEM| L00202750 L, 0 IL, 
\begin_inset Newline newline
\end_inset

( 00201F76 ) MOVI, X| MEM| L00202744 L, 0800 IL, 
\begin_inset Newline newline
\end_inset

( 00201F80 ) MOVI|X, AX| 12 IL, 
\begin_inset Newline newline
\end_inset


\backslash
 load block 18, the startup block of high-level code 
\begin_inset Newline newline
\end_inset

( 00201F85 ) CALL, X_load RL, 
\begin_inset Newline newline
\end_inset

( 00201F8A ) JMP, X_accept RL, 
\begin_inset Newline newline
\end_inset

( 00201F8F ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00201F9F ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00201FAF ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00201FBC ) :X_nc/tsim LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201FBF ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201FC1 ) MOVI|X, AX| 000809D2 IL, 
\begin_inset Newline newline
\end_inset

( 00201FC6 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201FC7 ) :X_xy LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201FCA ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201FCC ) MOVI|X, AX| 00080A04 IL, 
\begin_inset Newline newline
\end_inset

( 00201FD1 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201FD2 ) :X_fov LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201FD5 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201FD7 ) MOVI|X, AX| 00080A08 IL, 
\begin_inset Newline newline
\end_inset

( 00201FDC ) RET, 
\begin_inset Newline newline
\end_inset

( 00201FDD ) :X_sp LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201FE0 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201FE2 ) MOVI|X, AX| 000809EF IL, 
\begin_inset Newline newline
\end_inset

( 00201FE7 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201FE8 ) :X_last LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201FEB ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201FED ) MOVI|X, AX| 000809E9 IL, 
\begin_inset Newline newline
\end_inset

( 00201FF2 ) RET, 
\begin_inset Newline newline
\end_inset

( 00201FF3 ) :X_blk LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00201FF6 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00201FF8 ) MOVI|X, AX| 000809CA IL, 
\begin_inset Newline newline
\end_inset

( 00201FFD ) RET, 
\begin_inset Newline newline
\end_inset

( 00201FFE ) :X_curs LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00202001 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00202003 ) MOVI|X, AX| 000809CC IL, 
\begin_inset Newline newline
\end_inset

( 00202008 ) RET, 
\begin_inset Newline newline
\end_inset

( 00202009 ) :X_ekt LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020200C ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 0020200E ) MOVI|X, AX| 00080620 IL, 
\begin_inset Newline newline
\end_inset

( 00202013 ) RET, 
\begin_inset Newline newline
\end_inset

( 00202014 ) :X_cpoint LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00202017 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00202019 ) MOVI|X, AX| 000809D6 IL, 
\begin_inset Newline newline
\end_inset

( 0020201E ) RET, 
\begin_inset Newline newline
\end_inset

( 0020201F ) :X_words LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00202022 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00202024 ) MOVI|X, AX| 000809E1 IL, 
\begin_inset Newline newline
\end_inset

( 00202029 ) RET, 
\begin_inset Newline newline
\end_inset

( 0020202A ) :X_digin LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020202D ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 0020202F ) MOVI|X, AX| 000809E3 IL, 
\begin_inset Newline newline
\end_inset

( 00202034 ) RET, 
\begin_inset Newline newline
\end_inset

( 00202035 ) :X_actc LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00202038 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 0020203A ) MOVI|X, AX| 00080556 IL, 
\begin_inset Newline newline
\end_inset

( 0020203F ) RET, 
\begin_inset Newline newline
\end_inset

( 00202040 ) :X_h LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00202043 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00202045 ) MOVI|X, AX| 000809E8 IL, 
\begin_inset Newline newline
\end_inset

( 0020204A ) RET, 
\begin_inset Newline newline
\end_inset

( 0020204B ) :X_offset LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020204E ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00202050 ) MOVI|X, AX| 000809D1 IL, 
\begin_inset Newline newline
\end_inset

( 00202055 ) RET, 
\begin_inset Newline newline
\end_inset

( 00202056 ) :X_aper LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00202059 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 0020205B ) MOVI|X, AX| 00080A0A IL, 
\begin_inset Newline newline
\end_inset

( 00202060 ) RET, 
\begin_inset Newline newline
\end_inset

( 00202061 ) :X_vesa LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00202064 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00202066 ) MOVI|X, AX| 00080063 IL, 
\begin_inset Newline newline
\end_inset

( 0020206B ) RET, 
\begin_inset Newline newline
\end_inset

( 0020206C ) :X_trash LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020206F ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00202071 ) MOVI|X, AX| 000809D0 IL, 
\begin_inset Newline newline
\end_inset

( 00202076 ) RET, 
\begin_inset Newline newline
\end_inset

( 00202077 ) :X_buffe LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020207A ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 0020207C ) MOVI|X, AX| 00025300 IL, 
\begin_inset Newline newline
\end_inset

( 00202081 ) RET, 
\begin_inset Newline newline
\end_inset

( 00202082 ) :X_cad LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00202085 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00202087 ) MOVI|X, AX| 000809CD IL, 
\begin_inset Newline newline
\end_inset

( 0020208C ) RET, 
\begin_inset Newline newline
\end_inset

( 0020208D ) :X_pcad LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 00202090 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 00202092 ) MOVI|X, AX| 000809CE IL, 
\begin_inset Newline newline
\end_inset

( 00202097 ) RET, 
\begin_inset Newline newline
\end_inset

( 00202098 ) :X_hsvv LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 0020209B ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 0020209D ) MOVI|X, AX| 000807E4 IL, 
\begin_inset Newline newline
\end_inset

( 002020A2 ) RET, 
\begin_inset Newline newline
\end_inset

( 002020A3 ) :X_displ LEA, SI'| BO| [SI] 0FC B, 
\begin_inset Newline newline
\end_inset

( 002020A6 ) MOV, X| F| AX'| ZO| [SI] 
\begin_inset Newline newline
\end_inset

( 002020A8 ) MOVI|X, AX| 00080526 IL, 
\begin_inset Newline newline
\end_inset

( 002020AD ) RET, 
\begin_inset Newline newline
\end_inset

( 002020AE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002020BE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002020CE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002020DE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002020EE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002020FE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020210E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020211E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020212E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020213E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020214E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020215E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020216E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020217E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020218E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020219E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002021AE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002021BE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002021CE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002021DE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002021EE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002021FE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020220E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020221E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020222E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020223E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020224E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020225E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020226E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020227E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020228E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020229E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002022AE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002022BE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002022CE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002022DE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002022EE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002022FE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020230E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020231E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020232E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020233E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020234E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020235E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020236E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020237E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020238E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020239E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002023AE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002023BE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002023CE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002023DE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002023EE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002023FE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020240E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020241E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020242E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020243E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020244E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020245E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020246E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020247E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020248E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020249E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002024AE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002024BE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002024CE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002024DE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002024EE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002024FE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020250E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020251E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020252E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020253E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020254E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020255E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020256E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020257E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020258E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020259E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002025AE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002025BE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002025CE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002025DE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002025EE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002025FE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020260E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020261E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020262E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020263E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020264E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020265E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020266E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020267E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020268E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 0020269E ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002026AE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002026BE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002026CE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002026DE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002026EE ) db 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 002026FE ) db 0 0 
\begin_inset Newline newline
\end_inset

( 00202700 ) :L00202700 names re rc r! rom 
\begin_inset Newline newline
\end_inset

( 00202710 ) names rs2 rkte rort0 ri3v 
\begin_inset Newline newline
\end_inset

( 00202720 ) names owoacs 
\begin_inset Newline newline
\end_inset

( 00202724 ) :L00202724 dl X_.
 
\begin_inset Newline newline
\end_inset

( 00202728 ) :L00202728 dl 12 
\begin_inset Newline newline
\end_inset

( 0020272C ) :L0020272C dl 0288 
\begin_inset Newline newline
\end_inset

( 00202730 ) :L00202730 dl 0 
\begin_inset Newline newline
\end_inset

( 00202734 ) :L00202734 dl 0 
\begin_inset Newline newline
\end_inset

( 00202738 ) :L00202738 dl 0 
\begin_inset Newline newline
\end_inset

( 0020273C ) :L0020273C dl 0 
\begin_inset Newline newline
\end_inset

( 00202740 ) :L00202740 dl 00094C00 
\begin_inset Newline newline
\end_inset

( 00202744 ) :L00202744 dl 0 50 
\begin_inset Newline newline
\end_inset

( 0020274C ) :L0020274C dl X_accept 
\begin_inset Newline newline
\end_inset

( 00202750 ) :L00202750 dl 0 
\begin_inset Newline newline
\end_inset

( 00202754 ) :L00202754 dl L00201BB0 
\begin_inset Newline newline
\end_inset

( 00202758 ) :L00202758 dl 0 
\begin_inset Newline newline
\end_inset

( 0020275C ) :L0020275C dl 033D 
\begin_inset Newline newline
\end_inset

( 00202760 ) :L00202760 dl 028B 
\begin_inset Newline newline
\end_inset

( 00202764 ) :L00202764 dl L00200E03 
\begin_inset Newline newline
\end_inset

( 00202768 ) :L00202768 dl L00200FBD 
\begin_inset Newline newline
\end_inset

( 0020276C ) :L0020276C dl 0A 
\begin_inset Newline newline
\end_inset

( 00202770 ) :L00202770 dl L0020116D 
\begin_inset Newline newline
\end_inset

( 00202774 ) :L00202774 dl 00FFFF00 
\begin_inset Newline newline
\end_inset

( 00202778 ) :L00202778 dl 1 
\begin_inset Newline newline
\end_inset

( 0020277C ) :L0020277C dl L002006C1 
\begin_inset Newline newline
\end_inset

( 00202780 ) :L00202780 dl X_nul 
\begin_inset Newline newline
\end_inset

( 00202784 ) :L00202784 dl 1 
\begin_inset Newline newline
\end_inset

( 00202788 ) :L00202788 dl 0 
\begin_inset Newline newline
\end_inset

( 0020278C ) :L0020278C dl 0 
\begin_inset Newline newline
\end_inset

( 00202790 ) :L00202790 dl L002005AE 
\begin_inset Newline newline
\end_inset

( 00202794 ) :L00202794 dl 6 
\begin_inset Newline newline
\end_inset

( 00202798 ) :L00202798 dl 5E 
\begin_inset Newline newline
\end_inset

( 0020279C ) :L0020279C dl 00100000 
\begin_inset Newline newline
\end_inset

( 002027A0 ) :L002027A0 dl 00100000 
\begin_inset Newline newline
\end_inset

( 002027A4 ) :L002027A4 dl 0 
\begin_inset Newline newline
\end_inset

( 002027A8 ) :L002027A8 dl 0 
\begin_inset Newline newline
\end_inset

( 002027AC ) :L002027AC dl 0 
\begin_inset Newline newline
\end_inset

( 002027B0 ) :L002027B0 dl 0 
\begin_inset Newline newline
\end_inset

( 002027B4 ) :ForthWords dl 5E 
\begin_inset Newline newline
\end_inset

( 002027B8 ) :ForthMacros dl 6 
\begin_inset Newline newline
\end_inset

( 002027BC ) :L002027BC dl L00200861 L002006CE 
\begin_inset Newline newline
\end_inset

( 002027C4 ) dl L00200782 
\begin_inset Newline newline
\end_inset

( 002027C8 ) :L002027C8 dl L002005E0 
\begin_inset Newline newline
\end_inset

( 002027CC ) :L002027CC dl L002006FA 
\begin_inset Newline newline
\end_inset

( 002027D0 ) :L002027D0 dl L0020069A 
\begin_inset Newline newline
\end_inset

( 002027D4 ) :L002027D4 dl L002006AA L0020074A L00200768 X_nul 
\begin_inset Newline newline
\end_inset

( 002027E4 ) dl X_nul X_nul L0020064B X_nul 
\begin_inset Newline newline
\end_inset

( 002027F4 ) dl X_nul X_nul 
\begin_inset Newline newline
\end_inset

( 002027FC ) :L002027FC dl L0020043E 
\begin_inset Newline newline
\end_inset

( 00202800 ) :L00202800 dl X_nul 
\begin_inset Newline newline
\end_inset

( 00202804 ) :L00202804 dl X_nul 
\begin_inset Newline newline
\end_inset

( 00202808 ) :L00202808 dl X_graph 
\begin_inset Newline newline
\end_inset

( 0020280C ) :L0020280C dl L00200988 
\begin_inset Newline newline
\end_inset

( 00202810 ) :L00202810 dl 00030003 
\begin_inset Newline newline
\end_inset

( 00202814 ) :L00202814 dl 3 
\begin_inset Newline newline
\end_inset

( 00202818 ) :L00202818 dl 03F4 
\begin_inset Newline newline
\end_inset

( 0020281C ) :L0020281C dl 0 4B00 
\begin_inset Newline newline
\end_inset

( 00202824 ) :L00202824 dl 01F00000 
\begin_inset Newline newline
\end_inset

( 00202828 ) :L00202828 dl 01F00000 
\begin_inset Newline newline
\end_inset

( 0020282C ) :L0020282C dl 0 
\begin_inset Newline newline
\end_inset

( 00202830 ) :L00202830 dl F7DE 
\begin_inset Newline newline
\end_inset

( 00202834 ) :L00202834 dl 0 
\begin_inset Newline newline
\end_inset

( 00202838 ) :L00202838 dl 0 
\begin_inset Newline newline
\end_inset

( 0020283C ) :L0020283C names ; dup ?dup drop 
\begin_inset Newline newline
\end_inset

( 0020284C ) names then begin _ _ 
\begin_inset Newline newline
\end_inset

( 0020285C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 0020286C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 0020287C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 0020288C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 0020289C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 002028AC ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 002028BC ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 002028CC ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 002028DC ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 002028EC ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 002028FC ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 0020290C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 0020291C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 0020292C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 0020293C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 0020294C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 0020295C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 0020296C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 0020297C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 0020298C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 0020299C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 002029AC ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 002029BC ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 002029CC ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 002029DC ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 002029EC ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 002029FC ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 00202A0C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 00202A1C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 00202A2C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 00202A3C ) names _ _ _ _ 
\begin_inset Newline newline
\end_inset

( 00202A4C ) names _ _ 
\begin_inset Newline newline
\end_inset

( 00202A54 ) :L00202A54 dl X_; X_dup X_?dup X_drop 
\begin_inset Newline newline
\end_inset

( 00202A64 ) dl X_then X_begin 0 0 
\begin_inset Newline newline
\end_inset

( 00202A74 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202A84 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202A94 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202AA4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202AB4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202AC4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202AD4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202AE4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202AF4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202B04 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202B14 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202B24 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202B34 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202B44 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202B54 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202B64 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202B74 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202B84 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202B94 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202BA4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202BB4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202BC4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202BD4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202BE4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202BF4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202C04 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202C14 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202C24 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202C34 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202C44 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202C54 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202C64 ) dl 0 0 
\begin_inset Newline newline
\end_inset

( 00202C6C ) :EncodedWords names boot warm pause macro 
\begin_inset Newline newline
\end_inset

( 00202C7C ) names forth c stop read 
\begin_inset Newline newline
\end_inset

( 00202C8C ) names write nc format show 
\begin_inset Newline newline
\end_inset

( 00202C9C ) names serve load here ?lit 
\begin_inset Newline newline
\end_inset

( 00202CAC ) names 3, 2, 1, , 
\begin_inset Newline newline
\end_inset

( 00202CBC ) names less jump pci devic 
\begin_inset Newline newline
\end_inset

( 00202CCC ) names accept pad erase copy 
\begin_inset Newline newline
\end_inset

( 00202CDC ) names mark empt emit digit 
\begin_inset Newline newline
\end_inset

( 00202CEC ) names 2emit .
 h.
 h.n 
\begin_inset Newline newline
\end_inset

( 00202CFC ) names cr space down edit 
\begin_inset Newline newline
\end_inset

( 00202D0C ) names e lm rm graph 
\begin_inset Newline newline
\end_inset

( 00202D1C ) names switch freeze text top 
\begin_inset Newline newline
\end_inset

( 00202D2C ) names keybo debu at +at 
\begin_inset Newline newline
\end_inset

( 00202D3C ) names xy fov fifo box 
\begin_inset Newline newline
\end_inset

( 00202D4C ) names line color octant sp 
\begin_inset Newline newline
\end_inset

( 00202D5C ) names last unpac blk curs 
\begin_inset Newline newline
\end_inset

( 00202D6C ) names word ekt abort h 
\begin_inset Newline newline
\end_inset

( 00202D7C ) names buffe offset tic winver 
\begin_inset Newline newline
\end_inset

( 00202D8C ) names aper vesa trash hsvv 
\begin_inset Newline newline
\end_inset

( 00202D9C ) names tsim cpoint words qkey 
\begin_inset Newline newline
\end_inset

( 00202DAC ) names digin qwert no-ret r? 
\begin_inset Newline newline
\end_inset

( 00202DBC ) names nul cad pcad displ 
\begin_inset Newline newline
\end_inset

( 00202DCC ) names actc +list itick lis 
\begin_inset Newline newline
\end_inset

( 00202DDC ) names +e _ 
\begin_inset Newline newline
\end_inset

( 00202DE4 ) :CodePointers dl X_boot X_warm X_pause X_macro 
\begin_inset Newline newline
\end_inset

( 00202DF4 ) dl X_forth X_c X_stop X_read 
\begin_inset Newline newline
\end_inset

( 00202E04 ) dl X_write X_nc/tsim X_format X_show 
\begin_inset Newline newline
\end_inset

( 00202E14 ) dl X_serve X_load X_here X_?lit 
\begin_inset Newline newline
\end_inset

( 00202E24 ) dl X_3, X_2, X_1, X_, 
\begin_inset Newline newline
\end_inset

( 00202E34 ) dl X_less X_jump X_pci X_devic 
\begin_inset Newline newline
\end_inset

( 00202E44 ) dl X_accept X_pad X_erase X_copy 
\begin_inset Newline newline
\end_inset

( 00202E54 ) dl X_mark X_empt X_emit X_digit 
\begin_inset Newline newline
\end_inset

( 00202E64 ) dl X_2emit X_.
 X_h.
 X_h.n 
\begin_inset Newline newline
\end_inset

( 00202E74 ) dl X_cr X_space X_down X_edit 
\begin_inset Newline newline
\end_inset

( 00202E84 ) dl X_e X_lm X_rm X_graph 
\begin_inset Newline newline
\end_inset

( 00202E94 ) dl X_switch X_freeze X_text X_top 
\begin_inset Newline newline
\end_inset

( 00202EA4 ) dl X_keybo X_debu X_at X_+at 
\begin_inset Newline newline
\end_inset

( 00202EB4 ) dl X_xy X_fov X_fifo X_box 
\begin_inset Newline newline
\end_inset

( 00202EC4 ) dl X_line X_color X_octant X_sp 
\begin_inset Newline newline
\end_inset

( 00202ED4 ) dl X_last X_unpac X_blk X_curs 
\begin_inset Newline newline
\end_inset

( 00202EE4 ) dl X_word X_ekt X_abort X_h 
\begin_inset Newline newline
\end_inset

( 00202EF4 ) dl X_buffe X_offset X_tic X_winver 
\begin_inset Newline newline
\end_inset

( 00202F04 ) dl X_aper X_vesa X_trash X_hsvv 
\begin_inset Newline newline
\end_inset

( 00202F14 ) dl X_nc/tsim X_cpoint X_words X_qkey 
\begin_inset Newline newline
\end_inset

( 00202F24 ) dl X_digin X_qwert X_no-ret X_r? 
\begin_inset Newline newline
\end_inset

( 00202F34 ) dl X_nul X_cad X_pcad X_displ 
\begin_inset Newline newline
\end_inset

( 00202F44 ) dl X_actc X_+list X_itick X_lis 
\begin_inset Newline newline
\end_inset

( 00202F54 ) dl X_+e 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202F64 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202F74 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202F84 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202F94 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202FA4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202FB4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202FC4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202FD4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202FE4 ) dl 0 0 0 0 
\begin_inset Newline newline
\end_inset

( 00202FF4 ) dl 0 0 0 
\begin_inset Newline newline
\end_inset

( 00203000 ) :IconImages icons{ 
\begin_inset Newline newline
\end_inset

0 0000000000000000 0 0000000000000000 0 0000001111000000 0 0000000000000000
 
\begin_inset Newline newline
\end_inset

0 0000000000000000 1 0000000000000000 2 0000001111000000 3 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000001111000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000001111000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0011111111111100 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0011111111111100 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 1110001111111000 ∙ 0011111111111100 ∙ 0001111111111000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 1111011111111110 ∙ 0000001111000000 ∙ 0111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 1111111111111111 ∙ 0000001111000000 ∙ 0111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 1111110000000111 ∙ 0000001111000000 ∙ 1111100000011111
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 1111100000000001 ∙ 0000001111000000 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 1111000000000000 ∙ 0000001111000000 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 1111000000000000 ∙ 0000001111000000 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 1111000000000000 ∙ 0000001111000000 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 1111000000000000 ∙ 0000001111000000 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 1111000000000000 ∙ 0000001111000000 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 1111000000000000 ∙ 0000001111000000 ∙ 1111100000011111
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 1111000000000000 ∙ 0000001111000000 ∙ 0111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 1111000000000000 ∙ 0000001111000000 ∙ 0111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 1111000000000000 ∙ 0000001111000000 ∙ 0001111111111000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

0 0000000000000000 0 0000000000000000 0 0000000000000000 0 0000001111000000
 
\begin_inset Newline newline
\end_inset

4 0000000000000000 5 0000000000000000 6 0000000000000000 7 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111111111000 ∙ 0001111111111000 ∙ 1110001111111000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0111111111111110 ∙ 1111011111111110 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0111111111111110 ∙ 1111111111111110 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000000011111 ∙ 1111110000011111 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000000001111 ∙ 1111100000001111 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000011111 ∙ 0000000000001111 ∙ 1111000000001111 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 1111111111111110 ∙ 0011111111111111 ∙ 1111000000001111 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 1111111111111100 ∙ 0111111111111111 ∙ 1111000000001111 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000000000 ∙ 1111100000001111 ∙ 1111000000001111 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000000000 ∙ 1111000000001111 ∙ 1111000000001111 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 1111100000000000 ∙ 1111000000011111 ∙ 1111000000001111 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0111111111111111 ∙ 1111000000001111 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0111111111111111 ∙ 1111000000001111 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111111111000 ∙ 0001111111110111 ∙ 1111000000001111 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

0 0000000000000000 0 0000000000000000 0 0000000000000000 0 0000000000000000
 
\begin_inset Newline newline
\end_inset

8 0000000000000000 9 0000000000000000 A 0000000000000000 B 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111111111000 ∙ 1101110000111100 ∙ 0001111111111000 ∙ 1110000000000111
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 1111111001111110 ∙ 0111111111111110 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 1111111111111111 ∙ 0111111111111110 ∙ 1111100000011111
 
\begin_inset Newline newline
\end_inset

∙ 1111100000000010 ∙ 1111111111111111 ∙ 1111100000001111 ∙ 0111110000111110
 
\begin_inset Newline newline
\end_inset

∙ 1111000000000000 ∙ 1111001111001111 ∙ 1111000000000001 ∙ 0011111001111100
 
\begin_inset Newline newline
\end_inset

∙ 1111000000000000 ∙ 1110000110000111 ∙ 1111000000000000 ∙ 0001111111111000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111100 ∙ 1110000000000111 ∙ 1111000000000000 ∙ 0000111111110000
 
\begin_inset Newline newline
\end_inset

∙ 0011111111111110 ∙ 1110000000000111 ∙ 1111000000000000 ∙ 0000011111100000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000001111 ∙ 1110000000000111 ∙ 1111000000000000 ∙ 0000011111000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000001111 ∙ 1110000000000111 ∙ 1111000000000001 ∙ 0000111110000000
 
\begin_inset Newline newline
\end_inset

∙ 0100000000011111 ∙ 1110000000000111 ∙ 1111100000001111 ∙ 0001111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 1110000000000111 ∙ 0111111111111110 ∙ 0011111000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 1110000000000111 ∙ 0111111111111110 ∙ 0111110000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111111111000 ∙ 1110000000000111 ∙ 0001111111111000 ∙ 1111100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 1111000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 1110000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 1100000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 1000000000000000
 
\begin_inset Newline newline
\end_inset

0 0000011100000000 0 0000000000000000 0 0000000111110000 0 0000000000000000
 
\begin_inset Newline newline
\end_inset

C 0000011110000000 D 0000000000000000 E 0000001111111000 F 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000011110000000 ∙ 0000000000000000 ∙ 0000011110001000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000011110000000 ∙ 0000000000000000 ∙ 0000011110000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000011110000000 ∙ 0000000000000000 ∙ 0011111111100000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000011110000000 ∙ 0000000000000000 ∙ 0011111111110000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000011110000000 ∙ 0001111111100111 ∙ 0011111111110000 ∙ 1100000000000011
 
\begin_inset Newline newline
\end_inset

∙ 0000011110000000 ∙ 0111111111110111 ∙ 0000011110000000 ∙ 1110000000000111
 
\begin_inset Newline newline
\end_inset

∙ 0000011110000000 ∙ 0111111111111111 ∙ 0000011110000000 ∙ 1110000000000111
 
\begin_inset Newline newline
\end_inset

∙ 0000011110000000 ∙ 1111100000011111 ∙ 0000011110000000 ∙ 1110000000000111
 
\begin_inset Newline newline
\end_inset

∙ 0000011110000000 ∙ 1111000000001111 ∙ 0000011110000000 ∙ 1111000110001111
 
\begin_inset Newline newline
\end_inset

∙ 0000011110000000 ∙ 1111000000001111 ∙ 0000011110000000 ∙ 0111000110001110
 
\begin_inset Newline newline
\end_inset

∙ 0000011110000000 ∙ 1111000000001111 ∙ 0000011110000000 ∙ 0111000110001110
 
\begin_inset Newline newline
\end_inset

∙ 0000011110000000 ∙ 1111000000001111 ∙ 0000011110000000 ∙ 0111101111011110
 
\begin_inset Newline newline
\end_inset

∙ 0000011110000000 ∙ 1111100000011111 ∙ 0000011110000000 ∙ 0011101111011100
 
\begin_inset Newline newline
\end_inset

∙ 0000011110000000 ∙ 0111111111111111 ∙ 0000011110000000 ∙ 0011111111111100
 
\begin_inset Newline newline
\end_inset

∙ 0000011111000000 ∙ 0111111111111111 ∙ 0000011110000000 ∙ 0001111001111000
 
\begin_inset Newline newline
\end_inset

∙ 0000011111000000 ∙ 0001111111111111 ∙ 0000011110000000 ∙ 0001111001111000
 
\begin_inset Newline newline
\end_inset

∙ 0000001111100000 ∙ 0000000000001111 ∙ 0000011110000000 ∙ 0000110000110000
 
\begin_inset Newline newline
\end_inset

∙ 0000000111100000 ∙ 0000000000001111 ∙ 0000011110000000 ∙ 0000110000110000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0110000000011111 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0111111111111110 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0111111111111110 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0001111111111000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

1 0000000000001111 1 0000000000000000 1 0000000000000000 1 1111000000000000
 
\begin_inset Newline newline
\end_inset

0 0000000000001111 1 0000000000000000 2 0000000000000000 3 1111000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000001111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 1111000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000001111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 1111000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000001111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 1111000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000001111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 1111000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111111101111 ∙ 1110000000000111 ∙ 1110001111111000 ∙ 1111011111111000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111111 ∙ 1110000000000111 ∙ 1111011111111110 ∙ 1111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111111 ∙ 1111000000001111 ∙ 1111111111111110 ∙ 1111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 1111100000011111 ∙ 0111000000001110 ∙ 1111111000011111 ∙ 1111100000011111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0111100000011110 ∙ 1111110000001111 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0011100000011100 ∙ 1111100000001111 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0011110000111100 ∙ 1111000000001111 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0001110000111000 ∙ 1111000000001111 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0001111001111000 ∙ 1111100000011111 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000111001110000 ∙ 1111111111111110 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111100000011111 ∙ 0000111111110000 ∙ 1111111111111110 ∙ 1111100000011111
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111111 ∙ 0000011111100000 ∙ 1111011111111000 ∙ 1111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111111 ∙ 0000001111000000 ∙ 1111000000000000 ∙ 1110111111111110
 
\begin_inset Newline newline
\end_inset

∙ 0001111111101111 ∙ 0000000110000000 ∙ 1111000000000000 ∙ 1110011111111000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 1111000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 1111000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 1111000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 1111000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

1 1111000000000000 1 0000000000000000 1 0000000000000000 1 0000000000000000
 
\begin_inset Newline newline
\end_inset

4 1111000000000000 5 0000000000000000 6 0000000000000000 7 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111001111111000 ∙ 1111000000001111 ∙ 1111000000001111 ∙ 0001111111000111
 
\begin_inset Newline newline
\end_inset

∙ 1111011111111110 ∙ 1111100000011111 ∙ 1111000000001111 ∙ 0111111111101111
 
\begin_inset Newline newline
\end_inset

∙ 1111111111111110 ∙ 0111110000111110 ∙ 1111000000001111 ∙ 0111111111111111
 
\begin_inset Newline newline
\end_inset

∙ 1111110000011111 ∙ 0011111001111100 ∙ 1111000000001111 ∙ 1111100000111111
 
\begin_inset Newline newline
\end_inset

∙ 1111100000001111 ∙ 0001111111111000 ∙ 1111000000001111 ∙ 1111000000011111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000111111110000 ∙ 1111000000001111 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000011111100000 ∙ 1111000000001111 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000011111100000 ∙ 1111000000001111 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000111111110000 ∙ 1111000000001111 ∙ 1111100000011111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0001111111111000 ∙ 1111000000001111 ∙ 0111111111111111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0011111001111100 ∙ 1111100000011111 ∙ 0111111111111111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0111110000111110 ∙ 0111111111111110 ∙ 0001111111101111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 1111100000011111 ∙ 0111111111111110 ∙ 0000000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 1111000000001111 ∙ 0001111111111000 ∙ 0000000000001111
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000001111
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000001111
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000001111
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000001110
 
\begin_inset Newline newline
\end_inset

1 0001111111111000 1 0000000111100000 1 0001111111111000 1 0001111111111000
 
\begin_inset Newline newline
\end_inset

8 0111111111111110 9 0000001111100000 A 0111111111111110 B 0111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0000001111100000 ∙ 0111111111111110 ∙ 0111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 1111100000011111 ∙ 0000011111100000 ∙ 1111000000011111 ∙ 1111000000011111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000011111100000 ∙ 0000000000001111 ∙ 0000000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000010111100000 ∙ 0000000000001111 ∙ 0000000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000111100000 ∙ 0000000000001111 ∙ 0000000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000111100000 ∙ 0000000000001111 ∙ 0000000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000111100000 ∙ 0000000000011111 ∙ 0000000000011111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000111100000 ∙ 0001111111111110 ∙ 0000011111111110
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000111100000 ∙ 0111111111111110 ∙ 0000011111111100
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000111100000 ∙ 0111111111111000 ∙ 0000011111111110
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000111100000 ∙ 1111100000000000 ∙ 0000000000011111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000111100000 ∙ 1111000000000000 ∙ 0000000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000111100000 ∙ 1111000000000000 ∙ 0000000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000111100000 ∙ 1111000000000000 ∙ 0000000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111100000011111 ∙ 0000000111100000 ∙ 1111000000000000 ∙ 1111000000011111
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0000000111100000 ∙ 1111111111111111 ∙ 0111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0000000111100000 ∙ 1111111111111111 ∙ 0111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 0001111111111000 ∙ 0000000111100000 ∙ 1111111111111111 ∙ 0001111111111000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

1 1111000011110000 1 1111111111111111 1 0001111111111000 1 1111111111111111
 
\begin_inset Newline newline
\end_inset

C 1111000011110000 D 1111111111111111 E 0111111111111110 F 1111111111111111
 
\begin_inset Newline newline
\end_inset

∙ 1111000011110000 ∙ 1111111111111111 ∙ 0111111111111110 ∙ 1111111111111111
 
\begin_inset Newline newline
\end_inset

∙ 1111000011110000 ∙ 1111000000000000 ∙ 1111100000001111 ∙ 0000000000000111
 
\begin_inset Newline newline
\end_inset

∙ 1111000011110000 ∙ 1111000000000000 ∙ 1111000000000000 ∙ 0000000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1111000011110000 ∙ 1111000000000000 ∙ 1111000000000000 ∙ 0000000000011111
 
\begin_inset Newline newline
\end_inset

∙ 1111000011110000 ∙ 1111000000000000 ∙ 1111000000000000 ∙ 0000000000111110
 
\begin_inset Newline newline
\end_inset

∙ 1111000011110000 ∙ 1111000000000000 ∙ 1111000000000000 ∙ 0000000001111100
 
\begin_inset Newline newline
\end_inset

∙ 1111000011110000 ∙ 1111000000000000 ∙ 1111100000000000 ∙ 0000000011111000
 
\begin_inset Newline newline
\end_inset

∙ 1111111111111111 ∙ 1111111111111000 ∙ 1111111111111000 ∙ 0000000111110000
 
\begin_inset Newline newline
\end_inset

∙ 1111111111111111 ∙ 1111111111111110 ∙ 1111111111111110 ∙ 0000001111100000
 
\begin_inset Newline newline
\end_inset

∙ 1111111111111111 ∙ 1111111111111110 ∙ 1111111111111110 ∙ 0000011111000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000011110000 ∙ 0000000000011111 ∙ 1111100000011111 ∙ 0000111110000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000011110000 ∙ 0000000000001111 ∙ 1111000000001111 ∙ 0001111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000011110000 ∙ 0000000000001111 ∙ 1111000000001111 ∙ 0011111000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000011110000 ∙ 0000000000001111 ∙ 1111000000001111 ∙ 0111110000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000011110000 ∙ 1111000000011111 ∙ 1111100000011111 ∙ 1111100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000011110000 ∙ 0111111111111110 ∙ 0111111111111110 ∙ 1111000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000011110000 ∙ 0111111111111110 ∙ 0111111111111110 ∙ 1110000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000011110000 ∙ 0001111111111000 ∙ 0001111111111000 ∙ 1100000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

2 0001111111111000 2 0001111111111000 2 0000000001111000 2 0000000000000000
 
\begin_inset Newline newline
\end_inset

0 0111111111111110 1 0111111111111110 2 0000000001111000 3 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0111111111111110 ∙ 0000000001111000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111100000011111 ∙ 1111100000011111 ∙ 0000000001111000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 1111000000001111 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 1111000000001111 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 1111000000001111 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 1111000000001111 ∙ 0000000001111000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111100000011111 ∙ 1111100000011111 ∙ 0000000001111000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0111111111111111 ∙ 0000000001111000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011111111111100 ∙ 0111111111111111 ∙ 0000000001111000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0001111111101111 ∙ 0000000001111000 ∙ 0111111111111111
 
\begin_inset Newline newline
\end_inset

∙ 1111100000011111 ∙ 0000000000001111 ∙ 0000000001111000 ∙ 0111111111111111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000000001111 ∙ 0000000001111000 ∙ 1111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000000001111 ∙ 0000000001111000 ∙ 1111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000000001111 ∙ 0000000001111000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111100000011111 ∙ 1111000000011111 ∙ 0000000001111000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0111111111111110 ∙ 0000000001111000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0111111111111110 ∙ 0000000001111000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111111111000 ∙ 0001111111111000 ∙ 0000000001111000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0001110011111000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0001111111110000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000111111110000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000011111000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

2 1111000000000000 2 0000000000000000 2 0000000000000000 2 0000000000001111
 
\begin_inset Newline newline
\end_inset

4 1111000000000000 5 0000000000000000 6 0000000000000000 7 0000000000011111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000011111
 
\begin_inset Newline newline
\end_inset

∙ 1111000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000111110
 
\begin_inset Newline newline
\end_inset

∙ 1111000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000001111100
 
\begin_inset Newline newline
\end_inset

∙ 1111000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000001111100
 
\begin_inset Newline newline
\end_inset

∙ 1111000000111100 ∙ 0000000000000000 ∙ 1111111111111111 ∙ 0000000011111000
 
\begin_inset Newline newline
\end_inset

∙ 1111000011111100 ∙ 0000000000000000 ∙ 1111111111111111 ∙ 0000000111110000
 
\begin_inset Newline newline
\end_inset

∙ 1111001111111100 ∙ 0000000000000000 ∙ 1111111111111111 ∙ 0000000111110000
 
\begin_inset Newline newline
\end_inset

∙ 1111111111100000 ∙ 0000000000000000 ∙ 0000000000011111 ∙ 0000001111100000
 
\begin_inset Newline newline
\end_inset

∙ 1111111110000000 ∙ 0000000000000000 ∙ 0000000000111111 ∙ 0000011111000000
 
\begin_inset Newline newline
\end_inset

∙ 1111111100000000 ∙ 0000000000000000 ∙ 0000000011111110 ∙ 0000011111000000
 
\begin_inset Newline newline
\end_inset

∙ 1111111100000000 ∙ 0000000000000000 ∙ 0000001111111000 ∙ 0000111110000000
 
\begin_inset Newline newline
\end_inset

∙ 1111111111000000 ∙ 0000000000000000 ∙ 0000111111100000 ∙ 0001111100000000
 
\begin_inset Newline newline
\end_inset

∙ 1111111111110000 ∙ 0000011000000000 ∙ 0011111110000000 ∙ 0001111100000000
 
\begin_inset Newline newline
\end_inset

∙ 1111001111111100 ∙ 0000111100000000 ∙ 1111111000000000 ∙ 0011111000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000011111111 ∙ 0001111110000000 ∙ 1111100000000000 ∙ 0111110000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000111111 ∙ 0001111110000000 ∙ 1111111111111111 ∙ 0111110000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000111100000000 ∙ 1111111111111111 ∙ 1111100000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000000011 ∙ 0000011000000000 ∙ 1111111111111111 ∙ 1111100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

2 0000000000000000 2 0000000011110000 2 0000000110000000 2 0000000000000000
 
\begin_inset Newline newline
\end_inset

8 0000000000000000 9 0000000011110000 A 0000001111000000 B 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000111100000 ∙ 0000001111000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000011100000000 ∙ 0000000111100000 ∙ 0000011111100000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000111110000000 ∙ 0000000111000000 ∙ 0000011111100000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111111000000 ∙ 0000000111000000 ∙ 0000011111100000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111111000000 ∙ 0000001110000000 ∙ 0000011111100000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111111000000 ∙ 0000001110000000 ∙ 0000011111100000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0000111110000000 ∙ 0000001100000000 ∙ 0000001111000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0000011100000000 ∙ 0000001100000000 ∙ 0000001111000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000001000000000 ∙ 0000000110000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000001000000000 ∙ 0000000110000000 ∙ 0111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000110000000 ∙ 0111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 0000011100000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 0000111110000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 0001111111000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111111000000 ∙ 0000000000000000 ∙ 0000001111000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111111000000 ∙ 0000000000000000 ∙ 0000001111000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0000111110000000 ∙ 0000000000000000 ∙ 0000001111000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0000011110000000 ∙ 0000000000000000 ∙ 0000001111000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0000001110000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000011100000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000111000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001110000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

2 0001111111111000 2 0000000000000000 2 0000000000000000 2 0001111111111000
 
\begin_inset Newline newline
\end_inset

C 0111111111111110 D 0000000000000000 E 0000000000000000 F 0111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0111111111111110
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 1111000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1110000000000111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000111
 
\begin_inset Newline newline
\end_inset

∙ 1110000000000111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000111
 
\begin_inset Newline newline
\end_inset

∙ 1110000111000111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000001111
 
\begin_inset Newline newline
\end_inset

∙ 1110001111100111 ∙ 0000100000110000 ∙ 0000000000000000 ∙ 0000000001111110
 
\begin_inset Newline newline
\end_inset

∙ 1110001111100111 ∙ 0001110001111000 ∙ 0000000000000000 ∙ 0000000111111110
 
\begin_inset Newline newline
\end_inset

∙ 1110001111100111 ∙ 0001111011110000 ∙ 0000000000000000 ∙ 0000000111111000
 
\begin_inset Newline newline
\end_inset

∙ 1110001111111111 ∙ 0000111111100000 ∙ 0000000000000000 ∙ 0000001111100000
 
\begin_inset Newline newline
\end_inset

∙ 1110001111111110 ∙ 0000011111000000 ∙ 0000000000000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 1110001111111110 ∙ 0000001111100000 ∙ 0000000000000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 1110000111111000 ∙ 0000011111110000 ∙ 0000011100000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1110000000000000 ∙ 0000111101111000 ∙ 0000111110000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1110000000000000 ∙ 0001111000111000 ∙ 0001111111000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111000000001111 ∙ 0000110000010000 ∙ 0001111111000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0000000000000000 ∙ 0001111111000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0000000000000000 ∙ 0000111111000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111111111000 ∙ 0000000000000000 ∙ 0000011111000000 ∙ 0000001111000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000001110000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000011100000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000111000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0001110000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

3 1111111111110000 3 0000000000000000 3 0000000000000000 3 0000000000000000
 
\begin_inset Newline newline
\end_inset

0 1111111111111100 1 0000000000000000 2 0001100000000000 3 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111111111111110 ∙ 0000000000000000 ∙ 0001100000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0110111000000000 ∙ 0111111000000000 ∙ 0011111000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011111111111111 ∙ 0111111100000000 ∙ 0111111000000000 ∙ 0111111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111111111111 ∙ 0111000100000000 ∙ 0001100000000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0000111111111111 ∙ 0110000000000000 ∙ 0001100000000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0000011111111111 ∙ 0110000000000000 ∙ 0001100000000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0000001111111111 ∙ 0110000000000000 ∙ 0001100000000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000111111111 ∙ 0110000000000000 ∙ 0001100000000000 ∙ 0111111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000011111111 ∙ 0110000000000000 ∙ 0001110000000000 ∙ 0011111000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000011111111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000011111111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000011111111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000111111111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000001111111111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000011111111111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000111111111111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111111111111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011111111111111 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111111111110 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111111111111110 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111111111111100 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 1111111111110000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

3 0000000000000000 3 0000000000000000 3 0000000000000000 3 0001100000000000
 
\begin_inset Newline newline
\end_inset

4 0000000000000000 5 0000000000000000 6 0000000000000000 7 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011111000000000 ∙ 0001111000000000 ∙ 0110111000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0011111100000000 ∙ 0111111100000000 ∙ 0011100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0000001100000000 ∙ 0111001100000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0011111100000000 ∙ 0110001100000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111000000000 ∙ 0111111100000000 ∙ 0110001100000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110000000000000 ∙ 0110001100000000 ∙ 0110001100000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0111111100000000 ∙ 0110001100000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011111000000000 ∙ 0011101110000000 ∙ 0110001100000000 ∙ 0001110000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

3 0000000000000000 3 0000000000000000 3 0000000000000000 3 0000000000000000
 
\begin_inset Newline newline
\end_inset

8 0000000000000000 9 0000000000000000 A 0000000000000000 B 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011111000000000 ∙ 0110001100000000 ∙ 0011111000000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0111011100000000 ∙ 0111111100000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110000000000000 ∙ 0111111100000000 ∙ 0110000100000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111000000000 ∙ 0110101100000000 ∙ 0110000000000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0011111100000000 ∙ 0110001100000000 ∙ 0110000000000000 ∙ 0111111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0000001100000000 ∙ 0110001100000000 ∙ 0110000100000000 ∙ 0011111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0110001100000000 ∙ 0111111100000000 ∙ 0000001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0011111000000000 ∙ 0110001100000000 ∙ 0011111000000000 ∙ 0100001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0111111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0011111000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

3 0000000000000000 3 0000000000000000 3 0000111000000000 3 0000000000000000
 
\begin_inset Newline newline
\end_inset

C 0011100000000000 D 0000000000000000 E 0001101000000000 F 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001100000000000 ∙ 0000000000000000 ∙ 0001100000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001100000000000 ∙ 0011101100000000 ∙ 0111111000000000 ∙ 1110001110000000
 
\begin_inset Newline newline
\end_inset

∙ 0001100000000000 ∙ 0111111100000000 ∙ 0111111000000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0001100000000000 ∙ 0110001100000000 ∙ 0001100000000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0001100000000000 ∙ 0110001100000000 ∙ 0001100000000000 ∙ 0110101100000000
 
\begin_inset Newline newline
\end_inset

∙ 0001100000000000 ∙ 0111111100000000 ∙ 0001100000000000 ∙ 0111111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0001100000000000 ∙ 0011111100000000 ∙ 0001100000000000 ∙ 0111111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0001100000000000 ∙ 0000001100000000 ∙ 0001100000000000 ∙ 0111011100000000
 
\begin_inset Newline newline
\end_inset

∙ 0001110000000000 ∙ 0100001100000000 ∙ 0001100000000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0111111100000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0011111000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

4 0000001100000000 4 0000000000000000 4 0000000000000000 4 0110000000000000
 
\begin_inset Newline newline
\end_inset

0 0000001100000000 1 0000000000000000 2 0000000000000000 3 0110000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000001100000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0110000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011101100000000 ∙ 0110001100000000 ∙ 0110111000000000 ∙ 0110111000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0110001100000000 ∙ 0111111100000000 ∙ 0111111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0110001100000000 ∙ 0110001100000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0110001100000000 ∙ 0110001100000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0111011100000000 ∙ 0110001100000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0011111000000000 ∙ 0110001100000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0001110000000000 ∙ 0111111100000000 ∙ 0111111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0011101100000000 ∙ 0000100000000000 ∙ 0110111000000000 ∙ 0110111000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0110000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0110000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0110000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

4 0110000000000000 4 0000000000000000 4 0000000000000000 4 0000000000000000
 
\begin_inset Newline newline
\end_inset

4 0110000000000000 5 0000000000000000 6 0000000000000000 7 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110111000000000 ∙ 0110001100000000 ∙ 0110001100000000 ∙ 0011101100000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0111011100000000 ∙ 0110001100000000 ∙ 0111111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0111001100000000 ∙ 0011011000000000 ∙ 0110001100000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0001110000000000 ∙ 0110001100000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0001110000000000 ∙ 0110001100000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0011011000000000 ∙ 0110001100000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0111011100000000 ∙ 0111111100000000 ∙ 0111111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0110001100000000 ∙ 0011111000000000 ∙ 0011101100000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

4 0011111000000000 4 0000110000000000 4 0011111000000000 4 0011111000000000
 
\begin_inset Newline newline
\end_inset

8 0111111100000000 9 0001110000000000 A 0111111100000000 B 0111111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0011110000000000 ∙ 0110001100000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0000110000000000 ∙ 0000001100000000 ∙ 0000001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0000110000000000 ∙ 0000011100000000 ∙ 0000111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0000110000000000 ∙ 0000111000000000 ∙ 0000111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0000110000000000 ∙ 0001110000000000 ∙ 0000001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0000110000000000 ∙ 0011100000000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0000110000000000 ∙ 0111000000000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0011111100000000 ∙ 0111111100000000 ∙ 0111111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0011111000000000 ∙ 0011111100000000 ∙ 0111111100000000 ∙ 0011111000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

4 0000011000000000 4 0111111100000000 4 0011111000000000 4 0111111100000000
 
\begin_inset Newline newline
\end_inset

C 0110011000000000 D 0111111100000000 E 0111111100000000 F 0111111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110011000000000 ∙ 0110000000000000 ∙ 0110001100000000 ∙ 0000001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110011000000000 ∙ 0110000000000000 ∙ 0110000000000000 ∙ 0000001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110011000000000 ∙ 0111111000000000 ∙ 0111111000000000 ∙ 0000011100000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0111111100000000 ∙ 0111111100000000 ∙ 0000111000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0000001100000000 ∙ 0110001100000000 ∙ 0001110000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000011000000000 ∙ 0000001100000000 ∙ 0110001100000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000011000000000 ∙ 0110001100000000 ∙ 0110001100000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000011000000000 ∙ 0111111100000000 ∙ 0111111100000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000011000000000 ∙ 0011111000000000 ∙ 0011111000000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

5 0011111000000000 5 0011111000000000 5 0000011000000000 5 0000000000000000
 
\begin_inset Newline newline
\end_inset

0 0111111100000000 1 0111111100000000 2 0000011000000000 3 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0110001100000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0110001100000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0111111100000000 ∙ 0000111000000000 ∙ 0001111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0011111100000000 ∙ 0000011000000000 ∙ 0011111000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0000001100000000 ∙ 0000011000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0000001100000000 ∙ 0000011000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0110001100000000 ∙ 0000011000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0111111100000000 ∙ 0000011000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011111000000000 ∙ 0011111000000000 ∙ 0000011000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0110011000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0111111000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0011110000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

5 0110000000000000 5 0000000000000000 5 0000000000000000 5 0000001100000000
 
\begin_inset Newline newline
\end_inset

4 0110000000000000 5 0000000000000000 6 0000000000000000 7 0000011100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000011000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110011000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000111000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110111000000000 ∙ 0000000000000000 ∙ 0111111100000000 ∙ 0000110000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111110000000000 ∙ 0000000000000000 ∙ 0111111100000000 ∙ 0001110000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111100000000000 ∙ 0000000000000000 ∙ 0000111000000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111100000000000 ∙ 0001100000000000 ∙ 0001110000000000 ∙ 0011100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111110000000000 ∙ 0011110000000000 ∙ 0011100000000000 ∙ 0011000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110111000000000 ∙ 0011110000000000 ∙ 0111111100000000 ∙ 0111000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110011100000000 ∙ 0001100000000000 ∙ 0111111100000000 ∙ 0110000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

5 0000000000000000 5 0000111100000000 5 0001100000000000 5 0000000000000000
 
\begin_inset Newline newline
\end_inset

8 0000000000000000 9 0000111000000000 A 0001100000000000 B 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001100000000000 ∙ 0001110000000000 ∙ 0011110000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011110000000000 ∙ 0001100000000000 ∙ 0011110000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011110000000000 ∙ 0011000000000000 ∙ 0011110000000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001100000000000 ∙ 0000000000000000 ∙ 0001100000000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0001100000000000 ∙ 0111111000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001100000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0111111000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011110000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011110000000000 ∙ 0000000000000000 ∙ 0001100000000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001100000000000 ∙ 0000000000000000 ∙ 0001100000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

5 0011111000000000 5 0000000000000000 5 0000000000000000 5 0011111000000000
 
\begin_inset Newline newline
\end_inset

C 0111111100000000 D 0000000000000000 E 0000000000000000 F 0111111100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0110001100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000011100000000
 
\begin_inset Newline newline
\end_inset

∙ 0110101100000000 ∙ 0110011000000000 ∙ 0000000000000000 ∙ 0000111000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110111100000000 ∙ 0110011000000000 ∙ 0000000000000000 ∙ 0001110000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110111000000000 ∙ 0001100000000000 ∙ 0000000000000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110000000000000 ∙ 0001100000000000 ∙ 0001100000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0110001100000000 ∙ 0110011000000000 ∙ 0011110000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0110011000000000 ∙ 0011110000000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011111000000000 ∙ 0000000000000000 ∙ 0001100000000000 ∙ 0001100000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0011000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

6 0111111000000000 6 0000000000000000 6 0000000000000000 6 0000000000000000
 
\begin_inset Newline newline
\end_inset

0 0111111100000000 1 0000000000000000 2 0000000000000000 3 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011111100000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111100000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000111100000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000111100000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000111100000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0001111100000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0011111100000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111100000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0111111000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

6 0000000000000000 6 0000000000000000 6 0000000000000000 6 0000000000000000
 
\begin_inset Newline newline
\end_inset

4 0000000000000000 5 0000000000000000 6 0000000000000000 7 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

6 0000000000000000 6 0000000000000000 6 0000000000000000 6 0000000000000000
 
\begin_inset Newline newline
\end_inset

8 0000000000000000 9 0000000000000000 A 0000000000000000 B 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

6 0000000000000000 6 0000000000000000 6 0000000000000000 6 0000000000000000
 
\begin_inset Newline newline
\end_inset

C 0000000000000000 D 0000000000000000 E 0000000000000000 F 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

7 0000000000000000 7 0000000000000000 7 0000000000000000 7 0000000000000000
 
\begin_inset Newline newline
\end_inset

0 0000000000000000 1 0000000000000000 2 0000000000000000 3 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

7 0000000000000000 7 0000000000000000 7 0000000000000000 7 0000000000000000
 
\begin_inset Newline newline
\end_inset

4 0000000000000000 5 0000000000000000 6 0000000000000000 7 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

7 0000000000000000 7 0000000000000000 7 0000000000000000 7 0000000000000000
 
\begin_inset Newline newline
\end_inset

8 0000000000000000 9 0000000000000000 A 0000000000000000 B 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

7 0000000000000000 7 0000000000000000 7 0000000000000000 7 0000000000000000
 
\begin_inset Newline newline
\end_inset

C 0000000000000000 D 0000000000000000 E 0000000000000000 F 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000 ∙ 0000000000000000
 
\begin_inset Newline newline
\end_inset

}icons
\begin_inset Newline newline
\end_inset

( 00204800 ) D# 18 code{ 
\begin_inset Newline newline
\end_inset

:# ns -258 :# nblk 1440 :# nc 8 { cr }
\begin_inset Newline newline
\end_inset

( colorforth v3.4k1+ g144/1.10 chuck moore ) { cr }
\begin_inset Newline newline
\end_inset

[ d# 20 load d# 22 load d# 24 load ] ( colors ) [ d# 28 load ] { cr }
\begin_inset Newline newline
\end_inset

( decompress ) [ mark d# 30 load restore empt ]
\begin_inset Newline newline
\end_inset

: env [ d# 34 ] winver 2* + ; [ env ] ( ironmental ) [ load d# 46 load
\begin_inset Newline newline
\end_inset

d# 62 d# 4 loads d# 88 load ] { br }
\begin_inset Newline newline
\end_inset

: dump d# 48 load ; ( background dump )
\begin_inset Newline newline
\end_inset

: floppy d# 52 load ; ( format, archive, set video )
\begin_inset Newline newline
\end_inset

: icons d# 54 load ; ( edit chars )
\begin_inset Newline newline
\end_inset

: c-a-c d# 70 ; ( ascii )
\begin_inset Newline newline
\end_inset

: audit d# 90 load ; ( disk audit utility )
\begin_inset Newline newline
\end_inset

: png d# 168 load ; ( png file format )
\begin_inset Newline newline
\end_inset

: html d# 176 load ; ( html file write ) { br }
\begin_inset Newline newline
\end_inset

( blocks 0-143 are public domain software ) { cr }
\begin_inset Newline newline
\end_inset

[ mark empty ] ( arrayforth ) [ d# 144 load ] }block
\begin_inset Newline newline
\end_inset

( 00204C00 ) D# 19 shadow{ 
\begin_inset Newline newline
\end_inset

( compile x86 colorforth )
\begin_inset Newline newline
\end_inset

: ns ( number of sectors compressed if neg, ) { cr }
\begin_inset Newline newline
\end_inset

( last compressed if pos.
 )
\begin_inset Newline newline
\end_inset

: nblk ( number of uncompressed blocks.
 )
\begin_inset Newline newline
\end_inset

: nc ( no.
 of compressed cylinders, deprecated ) { cr }
\begin_inset Newline newline
\end_inset

[ these vars must be first things in block! ] { br }
\begin_inset Newline newline
\end_inset

: dump ( compile memory display background task )
\begin_inset Newline newline
\end_inset

: icons ( compile icon editor )
\begin_inset Newline newline
\end_inset

: png ( screen image to file )
\begin_inset Newline newline
\end_inset

: ---
\begin_inset Newline newline
\end_inset

: editor
\begin_inset Newline newline
\end_inset

: sct [ yrg* ] ( all-caps cap lower-case yellow red green * toggles
\begin_inset Newline newline
\end_inset

shadow comment block )
\begin_inset Newline newline
\end_inset

: fj [ ludr ] ( find jump left up down right )
\begin_inset Newline newline
\end_inset

: ..
 [ -mc+ ] ( dec-block magenta cyan inc-block )
\begin_inset Newline newline
\end_inset

: x.i ( delete exit insert )
\begin_inset Newline newline
\end_inset

: .
 ( jump jumps between -edited- blocks )
\begin_inset Newline newline
\end_inset

: f ( finds next word from ) [ find word ] }block
\begin_inset Newline newline
\end_inset

( 00205000 ) D# 20 code{ 
\begin_inset Newline newline
\end_inset

[ macro ]
\begin_inset Newline newline
\end_inset

: swap h# 0000168B 2, H# C28B0689 , ;
\begin_inset Newline newline
\end_inset

: 0 < ?dup > h# 0000C031 2, ;
\begin_inset Newline newline
\end_inset

: if h# 00000074 2, here ;
\begin_inset Newline newline
\end_inset

: -if h# 00000079 2, here ;
\begin_inset Newline newline
\end_inset

: while ( n-nn ) < if > swap ;
\begin_inset Newline newline
\end_inset

: -while ( n-nn ) < -if > swap ;
\begin_inset Newline newline
\end_inset

: a < ?dup > h# 0000C28B 2, ;
\begin_inset Newline newline
\end_inset

: a! ?lit if h# 000000BA 1, , ; then h# 0000D08B 2, < drop > ;
\begin_inset Newline newline
\end_inset

: 2* h# 0000E0D1 2, ; [ forth ]
\begin_inset Newline newline
\end_inset

: a, 2* 2* , ; [ macro ]
\begin_inset Newline newline
\end_inset

: @ ?lit if < ?dup > h# 0000058B 2, a, ; then h# 0085048B 3, 0 , ;
\begin_inset Newline newline
\end_inset

: ! ?lit if ?lit if h# 000005C7 2, swap a, , ; then h# 00000589 2,
\begin_inset Newline newline
\end_inset

a, < drop > ; then < a! > h# 00950489 3, 0 , < drop > ;
\begin_inset Newline newline
\end_inset

: nip h# 0004768D 3, ;
\begin_inset Newline newline
\end_inset

: + ?lit if h# 00000005 1, , ; then h# 00000603 2, < nip > ;
\begin_inset Newline newline
\end_inset

: or h# 00000633
\begin_inset Newline newline
\end_inset

: binary ?lit if swap d# 2 + 1, , ; then 2, < nip > ;
\begin_inset Newline newline
\end_inset

: and h# 00000623 < binary > ;
\begin_inset Newline newline
\end_inset

: u+ ?lit if h# 00000681 2, , ; then h# 00044601 3, < drop > ;
\begin_inset Newline newline
\end_inset

: ? ?lit h# 000000A9 1, , ;
\begin_inset Newline newline
\end_inset

: over < ?dup > h# 0004468B 3, ; }block
\begin_inset Newline newline
\end_inset

( 00205400 ) D# 21 shadow{ 
\begin_inset Newline newline
\end_inset

( pentium macros' 1, 2, 3, , compile 1-4 bytes )
\begin_inset Newline newline
\end_inset

: drop ( lodsd, flags unchanged, why sp is in esi - in kernel )
\begin_inset Newline newline
\end_inset

: then ( fix address - in kernel )
\begin_inset Newline newline
\end_inset

: swap ( sp xchg )
\begin_inset Newline newline
\end_inset

: 0 ( 0 0 xor, macro 0 identical to number 0 )
\begin_inset Newline newline
\end_inset

: if ( jz, flags set, max 127 bytes, leave address )
\begin_inset Newline newline
\end_inset

: -if ( jns, same )
\begin_inset Newline newline
\end_inset

: a ( 2 0 mov, never used? )
\begin_inset Newline newline
\end_inset

: a! ( 0 2 mov, unoptimized )
\begin_inset Newline newline
\end_inset

: 2* ( shift left )
\begin_inset Newline newline
\end_inset

: a, ( compile word address )
\begin_inset Newline newline
\end_inset

: @/! ( fetch/store from/to word address, or eax )
\begin_inset Newline newline
\end_inset

: nip swap drop
\begin_inset Newline newline
\end_inset

: +/or/and ( number or sp with eax )
\begin_inset Newline newline
\end_inset

: u+ ( add to 2nd number, number or sp )
\begin_inset Newline newline
\end_inset

: ? ( test bits, set flags, literal only! )
\begin_inset Newline newline
\end_inset

: over ( sp 4 + @ ) }block
\begin_inset Newline newline
\end_inset

( 00205800 ) D# 22 code{ 
\begin_inset Newline newline
\end_inset

( macros )
\begin_inset Newline newline
\end_inset

: push ?lit if h# 00000068 1, , ; then h# 00000050 1, < drop > ;
\begin_inset Newline newline
\end_inset

: pop < ?dup > h# 00000058 1, ;
\begin_inset Newline newline
\end_inset

: - h# 0000D0F7 2, ;
\begin_inset Newline newline
\end_inset

: *end swap
\begin_inset Newline newline
\end_inset

: end h# 000000EB
\begin_inset Newline newline
\end_inset

: loop 1, here - + 1, ;
\begin_inset Newline newline
\end_inset

: until h# 00000074 < loop > ;
\begin_inset Newline newline
\end_inset

: -until h# 00000079 < loop > ;
\begin_inset Newline newline
\end_inset

: for < push begin > ;
\begin_inset Newline newline
\end_inset

: *next swap
\begin_inset Newline newline
\end_inset

: next H# 75240CFF
\begin_inset Newline newline
\end_inset

: 0next , here - + 1, h# 0004C483 3, ;
\begin_inset Newline newline
\end_inset

: -next H# 79240CFF < 0next > ;
\begin_inset Newline newline
\end_inset

: i < ?dup > h# 0024048B 3, ;
\begin_inset Newline newline
\end_inset

: +! ?lit if ?lit if h# 00000581 2, swap a, , ; then h# 00000501 2,
\begin_inset Newline newline
\end_inset

a, < drop > ; then < a! > h# 00950401 3, 0 , < drop > ;
\begin_inset Newline newline
\end_inset

: nop h# 00000090 1, ;
\begin_inset Newline newline
\end_inset

: align here - d# 3 and drop if < nop align > ; then ;
\begin_inset Newline newline
\end_inset

: or! < a! > h# 00950409 3, 0 , < drop > ;
\begin_inset Newline newline
\end_inset

: * h# 0006AF0F 3, < nip > ;
\begin_inset Newline newline
\end_inset

: */ h# 0000C88B 2, < drop > H# F9F72EF7 , < nip > ;
\begin_inset Newline newline
\end_inset

: /mod < swap > h# 00000099 1, H# 16893EF7 , ;
\begin_inset Newline newline
\end_inset

: / < /mod nip > ;
\begin_inset Newline newline
\end_inset

: mod < /mod drop > ; }block
\begin_inset Newline newline
\end_inset

( 00205C00 ) D# 23 shadow{ 
\begin_inset Newline newline
\end_inset

: push ( lit to sp; eax to sp )
\begin_inset Newline newline
\end_inset

: pop ( sp to eax )
\begin_inset Newline newline
\end_inset

: - ( ones-complement )
\begin_inset Newline newline
\end_inset

: begin -a ( current code address - byte )
\begin_inset Newline newline
\end_inset

: while a-aa ( if-escape from any structure usage example begin xxx
\begin_inset Newline newline
\end_inset

while xxx next xxx then )
\begin_inset Newline newline
\end_inset

: for n ( push count onto return stack, ) begin
\begin_inset Newline newline
\end_inset

: *next aa-aa ( swap ) for ( and ) if ( addresses )
\begin_inset Newline newline
\end_inset

: next a ( decrement count, jnz to ) for, ( pop return stack when done )
\begin_inset Newline newline
\end_inset

: -next a ( same, jns - loop includes 0 )
\begin_inset Newline newline
\end_inset

: i -n ( copy loop index to data stack )
\begin_inset Newline newline
\end_inset

: *end aa-aa ( swap ) end ( and ) if ( addresses )
\begin_inset Newline newline
\end_inset

: end a ( jmp to ) begin
\begin_inset Newline newline
\end_inset

: +! na ( add to memory, 2 literals optimized )
\begin_inset Newline newline
\end_inset

: align ( next call to end on word boundary )
\begin_inset Newline newline
\end_inset

: or! na ( inclusive-or to memory, unoptimized )
\begin_inset Newline newline
\end_inset

: * mm-p ( 32-bit product )
\begin_inset Newline newline
\end_inset

: */ mnd-q ( 64-bit product, then quotient )
\begin_inset Newline newline
\end_inset

: /mod nd-rq ( remainder and quotient )
\begin_inset Newline newline
\end_inset

: / nd-q ( quotient )
\begin_inset Newline newline
\end_inset

: mod nd-r ( remainder ) }block
\begin_inset Newline newline
\end_inset

( 00206000 ) D# 24 code{ 
\begin_inset Newline newline
\end_inset

( compiled macros )
\begin_inset Newline newline
\end_inset

: 2/ h# 0000F8D1 2, ;
\begin_inset Newline newline
\end_inset

: time < ?dup > h# 0000310F 2, ;
\begin_inset Newline newline
\end_inset

: 7push h# 00000057 1, ;
\begin_inset Newline newline
\end_inset

: 7pop h# 0000005F 1, ; [ forth ]
\begin_inset Newline newline
\end_inset

: @ @ ; { -cr } : ! ! ; { -cr } : + + ; { -cr } : - - ;
\begin_inset Newline newline
\end_inset

: */ */ ; { -cr } : * * ; { -cr } : / / ; { -cr } : 2/ 2/ ;
\begin_inset Newline newline
\end_inset

: dup dup ; { -cr } : drop drop ; { -cr } : nip nip ;
\begin_inset Newline newline
\end_inset

: or or ; ( arithmetic )
\begin_inset Newline newline
\end_inset

: negate - d# 1 + ;
\begin_inset Newline newline
\end_inset

: min less if drop ; then swap drop ;
\begin_inset Newline newline
\end_inset

: abs dup negate
\begin_inset Newline newline
\end_inset

: max less if swap then drop ;
\begin_inset Newline newline
\end_inset

: v+ ( vv-v ) push u+ pop + ; ( vector )
\begin_inset Newline newline
\end_inset

: loads ( bn ) for dup push load pop d# 2 + next drop ;
\begin_inset Newline newline
\end_inset

: writes ( acn ) for write next drop drop ;
\begin_inset Newline newline
\end_inset

: reads ( acn ) for read next drop drop ; }block
\begin_inset Newline newline
\end_inset

( 00206400 ) D# 25 shadow{ 
\begin_inset Newline newline
\end_inset

: 2/ ( arithmetic right shift )
\begin_inset Newline newline
\end_inset

: time -n ( pentium cycle counter, calibrate to actual clock rate )
\begin_inset Newline newline
\end_inset

: 7push/7pop ( save/restore save register 7, edi )
\begin_inset Newline newline
\end_inset

: @-drop ( these macros redefined in ) forth ( so they may be executed )
\begin_inset Newline newline
\end_inset

: negate n-n ( when you just cant use ) -
\begin_inset Newline newline
\end_inset

: min nn-n ( minimum )
\begin_inset Newline newline
\end_inset

: abs n-u ( absolute value )
\begin_inset Newline newline
\end_inset

: max nn-n ( maximum )
\begin_inset Newline newline
\end_inset

: v+ vv-v ( add 2-vectors )
\begin_inset Newline newline
\end_inset

: loads ( load successive blocks )
\begin_inset Newline newline
\end_inset

: nc -a ( number of cylinders booted and saved )
\begin_inset Newline newline
\end_inset

: writes ( address, cylinder, cylinder count )
\begin_inset Newline newline
\end_inset

: reads ( address, cylinder, count.
 ) [ floppy access note do not hit
\begin_inset Newline newline
\end_inset

any keys while floppy is being written - wait for light to go out ]
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00206800 ) D# 26 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00206C00 ) D# 27 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00207000 ) D# 28 code{ 
\begin_inset Newline newline
\end_inset

( colors etc )
\begin_inset Newline newline
\end_inset

: -offset ( n-n ) [ offset ] @ negate + ;
\begin_inset Newline newline
\end_inset

: block [ offset ] @ +
\begin_inset Newline newline
\end_inset

: blks h# 00000100 * ;
\begin_inset Newline newline
\end_inset

: wrtboot [ d# 0 block ] d# 0 d# 1 writes stop ;
\begin_inset Newline newline
\end_inset

: save [ d# 84 ] load ;
\begin_inset Newline newline
\end_inset

: white h# 00FFFFFF color ;
\begin_inset Newline newline
\end_inset

: red h# 00FF0000 color ;
\begin_inset Newline newline
\end_inset

: green h# 0000FF00 color ;
\begin_inset Newline newline
\end_inset

: blue h# 000000FF color ;
\begin_inset Newline newline
\end_inset

: silver h# 00BFBFBF color ;
\begin_inset Newline newline
\end_inset

: black d# 0 color ;
\begin_inset Newline newline
\end_inset

: 5* d# 5 for 2emit next ;
\begin_inset Newline newline
\end_inset

: cf d# 25 dup at red h# 00000001 h# 00000003 h# 0000000C h# 00000003
\begin_inset Newline newline
\end_inset

h# 0000000A 5* green h# 00000014 h# 00000002 h# 00000001 h# 00000003
\begin_inset Newline newline
\end_inset

h# 0000000E 5* ;
\begin_inset Newline newline
\end_inset

: fill ( nan ) for over over ! d# 1 + next drop drop ;
\begin_inset Newline newline
\end_inset

: move ( sdn ) for over @ over ! d# 1 + d# 1 u+ next drop drop ;
\begin_inset Newline newline
\end_inset

: erase ( bn ) push d# 0 swap block pop blks fill ;
\begin_inset Newline newline
\end_inset

: copy ( n ) [ blk ] @ block over block d# 512 move [ blk ] ! ; }block
\begin_inset Newline newline
\end_inset

( 00207400 ) D# 29 shadow{ 
\begin_inset Newline newline
\end_inset

: block n-a ( block number to word address )
\begin_inset Newline newline
\end_inset

: wrtboot ( write boot and kernel )
\begin_inset Newline newline
\end_inset

: save ( write entire image to floppy )
\begin_inset Newline newline
\end_inset

: colors ( specified as rgb' 888 bits )
\begin_inset Newline newline
\end_inset

: at xy ( set current screen position - in kernel )
\begin_inset Newline newline
\end_inset

: box xy ( lower-right of colored rectangle - in kernel )
\begin_inset Newline newline
\end_inset

: 5* emit ( letters )
\begin_inset Newline newline
\end_inset

: cf ( display double-size colorforth )
\begin_inset Newline newline
\end_inset

: fill n an ( writes n into a cell string )
\begin_inset Newline newline
\end_inset

: move sdn ( copies a cell string from s to d )
\begin_inset Newline newline
\end_inset

: erase bn ( zeroes a string of blocks )
\begin_inset Newline newline
\end_inset

: copy n ( copies current editor block and its shadow to the given
\begin_inset Newline newline
\end_inset

block ) }block
\begin_inset Newline newline
\end_inset

( 00207800 ) D# 30 code{ 
\begin_inset Newline newline
\end_inset

( decompress ) [ empt d# 32 load ]
\begin_inset Newline newline
\end_inset

: char ( -n ) 0 b! ( ?new ) d# 4 bits b d# 8 and drop if b d# 4 and
\begin_inset Newline newline
\end_inset

drop if d# 3 bits d# 7 ; then d# 1 bits d# 5 ; then d# 4 b h# 0000000F
\begin_inset Newline newline
\end_inset

and drop if ; then
\begin_inset Newline newline
\end_inset

: eob ( n ) drop pop drop ;
\begin_inset Newline newline
\end_inset

: chars ( n-n ) char ?full c! 2*c b or chars ;
\begin_inset Newline newline
\end_inset

: word ( n ) d# 28 [ nb ] ! dup chars tbits ;
\begin_inset Newline newline
\end_inset

: short ( n ) d# 28 bits
\begin_inset Newline newline
\end_inset

: t, d# -4 [ nb ] ! b tbits ;
\begin_inset Newline newline
\end_inset

: literal ( n ) 0 b! d# 1 bits t,
\begin_inset Newline newline
\end_inset

: 32bits d# 16 bits d# 16 bits b , ;
\begin_inset Newline newline
\end_inset

: variable ( n ) word 32bits ;
\begin_inset Newline newline
\end_inset

: tag ( -n ) b h# 0000000F and dup jump eob word literal word word
\begin_inset Newline newline
\end_inset

literal short word short word word word variable short word short
\begin_inset Newline newline
\end_inset

: words ( ?new ) d# 4 bits tag words ;
\begin_inset Newline newline
\end_inset

: range ( ann ) over block [ h ] ! dup push erase [ aa ] ! 0 [ na ]
\begin_inset Newline newline
\end_inset

! begin words [ h ] @ d# 256 + d# -256 and [ h ] ! next ;
\begin_inset Newline newline
\end_inset

: restore [ ns ] @ dup and -if abs [ ns ] ! d# 36 block d# 3000 block
\begin_inset Newline newline
\end_inset

[ d# 18 blks nc @ d# -2 + * ] move [ d# 3000 block ] d# 36 [ nblk
\begin_inset Newline newline
\end_inset

@ d# -36 + ] range ; then drop ; }block
\begin_inset Newline newline
\end_inset

( 00207C00 ) D# 31 shadow{ 
\begin_inset Newline newline
\end_inset

: char ( examine high bits; shift 4, 5 or 7 bits )
\begin_inset Newline newline
\end_inset

: eob ( end of block )
\begin_inset Newline newline
\end_inset

: chars ( shift characters until 0 )
\begin_inset Newline newline
\end_inset

: word ( shift characters, then tag )
\begin_inset Newline newline
\end_inset

: short ( 28-bit value+tag )
\begin_inset Newline newline
\end_inset

: literal ( 1-bit base base, tag.
 value in next word )
\begin_inset Newline newline
\end_inset

: 32bits ( for values )
\begin_inset Newline newline
\end_inset

: variable ( word, value )
\begin_inset Newline newline
\end_inset

: tag ( vector )
\begin_inset Newline newline
\end_inset

: words ( examine tags )
\begin_inset Newline newline
\end_inset

: range ( process each block )
\begin_inset Newline newline
\end_inset

: move ( blocks 72 thru 1419 to 3000 )
\begin_inset Newline newline
\end_inset

: res ( restore compressed blocks ) }block
\begin_inset Newline newline
\end_inset

( 00208000 ) D# 32 code{ 
\begin_inset Newline newline
\end_inset

( decompress ) [ macro ] ( uses ebx )
\begin_inset Newline newline
\end_inset

: b < ?dup > h# 0000C38B 2, ;
\begin_inset Newline newline
\end_inset

: b! h# 0000D88B 2, < drop > ;
\begin_inset Newline newline
\end_inset

: c! h# 0000C88B 2, < drop > ;
\begin_inset Newline newline
\end_inset

: 2*d h# 00C3A50F 3, ;
\begin_inset Newline newline
\end_inset

: 2*c h# 0000E0D3 2, ; [ forth ] :# na 25 :# nb 9 :# h 67510272 :# an 0
\begin_inset Newline newline
\end_inset

:# aa 67982848 :# nz 4
\begin_inset Newline newline
\end_inset

: ?new [ na ] @ dup and drop if ; then
\begin_inset Newline newline
\end_inset

: new [ aa ] @ @ [ an ] ! d# 1 [ aa ] +! d# 32 [ na ] ! ;
\begin_inset Newline newline
\end_inset

: shift ( n-n ) dup negate dup [ nb ] +! [ na ] +! c! [ an ] @ 2*d
\begin_inset Newline newline
\end_inset

2*c [ an ] ! ;
\begin_inset Newline newline
\end_inset

: bits ( n ) ?new dup negate [ na ] @ + -if dup push + shift new pop
\begin_inset Newline newline
\end_inset

negate shift ; then drop shift ;
\begin_inset Newline newline
\end_inset

: tbits ( nn ) [ nb ] @ d# 8 + c! 2*c or
\begin_inset Newline newline
\end_inset

: , [ h ] @ ! d# 1 [ h ] +! ;
\begin_inset Newline newline
\end_inset

: tz ( nn-n ) over [ nz ] ! dup negate push + b begin dup d# 1 and
\begin_inset Newline newline
\end_inset

drop if drop drop pop drop [ nz ] @ ; then 2/ next b! dup [ nz ] @
\begin_inset Newline newline
\end_inset

- + - [ nb ] +! pop drop ;
\begin_inset Newline newline
\end_inset

: ?full ( n-n ) [ nb ] @ dup and -if tz dup push d# -4 + [ nb ] +!
\begin_inset Newline newline
\end_inset

tbits 0 dup pop dup - d# 29 + [ nb ] ! ; then drop ; }block
\begin_inset Newline newline
\end_inset

( 00208400 ) D# 33 shadow{ 
\begin_inset Newline newline
\end_inset

: b ( pop ebx, register 3, into eax )
\begin_inset Newline newline
\end_inset

: c! ( push eax into register 1, ecx )
\begin_inset Newline newline
\end_inset

: 2*d ( shift ebx left by ecx.
 bits from eax )
\begin_inset Newline newline
\end_inset

: 2*c ( shift eax left by ecx )
\begin_inset Newline newline
\end_inset

: na ( bits remaining in source word )
\begin_inset Newline newline
\end_inset

: nb ( bits remaining in ebx )
\begin_inset Newline newline
\end_inset

: h ( destination address )
\begin_inset Newline newline
\end_inset

: , ( store at destination )
\begin_inset Newline newline
\end_inset

: ?new ( fetch new word if necessary )
\begin_inset Newline newline
\end_inset

: new ( 32-bits in current word )
\begin_inset Newline newline
\end_inset

: shift ( eax into ebx, decrement ) nb
\begin_inset Newline newline
\end_inset

: tbits ( fill ebx with tag )
\begin_inset Newline newline
\end_inset

: ?full ( is there room in ebx? )
\begin_inset Newline newline
\end_inset

: bits ( shift bits into ebx.
 overflow into next word ) }block
\begin_inset Newline newline
\end_inset

( 00208800 ) D# 34 code{ 
\begin_inset Newline newline
\end_inset

( native system dependencies ) [ macro ]
\begin_inset Newline newline
\end_inset

: p@ < a! ?dup > h# 000000EC 1, ; [ forth ]
\begin_inset Newline newline
\end_inset

: key? h# 00000064 p@ d# 1 and drop if h# 00000060 p@ h# 00000080 and
\begin_inset Newline newline
\end_inset

drop if ; then pop drop then ;
\begin_inset Newline newline
\end_inset

: clock [ d# 40 ] load ;
\begin_inset Newline newline
\end_inset

: altfrm ( -b ) [ aper @ d# 1024 d# 768 * d# -4 * + ] ;
\begin_inset Newline newline
\end_inset

: topram ( -b ) [ H# 30000000 ] ;
\begin_inset Newline newline
\end_inset

: !work ( n ) block d# 0 over [ d# 1 ] + @ [ d# 35 ] + [ d# 36 ] /
\begin_inset Newline newline
\end_inset

writes stop ;
\begin_inset Newline newline
\end_inset

: @rest ( nn ) push [ d# 36 ] + block [ d# 2 ] pop reads stop ;
\begin_inset Newline newline
\end_inset

: @back ( n ) dup block d# 0 [ d# 2 ] reads dup [ d# 18 ] + block dup
\begin_inset Newline newline
\end_inset

@ [ d# 18 block @ ] or drop if drop [ d# 78 ] @rest ; then dup [ d# 1 ]
\begin_inset Newline newline
\end_inset

+ @ dup and -if nip abs [ d# 35 ] + [ d# 36 ] / [ d# -2 ] + @rest
\begin_inset Newline newline
\end_inset

; then drop drop [ d# 78 ] @rest ;
\begin_inset Newline newline
\end_inset

: !back ( n ) block d# 0 [ nblk ] @ [ d# 18 ] / writes stop ;
\begin_inset Newline newline
\end_inset

: @cyls ( acn ) reads stop ;
\begin_inset Newline newline
\end_inset

: screen d# 0 dup at d# 1024 d# 768 box ;
\begin_inset Newline newline
\end_inset

: utime ( -n ) d# 0 ; { br }
\begin_inset Newline newline
\end_inset

: serial ( -n ) d# 96 ; }block
\begin_inset Newline newline
\end_inset

( 00208C00 ) D# 35 shadow{ 
\begin_inset Newline newline
\end_inset

: key? ( exits calling defn if key struck )
\begin_inset Newline newline
\end_inset

: clock ( loads time of day suppt )
\begin_inset Newline newline
\end_inset

: altfrm ( byte addr of alternate frame buffer )
\begin_inset Newline newline
\end_inset

: topram ( end ram avail for applications.
 )
\begin_inset Newline newline
\end_inset

: @back and !back ( read/wrt full disk to/from adr ) [ @back reads
\begin_inset Newline newline
\end_inset

only active part of compressed ]
\begin_inset Newline newline
\end_inset

: @cyls ( equiv to reads )
\begin_inset Newline newline
\end_inset

: screen ( fills screen with current color )
\begin_inset Newline newline
\end_inset

: utime ( null definition for now for compatability ) }block
\begin_inset Newline newline
\end_inset

( 00209000 ) D# 36 code{ 
\begin_inset Newline newline
\end_inset

( windows system dependencies )
\begin_inset Newline newline
\end_inset

: key? [ keych ] @ d# 0 or drop if pop drop ; then ;
\begin_inset Newline newline
\end_inset

: beep ; { -cr } : clock d# 38 load ;
\begin_inset Newline newline
\end_inset

: topram { -cr } : altfrm ( -b ) [ endram d# -4096 d# 768 * + ] ;
\begin_inset Newline newline
\end_inset

: !work ( n ) dup block [ d# 1 ] + @ [ d# 1 ] + 2/ wwork ;
\begin_inset Newline newline
\end_inset

: @back ( n ) dup d# 19 rback dup [ d# 18 ] + block dup @ [ d# 18 block
\begin_inset Newline newline
\end_inset

@ ] or drop if drop [ d# 1440 ] rback ; then dup [ d# 1 ] + @ dup
\begin_inset Newline newline
\end_inset

and -if nip abs [ d# 1 ] + 2/ rback ; then drop [ d# 3 ] + @ rback
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset

: !back ( n ) [ nblk ] @ wback ;
\begin_inset Newline newline
\end_inset

: @cyls ( acn ) d# 3000 @back push [ d# 18 ] * [ d# 3000 ] + block
\begin_inset Newline newline
\end_inset

swap pop [ d# 18 d# 256 * ] * move ;
\begin_inset Newline newline
\end_inset

: screen d# 0 dup at d# 868 for d# 0 d# 1024 line next d# 0 dup at
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset

: serial ( -n ) d# 114 ;
\begin_inset Newline newline
\end_inset

: fopen ( af-h ) push push d# 0 d# 32 ( exist ) d# 3 d# 0 d# 0 pop
\begin_inset Newline newline
\end_inset

pop swap [ d# 4 ] * fcreate ; :# flng 30 [ flng d# 4 * dup ]
\begin_inset Newline newline
\end_inset

: frd ( anh-n ) push push push [ d# 0 + ] pop pop swap pop fread
\begin_inset Newline newline
\end_inset

: frw? ( ok-n ) if drop [ flng ] @ then ;
\begin_inset Newline newline
\end_inset

: fwr ( anh-n ) push push push [ d# 0 + ] pop pop swap pop fwrite frw?
\begin_inset Newline newline
\end_inset

; { -cr } : r/o [ H# 80000000 ] ;
\begin_inset Newline newline
\end_inset

: w/o [ H# 40000000 ] ; { -cr } : r/w [ r/o w/o + ] ; }block
\begin_inset Newline newline
\end_inset

( 00209400 ) D# 37 shadow{ 
\begin_inset Newline newline
\end_inset

: key? ( exits calling defn if key struck )
\begin_inset Newline newline
\end_inset

: save ( writes full disk image )
\begin_inset Newline newline
\end_inset

: beep ( alert in hardsim )
\begin_inset Newline newline
\end_inset

: clock ( loads time of day suppt )
\begin_inset Newline newline
\end_inset

: altfrm ( byte adr of alt frame buffer )
\begin_inset Newline newline
\end_inset

: topram ( end ram avail for applications.
 )
\begin_inset Newline newline
\end_inset

: @back and !back ( read/wrt full disk to/from adr ) [ @back reads
\begin_inset Newline newline
\end_inset

only active part of compressed, and only active part of straight disks
\begin_inset Newline newline
\end_inset

with vars ]
\begin_inset Newline newline
\end_inset

: @cyls ( equiv to reads )
\begin_inset Newline newline
\end_inset

: screen ( fills screen with current color ) { br }
\begin_inset Newline newline
\end_inset

: fopen ( opens an existing win32 file given word adr of name and access
\begin_inset Newline newline
\end_inset

code of ) r/o w/o ( or ) r/w.
 ( returns handle, indicators nz if it's
\begin_inset Newline newline
\end_inset

good.
 )
\begin_inset Newline newline
\end_inset

: frd ( and ) fwr ( read and write on things with win32 handles.
 )
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00209800 ) D# 38 code{ 
\begin_inset Newline newline
\end_inset

( windows clock )
\begin_inset Newline newline
\end_inset

: sec ( -n ) utime [ d# 60 d# 60 * d# 24 * ] mod ;
\begin_inset Newline newline
\end_inset

: minute ( -n ) sec d# 60 / ; }block
\begin_inset Newline newline
\end_inset

( 00209C00 ) D# 39 shadow{ 
\begin_inset Newline newline
\end_inset

: utime ( returns unix time in sec since epoch 0000z fri 1/01/1970 )
\begin_inset Newline newline
\end_inset

: sec ( seconds since midnight needs unsigned mod by time we are all
\begin_inset Newline newline
\end_inset

dead )
\begin_inset Newline newline
\end_inset

: min ( minutes past midnight ) }block
\begin_inset Newline newline
\end_inset

( 0020A000 ) D# 40 code{ 
\begin_inset Newline newline
\end_inset

( native clock ) [ macro ] ( pentium timer )
\begin_inset Newline newline
\end_inset

: p@ < a! ?dup > h# 000000EC 1, ;
\begin_inset Newline newline
\end_inset

: p! < a! > h# 000000EE 1, < drop > ; [ forth ]
\begin_inset Newline newline
\end_inset

: ms d# 100000 * for next ;
\begin_inset Newline newline
\end_inset

: ca h# 00000070 p! h# 00000071 ;
\begin_inset Newline newline
\end_inset

: c@ ca p@ ;
\begin_inset Newline newline
\end_inset

: c! ca p! ;
\begin_inset Newline newline
\end_inset

: !bcd push d# 10 /mod d# 16 * + pop c! ;
\begin_inset Newline newline
\end_inset

: !hm d# 100 /mod d# 4 !bcd d# 2 !bcd 0 dup c! ;
\begin_inset Newline newline
\end_inset

: bcd c@ d# 16 /mod d# 10 * + ;
\begin_inset Newline newline
\end_inset

: sec0 d# 4 bcd d# 60 * d# 2 bcd + d# 60 * d# 0 bcd + ;
\begin_inset Newline newline
\end_inset

: sec sec0 d# 2 ms dup sec0 or drop if drop sec ; then ;
\begin_inset Newline newline
\end_inset

: minute sec d# 60 / ;
\begin_inset Newline newline
\end_inset

: hms sec d# 60 /mod d# 60 /mod d# 100 * + d# 100 * + ;
\begin_inset Newline newline
\end_inset

: ymd d# 9 bcd d# 100 * d# 8 bcd + d# 100 * d# 7 bcd + ;
\begin_inset Newline newline
\end_inset

: day d# 6 c@ d# -1 + ;
\begin_inset Newline newline
\end_inset

: hi d# 10 c@ h# 00000080 and drop if ; then hi ;
\begin_inset Newline newline
\end_inset

: lo d# 10 c@ h# 00000080 and drop if lo ; then ;
\begin_inset Newline newline
\end_inset

: cal hi lo time - hi lo time + ( 748 ) ;
\begin_inset Newline newline
\end_inset

: beep h# 000000B6 h# 00000043 p! h# 000000EE h# 00000042 p! 0 h# 00000042
\begin_inset Newline newline
\end_inset

p! ( on ) h# 00000061 p@ d# 3 or h# 00000061 p! d# 50000000 for next
\begin_inset Newline newline
\end_inset

( off ) h# 00000061 p@ d# 3 or h# 00000061 p! ; }block
\begin_inset Newline newline
\end_inset

( 0020A400 ) D# 41 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0020A800 ) D# 42 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0020AC00 ) D# 43 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0020B000 ) D# 44 code{ 
\begin_inset Newline newline
\end_inset

: def a a a a a a a a a a a a a a { cr }
\begin_inset Newline newline
\end_inset

a a a a a a a a a a a a a a a { cr }
\begin_inset Newline newline
\end_inset

a a a a a a a a a a a a a a a { cr }
\begin_inset Newline newline
\end_inset

a a a a a a a a a a a a a a a { br }
\begin_inset Newline newline
\end_inset

a a a a a a a a a a a a a a a { cr }
\begin_inset Newline newline
\end_inset

a a a a a a a a a a a a a a a { cr }
\begin_inset Newline newline
\end_inset

a a a a a a a a a a a a a a a { cr }
\begin_inset Newline newline
\end_inset

a a a a a a a a a a a a a a a { br }
\begin_inset Newline newline
\end_inset

a a a a a a a a a a a a a a a { cr }
\begin_inset Newline newline
\end_inset

a a a a a a a a a a a a a a a { cr }
\begin_inset Newline newline
\end_inset

a a a a a a a a a a a a a a a { cr }
\begin_inset Newline newline
\end_inset

a a a a a a a a a a a a a a a { br }
\begin_inset Newline newline
\end_inset

a a a a a a a a a a a a a a a a a a a a a a a a a a a a a a { cr }
\begin_inset Newline newline
\end_inset

a a a a a a a a a a a a a a a { cr }
\begin_inset Newline newline
\end_inset

a a a a a a a a a a a a a a a { cr }
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0020B400 ) D# 45 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0020B800 ) D# 46 code{ 
\begin_inset Newline newline
\end_inset

( logo, etc )
\begin_inset Newline newline
\end_inset

: list ( n ) [ blk ] @ [ blk d# 1 + ] ! [ blk ] ! lis ;
\begin_inset Newline newline
\end_inset

: logo show black screen d# 800 d# 710 blue box d# 600 d# 50 at d# 1024
\begin_inset Newline newline
\end_inset

d# 620 red box d# 200 d# 100 at d# 700 d# 500 green box { 0000024F }
\begin_inset Newline newline
\end_inset

( list ) text cf keyboard ;
\begin_inset Newline newline
\end_inset

: empty empt logo ;
\begin_inset Newline newline
\end_inset

: wait [ d# 10 d# 30 * ] for 7push pause 7pop next ;
\begin_inset Newline newline
\end_inset

: l [ blk ] @ load ; { br }
\begin_inset Newline newline
\end_inset

[ d# 156 load ]
\begin_inset Newline newline
\end_inset

: watermark show black screen d# 16 center h# 00404060 color [ blk ]
\begin_inset Newline newline
\end_inset

@ 4.
 +list keyboard ;
\begin_inset Newline newline
\end_inset

: edit ( n ) [ blk ] @ [ blk d# 1 + ] ! [ blk ] !
\begin_inset Newline newline
\end_inset

: e watermark +e ; { br }
\begin_inset Newline newline
\end_inset

: -kbd ( -t ) 7push pop dup and drop ; }block
\begin_inset Newline newline
\end_inset

( 0020BC00 ) D# 47 shadow{ 
\begin_inset Newline newline
\end_inset

( logo, etc )
\begin_inset Newline newline
\end_inset

: logo ( displays colorforth logo )
\begin_inset Newline newline
\end_inset

: show ( background task executes following code repeatedly )
\begin_inset Newline newline
\end_inset

: keyboard ( displays keypad and stack )
\begin_inset Newline newline
\end_inset

: empty ( empty dictionary w/ empt display logo )
\begin_inset Newline newline
\end_inset

: wait ( while saving edi, in interrupt dead code artifact )
\begin_inset Newline newline
\end_inset

: list ( displays the given block without entering the editor.
 ) { br }
\begin_inset Newline newline
\end_inset

: -kbd ( returns true/nonzero flag if a word that calls it is being
\begin_inset Newline newline
\end_inset

interpreted from a block as opposed to from the keyboard.
 use with
\begin_inset Newline newline
\end_inset

caution from deep within an app that might have monkeyed with register {
 000000EF } )
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0020C000 ) D# 48 code{ 
\begin_inset Newline newline
\end_inset

( dump ) [ empty ] :# x 67153136 :# y -79636688
\begin_inset Newline newline
\end_inset

: 5-8 d# 8 /mod d# 32 /mod d# 32 /mod h# 00000100 * + h# 00000100 *
\begin_inset Newline newline
\end_inset

+ h# 00000100 * swap d# 4 * + ;
\begin_inset Newline newline
\end_inset

: one dup @ dup 5-8 h.
 space h.
 space dup h.
 cr ;
\begin_inset Newline newline
\end_inset

: lines for one d# -1 + next drop ;
\begin_inset Newline newline
\end_inset

: dump [ x ] !
\begin_inset Newline newline
\end_inset

: r show black screen [ x ] @ d# 15 + d# 16 text lines keyboard ;
\begin_inset Newline newline
\end_inset

: it @ + @ dup h.
 space ;
\begin_inset Newline newline
\end_inset

: lines for white i [ x ] it i [ y ] it or drop if red then i .
 cr
\begin_inset Newline newline
\end_inset

-next ;
\begin_inset Newline newline
\end_inset

: cmp show blue screen text d# 19 lines red [ x ] @ h.
 space [ y ]
\begin_inset Newline newline
\end_inset

@ h.
 keyboard ;
\begin_inset Newline newline
\end_inset

: u d# 16
\begin_inset Newline newline
\end_inset

: +xy dup [ x ] +! [ y ] +! ;
\begin_inset Newline newline
\end_inset

: d d# -16 +xy ;
\begin_inset Newline newline
\end_inset

: ati H# F4100000 ( ff7fc000 ) or ( agp graphics reg )
\begin_inset Newline newline
\end_inset

: byte d# 4 / dump ;
\begin_inset Newline newline
\end_inset

: fix for d# 0 over ! d# 1 + next ; [ dump ] }block
\begin_inset Newline newline
\end_inset

( 0020C400 ) D# 49 shadow{ 
\begin_inset Newline newline
\end_inset

( does not say empty, compiles on top of application )
\begin_inset Newline newline
\end_inset

: x -a ( current address )
\begin_inset Newline newline
\end_inset

: one a-a ( line of display )
\begin_inset Newline newline
\end_inset

: lines an
\begin_inset Newline newline
\end_inset

: dump a ( background task continually displays memory --- takes address
\begin_inset Newline newline
\end_inset

-- displays three cols with address on right contents in middle and-
\begin_inset Newline newline
\end_inset

the left col is g18 instruction view )
\begin_inset Newline newline
\end_inset

: u ( increment address )
\begin_inset Newline newline
\end_inset

: d ( decrement )
\begin_inset Newline newline
\end_inset

: ati ( address of agp graphic registers )
\begin_inset Newline newline
\end_inset

: byte a ( byte address dump )
\begin_inset Newline newline
\end_inset

: fix an-a ( test word ) }block
\begin_inset Newline newline
\end_inset

( 0020C800 ) D# 50 code{ 
\begin_inset Newline newline
\end_inset

( timing greg ) :# tmt 286630312 :# tmn -162350156 :# tmp 64245270
\begin_inset Newline newline
\end_inset

:# secs 0
\begin_inset Newline newline
\end_inset

: tmclr d# 0 [ tmt ] ! d# 0 [ tmn ] ! d# 0 [ tmp ] ! d# 0 [ secs ]
\begin_inset Newline newline
\end_inset

! ;
\begin_inset Newline newline
\end_inset

: tms ( a ) time - [ d# 1 ] + swap +! ;
\begin_inset Newline newline
\end_inset

: tme ( a ) time swap +! ;
\begin_inset Newline newline
\end_inset

: tare [ tmt ] tms pause [ tmt ] tme ;
\begin_inset Newline newline
\end_inset

: 0tare [ tmn ] tms switch [ tmn ] tme ;
\begin_inset Newline newline
\end_inset

: counter utime negate [ secs ] +! ;
\begin_inset Newline newline
\end_inset

: timer utime [ secs ] +! ; }block
\begin_inset Newline newline
\end_inset

( 0020CC00 ) D# 51 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0020D000 ) D# 52 code{ 
\begin_inset Newline newline
\end_inset

( format floppy ) [ empty ] :# hd 1 :# ad 152338
\begin_inset Newline newline
\end_inset

: array pop 2/ 2/ ;
\begin_inset Newline newline
\end_inset

: com align array [ H# 1202004D , h# 0000006C 2, ]
\begin_inset Newline newline
\end_inset

: word ( n ) [ ad ] @ ! d# 1 [ ad ] +! ;
\begin_inset Newline newline
\end_inset

: sectors ( cs-c ) buffer [ ad ] ! d# 18 for over [ hd ] @ h# 00000100
\begin_inset Newline newline
\end_inset

* + over d# 18 mod d# 1 + h# 00010000 * + h# 02000000 + word d# 1
\begin_inset Newline newline
\end_inset

+ next drop ;
\begin_inset Newline newline
\end_inset

: head ( ch-c ) dup [ hd ] ! h# 00000400 * H# 1202004D + [ com ] !
\begin_inset Newline newline
\end_inset

dup 2* - d# 1801 + sectors format ;
\begin_inset Newline newline
\end_inset

: cylinders ( n ) push [ com ] d# 0 pop for d# 0 head d# 1 head d# 1
\begin_inset Newline newline
\end_inset

+ next ( stop ) drop drop ;
\begin_inset Newline newline
\end_inset

: format ( nc @ ) d# 80 cylinders stop ;
\begin_inset Newline newline
\end_inset

: archive [ d# 0 block ] d# 0 [ nc ] @ writes stop ;
\begin_inset Newline newline
\end_inset

: check [ d# 3000 block ] d# 0 [ nc ] @ reads stop ;
\begin_inset Newline newline
\end_inset

: ati H# 10CD4123 [ vesa ] ! ; ( setup for ati video card )
\begin_inset Newline newline
\end_inset

: nvidia H# 10CD4118 [ vesa ] ! ; ( for nvidia card then save ) }block
\begin_inset Newline newline
\end_inset

( 0020D400 ) D# 53 shadow{ 
\begin_inset Newline newline
\end_inset

: format ( issue format command 30 cyl - in kernel )
\begin_inset Newline newline
\end_inset

: hd ( disk head )
\begin_inset Newline newline
\end_inset

: ad ( current address in ) buffer
\begin_inset Newline newline
\end_inset

: buffer ( usual floppy cylinder buffer )
\begin_inset Newline newline
\end_inset

: array ( return word address )
\begin_inset Newline newline
\end_inset

: com ( format command )
\begin_inset Newline newline
\end_inset

: word ( store word into command string )
\begin_inset Newline newline
\end_inset

: sectors ( build sector table )
\begin_inset Newline newline
\end_inset

: head ( build sectors for selected head )
\begin_inset Newline newline
\end_inset

: cylinders ( sectors advance 1 for each cylinder - to allow time for
\begin_inset Newline newline
\end_inset

head step )
\begin_inset Newline newline
\end_inset

: format ( only desired cylinders to save time )
\begin_inset Newline newline
\end_inset

: bytes ( arguments for crc )
\begin_inset Newline newline
\end_inset

: archive ( verify save' compute crc, save, read-back, recompute crc
\begin_inset Newline newline
\end_inset

- first 64 bytes used by floppy read/write -- the two crc numbers
\begin_inset Newline newline
\end_inset

should be the same ! ) }block
\begin_inset Newline newline
\end_inset

( 0020D800 ) D# 54 code{ 
\begin_inset Newline newline
\end_inset

( icons ) [ empty macro ]
\begin_inset Newline newline
\end_inset

: @w h# 00008B66 3, ;
\begin_inset Newline newline
\end_inset

: !w < a! > h# 00028966 3, < drop > ;
\begin_inset Newline newline
\end_inset

: *byte h# 0000C486 2, ; [ forth ] :# ic 53 :# cu 169
\begin_inset Newline newline
\end_inset

: sq [ xy ] @ h# 00010000 /mod d# 16 + swap d# 16 + box { cr }
\begin_inset Newline newline
\end_inset

d# 17 d# 0 +at ;
\begin_inset Newline newline
\end_inset

: loc [ ic ] @ [ d# 16 d# 24 d# 8 */ ] * [ d# 12 block d# 4 * ] + ;
\begin_inset Newline newline
\end_inset

: 0/1 h# 00008000 ? if green sq ; then blue sq ;
\begin_inset Newline newline
\end_inset

: row dup @w *byte d# 16 for 0/1 2* next drop { cr }
\begin_inset Newline newline
\end_inset

[ d# -17 d# 16 * ] d# 17 +at ;
\begin_inset Newline newline
\end_inset

: ikon loc d# 24 for row d# 2 + next drop ;
\begin_inset Newline newline
\end_inset

: adj d# 17 * swap ;
\begin_inset Newline newline
\end_inset

: cursor [ cu ] @ d# 16 /mod adj adj over over at { cr }
\begin_inset Newline newline
\end_inset

red d# 52 u+ d# 52 + box ;
\begin_inset Newline newline
\end_inset

: line ( i-in ) for dup emit d# 1 + next ;
\begin_inset Newline newline
\end_inset

: set ( xy ) over lm at d# 0 d# 10 for d# 12 line cr next { cr }
\begin_inset Newline newline
\end_inset

d# 8 line drop ;
\begin_inset Newline newline
\end_inset

: ok show black screen cursor d# 18 dup at ikon { cr }
\begin_inset Newline newline
\end_inset

text [ ic ] @ .
 d# 400 d# 60 set keyboard ; [ d# 56 load ok h ] }block
\begin_inset Newline newline
\end_inset

( 0020DC00 ) D# 55 shadow{ 
\begin_inset Newline newline
\end_inset

( draw big-bits icon )
\begin_inset Newline newline
\end_inset

: @w a-n ( fetch 16-bit word from byte address )
\begin_inset Newline newline
\end_inset

: !w na ( store same )
\begin_inset Newline newline
\end_inset

: *byte n-n ( swap bytes )
\begin_inset Newline newline
\end_inset

: ic -a ( current icon )
\begin_inset Newline newline
\end_inset

: cu -a ( cursor )
\begin_inset Newline newline
\end_inset

: sq ( draw small square )
\begin_inset Newline newline
\end_inset

: xy -a ( current screen position, set by ) at
\begin_inset Newline newline
\end_inset

: loc -a ( location of current icons bit-map )
\begin_inset Newline newline
\end_inset

: 0/1 n-n ( color square depending on bit 15 )
\begin_inset Newline newline
\end_inset

: row a-a ( draw row of icon )
\begin_inset Newline newline
\end_inset

: ikon ( draw big-bits icon )
\begin_inset Newline newline
\end_inset

: adj nn-nn ( magnify cursor position )
\begin_inset Newline newline
\end_inset

: cursor ( draw red box for cursor )
\begin_inset Newline newline
\end_inset

: ok ( background task to continually draw icon, icon number at top )
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0020E000 ) D# 56 code{ 
\begin_inset Newline newline
\end_inset

( edit character set application )
\begin_inset Newline newline
\end_inset

: +ic d# 1 [ ic ] +! ;
\begin_inset Newline newline
\end_inset

: -ic [ ic ] @ d# -1 + d# 0 max [ ic ] ! ;
\begin_inset Newline newline
\end_inset

: bit [ cu ] @ 2/ 2/ 2/ 2/ 2* loc + h# 00010000 [ cu ] @ h# 0000000F
\begin_inset Newline newline
\end_inset

and d# 1 + for 2/ next *byte ;
\begin_inset Newline newline
\end_inset

: toggle bit over @w or swap !w ;
\begin_inset Newline newline
\end_inset

: td toggle
\begin_inset Newline newline
\end_inset

: d d# 16
\begin_inset Newline newline
\end_inset

: wrap [ cu ] @ + [ d# 16 d# 24 * ] dup u+ /mod drop [ cu ] ! ;
\begin_inset Newline newline
\end_inset

: tu toggle
\begin_inset Newline newline
\end_inset

: u d# -16 wrap ;
\begin_inset Newline newline
\end_inset

: tr toggle
\begin_inset Newline newline
\end_inset

: r d# 1 wrap ;
\begin_inset Newline newline
\end_inset

: tl toggle
\begin_inset Newline newline
\end_inset

: l d# -1 wrap ;
\begin_inset Newline newline
\end_inset

: h pad nul nul accept nul tl tu td tr l u d r -ic nul nul +ic nul
\begin_inset Newline newline
\end_inset

nul nul nul nul nul nul nul nul nul nul nul [ h# 00002500 , h# 0110160C
\begin_inset Newline newline
\end_inset

dup , , H# 2B000023 , d# 0 , d# 0 , d# 0 , ] }block
\begin_inset Newline newline
\end_inset

( 0020E400 ) D# 57 shadow{ 
\begin_inset Newline newline
\end_inset

( edit icon ) }block
\begin_inset Newline newline
\end_inset

( 0020E800 ) D# 58 code{ 
\begin_inset Newline newline
\end_inset

( lan ) [ empty h# 000003F8 d# 60 load init ]
\begin_inset Newline newline
\end_inset

: no block d# 4 * d# 1024 ;
\begin_inset Newline newline
\end_inset

: send no for dup 1@ xmit d# 1 + next drop ;
\begin_inset Newline newline
\end_inset

: receive no for rcv over 1! d# 1 + next drop ;
\begin_inset Newline newline
\end_inset

: no d# 18 [ d# 7 d# 18 * ] ;
\begin_inset Newline newline
\end_inset

: backup no for dup send d# 1 + next drop ;
\begin_inset Newline newline
\end_inset

: accept no for dup receive d# 1 + next drop ; }block
\begin_inset Newline newline
\end_inset

( 0020EC00 ) D# 59 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0020F000 ) D# 60 code{ 
\begin_inset Newline newline
\end_inset

( serial 3f8 2e8 1050 ) [ macro ]
\begin_inset Newline newline
\end_inset

: p@ < a! dup > h# 000000EC 1, ;
\begin_inset Newline newline
\end_inset

: p! < a! > h# 000000EE 1, < drop > ;
\begin_inset Newline newline
\end_inset

: 1@ h# 0000008A 2, ;
\begin_inset Newline newline
\end_inset

: 1! < a! > h# 00000288 2, < drop > ; [ forth ]
\begin_inset Newline newline
\end_inset

: r [ d# 0 + ] + ;
\begin_inset Newline newline
\end_inset

: 9600 d# 12 ;
\begin_inset Newline newline
\end_inset

: 115200 d# 1 ;
\begin_inset Newline newline
\end_inset

: b/s h# 00000083 [ d# 3 r ] p! d# 115200 [ d# 0 r ] p! d# 0 [ d# 1
\begin_inset Newline newline
\end_inset

r ] p! d# 3 [ d# 3 r ] p! ;
\begin_inset Newline newline
\end_inset

: init b/s ( 16550 ) d# 1 [ d# 2 r ] p! d# 0 [ d# 4 r ] p! ;
\begin_inset Newline newline
\end_inset

: xmit ( n ) [ d# 5 r ] p@ h# 00000020 and drop if [ d# 0 r ] p! ;
\begin_inset Newline newline
\end_inset

then ( pause ) xmit ;
\begin_inset Newline newline
\end_inset

: cts [ d# 6 r ] p@ h# 00000030 and h# 00000030 or drop if cts ; then
\begin_inset Newline newline
\end_inset

xmit ;
\begin_inset Newline newline
\end_inset

: st [ d# 6 r ] p@
\begin_inset Newline newline
\end_inset

: xbits h# 00000030 and h# 00000010 / dup d# 1 and 2* 2* + 2/ ;
\begin_inset Newline newline
\end_inset

: st! [ d# 4 r ] p! ;
\begin_inset Newline newline
\end_inset

: ?rcv [ d# 5 r ] p@ d# 1 and drop if [ d# 0 r ] p@ then ;
\begin_inset Newline newline
\end_inset

: rcv ?rcv if ; then ( pause ) rcv ; }block
\begin_inset Newline newline
\end_inset

( 0020F400 ) D# 61 shadow{ 
\begin_inset Newline newline
\end_inset

: p@ p-n ( fetch byte from port )
\begin_inset Newline newline
\end_inset

: p! np ( store byte to port )
\begin_inset Newline newline
\end_inset

: 1@ a-n ( fetch byte from byte address )
\begin_inset Newline newline
\end_inset

: 1! na ( store byte to byte address )
\begin_inset Newline newline
\end_inset

: r n-p ( convert relative to absolute port address.
 base port on stack
\begin_inset Newline newline
\end_inset

at compile time.
 compiled as literal at yellow-green transition )
\begin_inset Newline newline
\end_inset

: 9600
\begin_inset Newline newline
\end_inset

: 115200 ( baud-rate divisors.
 these are names, not numbers )
\begin_inset Newline newline
\end_inset

: b/s ( set baud rate.
 edit to change )
\begin_inset Newline newline
\end_inset

: init ( initialize uart )
\begin_inset Newline newline
\end_inset

: xmit n ( wait for ready and transmit byte )
\begin_inset Newline newline
\end_inset

: cts n ( wait for clear-to-send then xmit )
\begin_inset Newline newline
\end_inset

: st -n ( fetch status byte )
\begin_inset Newline newline
\end_inset

: xbits n-n ( exchange status bits )
\begin_inset Newline newline
\end_inset

: st! n ( store control byte )
\begin_inset Newline newline
\end_inset

: ?rcv ( fetch byte if ready.
 set flag to be tested by ) if
\begin_inset Newline newline
\end_inset

: rcv -n ( wait for ready and fetch byte ) }block
\begin_inset Newline newline
\end_inset

( 0020F800 ) D# 62 code{ 
\begin_inset Newline newline
\end_inset

( word search tcurs ) [ macro ]
\begin_inset Newline newline
\end_inset

: bt ( nm-n ) [ H# 068BD08B ] , [ H# 0F04768D ] , [ H# D21BC2A3 ] ,
\begin_inset Newline newline
\end_inset

; [ forth ]
\begin_inset Newline newline
\end_inset

: t2 ( nn-nn ) d# 1 +
\begin_inset Newline newline
\end_inset

: t1 ( nn-nn ) d# 1 [ curs ] +!
\begin_inset Newline newline
\end_inset

: t0 ( nn-nn ) d# 1 + ;
\begin_inset Newline newline
\end_inset

: map ( nnn-nn ) h# 0000000F and jump t0 t1 t2 t1 t1 t2 t1 t1 t1 t1
\begin_inset Newline newline
\end_inset

t1 t1 t2 t1 t1 t1
\begin_inset Newline newline
\end_inset

: tcurs ( nn-n ) over block push d# -1 [ curs ] ! d# 0
\begin_inset Newline newline
\end_inset

: tcu1 ( nnn-n ) dup i + @ map over over negate + drop -if t1 drop
\begin_inset Newline newline
\end_inset

drop pop drop ; then tcu1 ;
\begin_inset Newline newline
\end_inset

: -curs ( - ) [ curs ] @ d# -1 + d# 0 max [ curs ] ! ; [ here ]
\begin_inset Newline newline
\end_inset

: tpoint [ blk ] @ [ curs ] @ tcurs drop -curs ; [ cpoint ! ] }block
\begin_inset Newline newline
\end_inset

( 0020FC00 ) D# 63 shadow{ 
\begin_inset Newline newline
\end_inset

( word search tcurs )
\begin_inset Newline newline
\end_inset

: bt ( returns nz and less if bit n of m is set.
 pops t to 2, bit test
\begin_inset Newline newline
\end_inset

index t mask 2, 2-2-sbb to set nz if carry.
 )
\begin_inset Newline newline
\end_inset

: t2 nn-nn ( 2 cell - big nums, var )
\begin_inset Newline newline
\end_inset

: t1 nn-nn ( 1 cell )
\begin_inset Newline newline
\end_inset

: t0 nn-nn ( extensions, undefined )
\begin_inset Newline newline
\end_inset

: map end n wrd-end n ( inc n and maybe curs )
\begin_inset Newline newline
\end_inset

: tcurs blk offset-blk ( convert offset to tokens in curs )
\begin_inset Newline newline
\end_inset

: -curs - ( decrement curs to zero )
\begin_inset Newline newline
\end_inset

: tpoint - ( fix abort to point cursor correctly, except if last word
\begin_inset Newline newline
\end_inset

in block ) }block
\begin_inset Newline newline
\end_inset

( 00210000 ) D# 64 code{ 
\begin_inset Newline newline
\end_inset

( word search ) :# fmask -16 :# fnn -403177453 :# fna 67146240 :# fbits
 16530
\begin_inset Newline newline
\end_inset

[ d# 18 block fna ! ]
\begin_inset Newline newline
\end_inset

: tag? ( nm-n ) over h# 0000000F and swap bt drop ;
\begin_inset Newline newline
\end_inset

: +shad ( a-a ) dup [ fna ] @ or d# 256 and + ;
\begin_inset Newline newline
\end_inset

: 1word ( -n ) word [ words ] @
\begin_inset Newline newline
\end_inset

: 1wz d# 2 less drop if drop ; then nip d# -1 + 1wz ;
\begin_inset Newline newline
\end_inset

: want? ( nm-n ) tag? if or ; then drop drop d# -1 ;
\begin_inset Newline newline
\end_inset

: find 1word h# 00005E9A
\begin_inset Newline newline
\end_inset

: fnd+ d# 18 block d# -16
\begin_inset Newline newline
\end_inset

: fnd ( nbam ) [ fmask ] ! [ fna ] ! [ fbits ] ! d# 16 or [ fnn ] !
\begin_inset Newline newline
\end_inset

: f [ fnn ] @ d# 16 or [ fna ] @ begin +shad [ nblk ] @ block less
\begin_inset Newline newline
\end_inset

drop while over over @ [ fbits ] @ want? [ fmask ] @ and drop while
\begin_inset Newline newline
\end_inset

d# 1 + end then dup d# 1 + [ fna ] ! nip h# 00000100 /mod -offset
\begin_inset Newline newline
\end_inset

swap tcurs edit ; then drop drop ;
\begin_inset Newline newline
\end_inset

: red? ( n-nm ) [ h# 00001008 ] tag? if [ h# 00004092 ] ; then [ h# 00001008
 ]
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset

: def 1word [ h# 00001008 ] fnd+ ; [ here ekt d# 21 + ! ]
\begin_inset Newline newline
\end_inset

: fkc drop ( drop ) [ pcad ] @ @ [ h# 00000140 ] tag? if [ d# 32 ]
\begin_inset Newline newline
\end_inset

/ edit ; then red? fnd+ ( blk @ ) dup ; [ here ekt d# 22 + ! ]
\begin_inset Newline newline
\end_inset

: fk drop ( drop ) [ cad ] @ [ fna ] ! f ( blk @ ) dup ;
\begin_inset Newline newline
\end_inset

: from ( n- ) 1word swap [ h# 00005E9A ] swap block [ d# -16 ] fnd
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset

: literal ( n- ) h# 00000020 * [ h# 00000140 ] d# 18 block [ d# -32 ]
\begin_inset Newline newline
\end_inset

fnd ; }block
\begin_inset Newline newline
\end_inset

( 00210400 ) D# 65 shadow{ 
\begin_inset Newline newline
\end_inset

( word search )
\begin_inset Newline newline
\end_inset

: tag? ( nz and less if bit in m indexed by tag of token n is 1.
 )
\begin_inset Newline newline
\end_inset

: +shad ( skips shadows if in one and skipping.
 )
\begin_inset Newline newline
\end_inset

: 1word -n ( return 1st cell of word from kbd.
 )
\begin_inset Newline newline
\end_inset

: find ( finds following short word, starting in block 18, regardless
\begin_inset Newline newline
\end_inset

of color.
 )
\begin_inset Newline newline
\end_inset

: def ( finds only definitions.
 )
\begin_inset Newline newline
\end_inset

: f ( find next occurrence of word last found )
\begin_inset Newline newline
\end_inset

: fk ( 'f' key in edit keyboard.
 drops key and block number and behaves
\begin_inset Newline newline
\end_inset

like f except continues search from current editor position in current
\begin_inset Newline newline
\end_inset

kind of block src/shad.
 )
\begin_inset Newline newline
\end_inset

: fkc ( if word left of cursor is a number, list that block.
 if red
\begin_inset Newline newline
\end_inset

or magenta definition, searches for references.
 otherwise searches
\begin_inset Newline newline
\end_inset

for definitions.
 )
\begin_inset Newline newline
\end_inset

: from n- ( like find but start from block number )
\begin_inset Newline newline
\end_inset

: literal n- ( finds any equivalent literal ) }block
\begin_inset Newline newline
\end_inset

( 00210800 ) D# 66 code{ 
\begin_inset Newline newline
\end_inset

( editor recolor ) [ d# 8 display + @ d# 13 display + ! ]
\begin_inset Newline newline
\end_inset

: array pop 2/ 2/ + @ ; ( 1-4-9 2-5 8-6-15 )
\begin_inset Newline newline
\end_inset

: reclr align array { cr }
\begin_inset Newline newline
\end_inset

[ d# 0 , d# 4 , d# 5 , d# 3 , d# 9 , d# 2 , d# 15 , d# 7 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 6 , d# 1 , d# 10 , d# 11 , d# 12 , d# 13 , d# 14 , d# 8 , ]
\begin_inset Newline newline
\end_inset

: wadr ( -a ) [ pcad ] @ [ blk ] @ max ; [ here ekt d# 20 + ! ]
\begin_inset Newline newline
\end_inset

: change wadr @ h# 0000000F and reclr wadr @ h# FFFFFFF0 and or wadr
\begin_inset Newline newline
\end_inset

! ; [ H# 220E100A ekt d# 33 + ! ] }block
\begin_inset Newline newline
\end_inset

( 00210C00 ) D# 67 shadow{ 
\begin_inset Newline newline
\end_inset

( tags ) { cr }
\begin_inset Newline newline
\end_inset

( extend ) [ execute 32-bit ] ( define ) { cr }
\begin_inset Newline newline
\end_inset

compile 32-bit [ 27-bit ] < immediate > { cr }
\begin_inset Newline newline
\end_inset

27-bit ( comment cap caps ) { cr }
\begin_inset Newline newline
\end_inset

( variable address blue 27-bit ) { br }
\begin_inset Newline newline
\end_inset

: array ( fetch new tag )
\begin_inset Newline newline
\end_inset

: reclr ( table of color cycles )
\begin_inset Newline newline
\end_inset

: wadr -a ( address of word to left of cursor )
\begin_inset Newline newline
\end_inset

: change ( color of word to left of cursor )
\begin_inset Newline newline
\end_inset

: 220e100a ( 0a-c 10-d 0e-f 22-j ) }block
\begin_inset Newline newline
\end_inset

( 00211000 ) D# 68 code{ 
\begin_inset Newline newline
\end_inset

( blue words )
\begin_inset Newline newline
\end_inset

: -w@ ( -n ) 7push pop d# -1 + @ ;
\begin_inset Newline newline
\end_inset

: ?xqt -w@ d# -16 and itick if drop ; then push ;
\begin_inset Newline newline
\end_inset

: @lit -w@ d# 32 / ; [ here display d# 13 + ! ]
\begin_inset Newline newline
\end_inset

: tadr h# 00C0C0C0 color @lit d# 3 h.n space ;
\begin_inset Newline newline
\end_inset

: blu h# 000000FF color
\begin_inset Newline newline
\end_inset

: type1 [ d# 9 display + @ d# 5 + ] push ;
\begin_inset Newline newline
\end_inset

: d14 [ d# 14 display + ] ; [ here d14 ! ]
\begin_inset Newline newline
\end_inset

: exb blu { 0000002F } ( sp + @ push ) ?xqt ;
\begin_inset Newline newline
\end_inset

: tab ( n ) for space next ;
\begin_inset Newline newline
\end_inset

: indent cr d# 5 tab ;
\begin_inset Newline newline
\end_inset

: br cr cr ;
\begin_inset Newline newline
\end_inset

: sp/2 h# 000B0000 [ xy ] +! ;
\begin_inset Newline newline
\end_inset

: d03 ( -a ) [ d# 3 display + ] ; [ here ]
\begin_inset Newline newline
\end_inset

: exr [ d03 @ ] nop [ d03 ] ! space red type1 ;
\begin_inset Newline newline
\end_inset

: -cr [ d# 0 + ] nop [ d03 ] ! ;
\begin_inset Newline newline
\end_inset

: seeb [ d14 ] @ [ d14 @ dup d# 5 + or ] or [ d14 ] ! ;
\begin_inset Newline newline
\end_inset

: ?seeb ( -t ) [ d14 ] @ [ d14 @ d# 5 + ] or drop ; [ seeb ] }block
\begin_inset Newline newline
\end_inset

( 00211400 ) D# 69 shadow{ 
\begin_inset Newline newline
\end_inset

: ?xqt ( executes the word just passed over if it exists in the dictionary.
 )
\begin_inset Newline newline
\end_inset

: @lit ( fetch 27-bit literal )
\begin_inset Newline newline
\end_inset

: tadr ( display target address )
\begin_inset Newline newline
\end_inset

: blu ( display blue word )
\begin_inset Newline newline
\end_inset

: d14 ( tag 14 display entry )
\begin_inset Newline newline
\end_inset

: exb ( display and execute blue word if found.
 )
\begin_inset Newline newline
\end_inset

: tab ( advance n spaces )
\begin_inset Newline newline
\end_inset

: indent ( 5 spaces )
\begin_inset Newline newline
\end_inset

: br ( blank line )
\begin_inset Newline newline
\end_inset

: s/2 ( halfspace for reports.
 )
\begin_inset Newline newline
\end_inset

: -cr ( suppress cr on next red word.
 )
\begin_inset Newline newline
\end_inset

: seeb ( toggle display of blue words )
\begin_inset Newline newline
\end_inset

: ?seeb ( set flag non-zero if blue words visible ) }block
\begin_inset Newline newline
\end_inset

( 00211800 ) D# 70 code{ 
\begin_inset Newline newline
\end_inset

( convert colorforth character to/from ascii ) [ macro ]
\begin_inset Newline newline
\end_inset

: 1@ h# 0000008A 2, ; [ forth ]
\begin_inset Newline newline
\end_inset

: string pop ;
\begin_inset Newline newline
\end_inset

: cf-ii string [ H# 6F747200 , H# 696E6165 , H# 79636D73 , H# 7766676C
\begin_inset Newline newline
\end_inset

, H# 62707664 , H# 71757868 , ] ( 336a7a6b ) [ H# 33323130 , H# 37363534
\begin_inset Newline newline
\end_inset

, ] ( 2d313938 - 2d7a3938 ) [ H# 5F7A3938 , ] ( 2f322e30 ) [ H# 2F6A2E6B
\begin_inset Newline newline
\end_inset

, ] ( 2b213a3b ) [ H# 24213A3B , H# 3F2C2A40 , ]
\begin_inset Newline newline
\end_inset

: ch h# FFFFFFF0 and unpack [ cf-ii ] + 1@ h# 000000FF and ;
\begin_inset Newline newline
\end_inset

: ii-cf string [ h# 00002A00 , ] ( 0 + ) [ h# 0000002B , H# 2B2D0000
\begin_inset Newline newline
\end_inset

, H# 2725232E , ] ( zjk 1b262224 ) [ H# 1B1A1918 , H# 1F1E1D1C , H# 28292120
\begin_inset Newline newline
\end_inset

, H# 2F000000 , H# 3A43355C , H# 3D3E3440 , ] ( 02 484a3744 kj ) [
\begin_inset Newline newline
\end_inset

H# 54523744 , H# 3336393C , H# 38314742 , H# 3F414632 , ] ( 1 493b45
\begin_inset Newline newline
\end_inset

z ) [ h# 00563B45 , ] ( - ) [ H# 23000000 , H# 0A13052C , H# 0D0E0410
\begin_inset Newline newline
\end_inset

, ] ( 02 181a0714 kj ) [ H# 24220714 , h# 0306090C , H# 08011712 ,
\begin_inset Newline newline
\end_inset

H# 0F111602 , ] ( 1 190b15 z ) [ h# 00260B15 , ]
\begin_inset Newline newline
\end_inset

: chc h# FFFFFFE0 + [ ii-cf ] + 1@ h# 000000FF and ; }block
\begin_inset Newline newline
\end_inset

( 00211C00 ) D# 71 shadow{ 
\begin_inset Newline newline
\end_inset

( colorforth to ascii and ascii to colorforth ) [ to load, type c-a-c
\begin_inset Newline newline
\end_inset

not d# 54 load ]
\begin_inset Newline newline
\end_inset

: cf-ii ( otr inae ycms wfgl bpvd quxh 3210 7654 -j98 /z.k +!'; ?,*@ )
\begin_inset Newline newline
\end_inset

: ii-cf ( ! +* /.-, 3zjk 7654 ;'98 ? cba@ gfed 02ih onml srqp wvut
\begin_inset Newline newline
\end_inset

1yx cba@ gfed 02ih onml srqp wvut 1yx )
\begin_inset Newline newline
\end_inset

: notice [ j and z transposed in cf-ii; - converts to underscore, +
\begin_inset Newline newline
\end_inset

to dollar.
 ] }block
\begin_inset Newline newline
\end_inset

( 00212000 ) D# 72 code{ 
\begin_inset Newline newline
\end_inset

( convert cf character to/from ascii ) [ macro ]
\begin_inset Newline newline
\end_inset

: 1@ h# 0000008A 2, ;
\begin_inset Newline newline
\end_inset

: 1! < a! > h# 00000288 2, < drop > ; [ forth ]
\begin_inset Newline newline
\end_inset

: string pop ;
\begin_inset Newline newline
\end_inset

: cf-ii align string [ H# 6F747200 , H# 696E6165 , H# 79636D73 , H# 7766676C
\begin_inset Newline newline
\end_inset

, H# 62707664 , H# 71757868 , H# 33323130 , H# 37363534 , H# 2D6A3938
\begin_inset Newline newline
\end_inset

, H# 2F7A2E6B , H# 2B21273B , H# 3F2C2A40 , ]
\begin_inset Newline newline
\end_inset

: ch h# FFFFFFF0 and unpack [ cf-ii ] + 1@ h# 000000FF and ;
\begin_inset Newline newline
\end_inset

: ii-cf string [ h# 00002A00 , h# 0000002B , H# 2B2D0000 , H# 2725232E
\begin_inset Newline newline
\end_inset

, H# 1B1A1918 , H# 1F1E1D1C , H# 28292120 , H# 2F000000 , H# 3A43355C
\begin_inset Newline newline
\end_inset

, H# 3D3E3440 , H# 54523744 , H# 3336393C , H# 38314742 , H# 3F414632
\begin_inset Newline newline
\end_inset

, h# 00563B45 , H# 23000000 , H# 0A13052C , H# 0D0E0410 , H# 24220714
\begin_inset Newline newline
\end_inset

, h# 0306090C , H# 08011712 , H# 0F111602 , h# 00260B15 , ]
\begin_inset Newline newline
\end_inset

: chc h# FFFFFFE0 + [ ii-cf ] + 1@ h# 000000FF and ;
\begin_inset Newline newline
\end_inset

: set1 H# 3D21223A H# 3E2C203C
\begin_inset Newline newline
\end_inset

: !8 ( nn- ) [ cf-ii h# 0000002C + 2/ 2/ ] ! [ cf-ii h# 00000028 +
\begin_inset Newline newline
\end_inset

2/ 2/ ] ! ;
\begin_inset Newline newline
\end_inset

: set0 H# 2B21273B H# 3F2C2A40 !8 ; }block
\begin_inset Newline newline
\end_inset

( 00212400 ) D# 73 shadow{ 
\begin_inset Newline newline
\end_inset

( colorforth to ascii and ascii to colorforth )
\begin_inset Newline newline
\end_inset

: cf-ii ( otr inae ycms wfgl bpvd quxh 3210 7654 -j98 /z.k +!'; ?,*@ )
\begin_inset Newline newline
\end_inset

: ii-cf ( ! +* /.-, 3zjk 7654 ;'98 ? cba@ gfed 02ih onml srqp wvut
\begin_inset Newline newline
\end_inset

1yx cba@ gfed 02ih onml srqp wvut 1yx )
\begin_inset Newline newline
\end_inset

: set1 ( modifies cf-ii table.
 ) { cr }
\begin_inset Newline newline
\end_inset

( ; to colon, ' to doublequote, + to equal, ) { cr }
\begin_inset Newline newline
\end_inset

( @ to lessthan, * to blank, ? to greaterthan )
\begin_inset Newline newline
\end_inset

: set0 ( converts back to ascii.
 ) }block
\begin_inset Newline newline
\end_inset

( 00212800 ) D# 74 code{ 
\begin_inset Newline newline
\end_inset

( pathname input ) [ d# 72 load set1 ]
\begin_inset Newline newline
\end_inset

: strng ( n-a ) pop + ;
\begin_inset Newline newline
\end_inset

: fnam ( n-a ) align strng [ here d# 80 + h ! ] :# hld 8
\begin_inset Newline newline
\end_inset

: emt ( n- ) [ hld ] @ fnam 1! d# 1 [ hld ] +! ;
\begin_inset Newline newline
\end_inset

: +shan ch emt dup and if +shan ; then drop ; { br }
\begin_inset Newline newline
\end_inset

: ,src 7@+ @
\begin_inset Newline newline
\end_inset

: xx dup and if +shan 7@+ @ dup d# 15 and drop { cr }
\begin_inset Newline newline
\end_inset

while then [ d# 0 ] and emt 7dec ; then xx ;
\begin_inset Newline newline
\end_inset

: named ( string ) d# 0 [ hld ] ! -kbd if ,src ; { cr }
\begin_inset Newline newline
\end_inset

then ( keyboard ) d# 0 word d# 0 { cr }
\begin_inset Newline newline
\end_inset

begin push dup and while end then drop { cr }
\begin_inset Newline newline
\end_inset

begin pop dup and while +shan end then emt ; { cr }
\begin_inset Newline newline
\end_inset

[ exit ] ( testing )
\begin_inset Newline newline
\end_inset

: ccc dup 1@ d# 255 and swap d# 1 + ; { cr }
\begin_inset Newline newline
\end_inset

[ named ] ( //./a; ) }block
\begin_inset Newline newline
\end_inset

( 00212C00 ) D# 75 shadow{ 
\begin_inset Newline newline
\end_inset

( filename input )
\begin_inset Newline newline
\end_inset

: strng ( defines an array of bytes.
 )
\begin_inset Newline newline
\end_inset

: fnam ( is a zero terminated ascii string consisting of ) hld ( chars
\begin_inset Newline newline
\end_inset

including the null.
 ) emt ( appends a character to this string.
 )
\begin_inset Newline newline
\end_inset

: +shan ( appends a shannon word to fnam.
 ) { br }
\begin_inset Newline newline
\end_inset

: named ( returns the byte address of a null terminated ascii string
\begin_inset Newline newline
\end_inset

representing the following colorforth string, which may follow in
\begin_inset Newline newline
\end_inset

either source code or in keyboard input.
 ) { br }
\begin_inset Newline newline
\end_inset

: inam ( accept filename input from keyboard, store zero terminated
\begin_inset Newline newline
\end_inset

ascii string to fnam, and return byte address of fnam.
 ) }block
\begin_inset Newline newline
\end_inset

( 00213000 ) D# 76 code{ 
\begin_inset Newline newline
\end_inset

( index ) [ empty ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 72 load ] { cr }
\begin_inset Newline newline
\end_inset

:# hld 401 [ d# 0 hld ! ] :# spot 2 [ d# 0 spot ! ]
\begin_inset Newline newline
\end_inset

: nxt ( a-an ) dup d# 1 + swap @ ;
\begin_inset Newline newline
\end_inset

: emit ( c ) [ spot ] @ [ d# -72 ] + drop -if [ hld ] @ [ d# 3000 block
\begin_inset Newline newline
\end_inset

d# 4 * ] + 1! d# 1 [ hld ] +! d# 1 [ spot ] +! ; then drop ;
\begin_inset Newline newline
\end_inset

: space d# 32 emit ;
\begin_inset Newline newline
\end_inset

: crlf d# 0 [ spot ] ! d# 13 emit d# 10 emit ;
\begin_inset Newline newline
\end_inset

: digit ( n ) [ d# -10 ] + -if [ h# 0000003A ] + emit ; then [ h# 00000041
 ]
\begin_inset Newline newline
\end_inset

+ emit ;
\begin_inset Newline newline
\end_inset

: .h ( n ) space [ d# -1 ] swap { cr }
\begin_inset Newline newline
\end_inset

begin dup [ h# 0000000F ] and swap 2/ 2/ 2/ 2/ { cr }
\begin_inset Newline newline
\end_inset

H# 0FFFFFFF and while end then drop { cr }
\begin_inset Newline newline
\end_inset

[ d# 0 ] + -if drop d# 0 digit ; then
\begin_inset Newline newline
\end_inset

: spit [ d# 0 ] + -if drop ; then digit spit ;
\begin_inset Newline newline
\end_inset

: .d ( n ) space [ d# 0 ] + -if h# 0000002D emit negate then [ d# -1 ]
\begin_inset Newline newline
\end_inset

swap begin [ d# 10 ] /mod dup and while end then { cr }
\begin_inset Newline newline
\end_inset

drop spit ; { cr }
\begin_inset Newline newline
\end_inset

[ d# 78 load ] }block
\begin_inset Newline newline
\end_inset

( 00213400 ) D# 77 shadow{ 
\begin_inset Newline newline
\end_inset

( index )
\begin_inset Newline newline
\end_inset

: hld ( place in file )
\begin_inset Newline newline
\end_inset

: spot ( in line )
\begin_inset Newline newline
\end_inset

: nxt ( fetch next word )
\begin_inset Newline newline
\end_inset

: emit ( ascii character, won't go past column { 0000090F } )
\begin_inset Newline newline
\end_inset

: space ( written to file )
\begin_inset Newline newline
\end_inset

: crlf ( to file )
\begin_inset Newline newline
\end_inset

: digit ( hex digit to file )
\begin_inset Newline newline
\end_inset

: .h ( print hex number )
\begin_inset Newline newline
\end_inset

: .d ( decimal number ) }block
\begin_inset Newline newline
\end_inset

( 00213800 ) D# 78 code{ 
\begin_inset Newline newline
\end_inset

( index.1 )
\begin_inset Newline newline
\end_inset

: short ( n ) 2/ 2/ 2/ 2/ dup d# 1 and drop { cr }
\begin_inset Newline newline
\end_inset

if 2/ .h ; then 2/ .d ;
\begin_inset Newline newline
\end_inset

: literal ( an-a ) push nxt pop h# 00000010 and drop { cr }
\begin_inset Newline newline
\end_inset

if .h ; then .d ;
\begin_inset Newline newline
\end_inset

: word ( n ) space [ h# FFFFFFF0 ] and
\begin_inset Newline newline
\end_inset

: cont ( n ) dup and if ch emit cont ; then drop ;
\begin_inset Newline newline
\end_inset

: variable ( an-a ) word nxt .d ;
\begin_inset Newline newline
\end_inset

: eol ( n ) drop pop drop pop drop drop ;
\begin_inset Newline newline
\end_inset

: tag ( a-a ) dup h# 0000000F and jump cont word literal { cr }
\begin_inset Newline newline
\end_inset

eol word literal short word short word { cr }
\begin_inset Newline newline
\end_inset

word word variable short word short
\begin_inset Newline newline
\end_inset

: words ( n ) for nxt tag next drop ;
\begin_inset Newline newline
\end_inset

: index ( 1st lst+1 ) d# 0 [ hld ] ! over negate + 2/ { cr }
\begin_inset Newline newline
\end_inset

for dup .d dup space block d# 10 words crlf { cr }
\begin_inset Newline newline
\end_inset

[ d# 2 ] + next drop
\begin_inset Newline newline
\end_inset

: sav [ d# 3000 block d# 4 * ] olog [ hld ] @ wlog clog ; }block
\begin_inset Newline newline
\end_inset

( 00213C00 ) D# 79 shadow{ 
\begin_inset Newline newline
\end_inset

( index.1 )
\begin_inset Newline newline
\end_inset

: short ( number )
\begin_inset Newline newline
\end_inset

: literal ( long number )
\begin_inset Newline newline
\end_inset

: word ( text, not number )
\begin_inset Newline newline
\end_inset

: cont ( inuation word )
\begin_inset Newline newline
\end_inset

: variable ( name and value )
\begin_inset Newline newline
\end_inset

: eol ( red word means end of line )
\begin_inset Newline newline
\end_inset

: tag ( vector table )
\begin_inset Newline newline
\end_inset

: words ( print maximum n words or to eol )
\begin_inset Newline newline
\end_inset

: index [ first-block last+1 ] { cr }
\begin_inset Newline newline
\end_inset

( prints first line of each block in range ) { cr }
\begin_inset Newline newline
\end_inset

( to a log file ) [ in windows ] }block
\begin_inset Newline newline
\end_inset

( 00214000 ) D# 80 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00214400 ) D# 81 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00214800 ) D# 82 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00214C00 ) D# 83 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00215000 ) D# 84 code{ 
\begin_inset Newline newline
\end_inset

( compress ) [ empty d# 86 load ]
\begin_inset Newline newline
\end_inset

: short d# 4 rbits d# 28 bits ;
\begin_inset Newline newline
\end_inset

: literal d# 4 rbits 2/ 2/ 2/ 2/ d# 1 rbits
\begin_inset Newline newline
\end_inset

: 32bits drop d# 1 + dup @ d# 16 bits d# 16 bits ;
\begin_inset Newline newline
\end_inset

: variable 1word 32bits ;
\begin_inset Newline newline
\end_inset

: /whit ( n-n ) d# -16 and d# 9 or word ;
\begin_inset Newline newline
\end_inset

: tag ( an-an ) dup h# 0000000F and jump cont word literal word word
\begin_inset Newline newline
\end_inset

literal short word short word /whit /whit variable short word short
\begin_inset Newline newline
\end_inset

: words ( a ) dup @ dup and if tag drop d# 1 + words ; then d# 4 bits
\begin_inset Newline newline
\end_inset

drop drop ;
\begin_inset Newline newline
\end_inset

: range ( nn-an ) here/4 here4 push new for dup block words d# 1 +
\begin_inset Newline newline
\end_inset

next drop 0 d# 31 bits drop pop here4 over negate + ;
\begin_inset Newline newline
\end_inset

: !lng ( nw ) [ d# 127 ] + [ d# 128 ] / [ d# 72 ] + dup ( nsec ) [
\begin_inset Newline newline
\end_inset

d# 0 ] block [ d# 1 ] + ! dup negate [ ns ] ! [ d# 35 ] + [ d# 36 ]
\begin_inset Newline newline
\end_inset

/ [ nc ] ! ;
\begin_inset Newline newline
\end_inset

: sve 7push d# 36 [ nblk @ d# -36 + ] range ( an ) !lng drop 0 block
\begin_inset Newline newline
\end_inset

[ d# 3000 ] block [ d# 36 blks ] move [ d# 3000 ] !work [ ns ] @ abs
\begin_inset Newline newline
\end_inset

[ ns ] ! 7pop ; [ d# 3036 block d# 4 * h ! sve ] }block
\begin_inset Newline newline
\end_inset

( 00215400 ) D# 85 shadow{ 
\begin_inset Newline newline
\end_inset

: short ( tag, then 28bit value+base )
\begin_inset Newline newline
\end_inset

: literal ( tag, then base )
\begin_inset Newline newline
\end_inset

: 32bits ( from next word.
 2 chunks )
\begin_inset Newline newline
\end_inset

: variable ( single word, then 32-bits )
\begin_inset Newline newline
\end_inset

: /whit ( replaces a word's tag with 9, making it a lowercase comment.
 )
\begin_inset Newline newline
\end_inset

: tag ( identify kind of word ) [ note /whit used for tags h# 0000000A
\begin_inset Newline newline
\end_inset

and h# 0000000B to convert these deprecated capitalized comments to
\begin_inset Newline newline
\end_inset

lower case.
 when all source of interest has been compressed at least
\begin_inset Newline newline
\end_inset

once this may be removed.
 ]
\begin_inset Newline newline
\end_inset

: words ( scan thru block.
 8 0s eob )
\begin_inset Newline newline
\end_inset

: range ( process blocks, number and count.
 31 0s eof )
\begin_inset Newline newline
\end_inset

: sve ( compress blocks 72 thru 1419 )
\begin_inset Newline newline
\end_inset

: flop ( write floppy; save number of cylinders ) }block
\begin_inset Newline newline
\end_inset

( 00215800 ) D# 86 code{ 
\begin_inset Newline newline
\end_inset

( compress ) [ macro ] ( uses ebx )
\begin_inset Newline newline
\end_inset

: b < ?dup > h# 0000C38B 2, ;
\begin_inset Newline newline
\end_inset

: c! h# 0000C88B 2, < drop > ;
\begin_inset Newline newline
\end_inset

: 2*d h# 00C3A50F 3, ;
\begin_inset Newline newline
\end_inset

: 2*c h# 0000E0D3 2, ;
\begin_inset Newline newline
\end_inset

: 2/r h# 0000C8D3 2, ; [ forth ] :# nb 19
\begin_inset Newline newline
\end_inset

: here/4 here d# 3 and if 1, here/4 ; then drop ;
\begin_inset Newline newline
\end_inset

: here4 here 2/ 2/ ;
\begin_inset Newline newline
\end_inset

: new d# 32 [ nb ] ! ;
\begin_inset Newline newline
\end_inset

: shift ( nn-n ) dup negate [ nb ] +! c! 2*d 2*c ;
\begin_inset Newline newline
\end_inset

: rbits dup c! swap 2/r swap
\begin_inset Newline newline
\end_inset

: bits ( nn-n ) dup negate [ nb ] @ + -if dup push + shift b , new
\begin_inset Newline newline
\end_inset

pop negate shift ; then drop shift ;
\begin_inset Newline newline
\end_inset

: char -if 2* -if 2/ d# 7 bits ; then 2/ H# 80000000 or d# 5 bits ;
\begin_inset Newline newline
\end_inset

then d# 4 bits ;
\begin_inset Newline newline
\end_inset

: chars dup and if char chars ; then ;
\begin_inset Newline newline
\end_inset

: 1word d# 4 rbits chars d# 4 bits ;
\begin_inset Newline newline
\end_inset

: word ( an-an ) d# 4 rbits
\begin_inset Newline newline
\end_inset

: cont chars over d# 1 + @ dup and if h# 0000000F and drop if d# 4
\begin_inset Newline newline
\end_inset

bits ; then ; then drop d# 4 bits ; }block
\begin_inset Newline newline
\end_inset

( 00215C00 ) D# 87 shadow{ 
\begin_inset Newline newline
\end_inset

: b ( pop ebx, register 3, into eax )
\begin_inset Newline newline
\end_inset

: c! ( push eax into register 1, ecx )
\begin_inset Newline newline
\end_inset

: 2*d ( shift ebx left by ecx.
 bits from eax )
\begin_inset Newline newline
\end_inset

: 2*c ( shift eax left by ecx )
\begin_inset Newline newline
\end_inset

: 2/r ( rotate eax right by ecx )
\begin_inset Newline newline
\end_inset

: nb ( number of bits remaining in word )
\begin_inset Newline newline
\end_inset

: here/4 ( align to word boundary )
\begin_inset Newline newline
\end_inset

: here4 ( word address in dictionary )
\begin_inset Newline newline
\end_inset

: new ( 32-bits in current word )
\begin_inset Newline newline
\end_inset

: shift ( eax into ebx, decrement ) nb
\begin_inset Newline newline
\end_inset

: rbits ( rotate bits to high-order position )
\begin_inset Newline newline
\end_inset

: bits ( shift bits into ebx; cross word boundary )
\begin_inset Newline newline
\end_inset

: char ( examine high bits.
 shift 4, 5 or 7 bits )
\begin_inset Newline newline
\end_inset

: chars ( shift all non-zero characters )
\begin_inset Newline newline
\end_inset

: 1word ( short word without continuation for variable )
\begin_inset Newline newline
\end_inset

: word ( shift tag, then characters )
\begin_inset Newline newline
\end_inset

: cont ( continue without tag ) }block
\begin_inset Newline newline
\end_inset

( 00216000 ) D# 88 code{ 
\begin_inset Newline newline
\end_inset

( display text ) [ macro ]
\begin_inset Newline newline
\end_inset

: 7@+ ( -a ) < ?dup > h# 0000C78B 2, h# 00000047 1, ;
\begin_inset Newline newline
\end_inset

: 7dec h# 0000004F 1, ;
\begin_inset Newline newline
\end_inset

: @ret ( -b ) < ?dup > h# 0024048B 3, H# 05240483 , ;
\begin_inset Newline newline
\end_inset

: 4@ ( b-n ) h# 0000008B 2, ; [ forth ]
\begin_inset Newline newline
\end_inset

: tick ( b-b ) dup [ d# 1 ] + 4@ + d# 5 + ;
\begin_inset Newline newline
\end_inset

: call h# 000000E8 { -cr } : dst 1, @ret tick here d# 3 + - + , ;
\begin_inset Newline newline
\end_inset

: jmp h# 000000E9 dst ; { br }
\begin_inset Newline newline
\end_inset

: .shan ( n- ) dup and if unpack emit .shan ; then drop ; { -cr } 
\begin_inset Newline newline
\end_inset

: +str ( a-a ) + ; [ macro ]
\begin_inset Newline newline
\end_inset

: ,lit ( n ) < ?dup > h# 000000B8 1, , ;
\begin_inset Newline newline
\end_inset

: strings ( i-a ) 7push pop < ,lit > jmp +str nop ;
\begin_inset Newline newline
\end_inset

: .' ( comment ) 7@+ @ d# -16 and < ,lit > call .shan nop ; [ forth ]
\begin_inset Newline newline
\end_inset

{ br }
\begin_inset Newline newline
\end_inset

: ' ( -b ) -kbd if 7@+ @ itick if abort then ; { cr }
\begin_inset Newline newline
\end_inset

then tic ;
\begin_inset Newline newline
\end_inset

: execute ( b ) push ;
\begin_inset Newline newline
\end_inset

: eval ( a ) 7push [ d# 1 ] + push 7pop [ sp d# 1 + ] @ execute 7pop
\begin_inset Newline newline
\end_inset

; }block
\begin_inset Newline newline
\end_inset

( 00216400 ) D# 89 shadow{ 
\begin_inset Newline newline
\end_inset

( these definitions support text display and are used in other parts
\begin_inset Newline newline
\end_inset

of okad as well.
 ) { br }
\begin_inset Newline newline
\end_inset

: 7@+ ( interpret only, returns adr of next word in block and skips
\begin_inset Newline newline
\end_inset

over it ...
 7-0-mov 7-inc )
\begin_inset Newline newline
\end_inset

: 7dec ( used to correct address after 7@+ )
\begin_inset Newline newline
\end_inset

: @ret ( fetch return address, skip bytes of code.
 )
\begin_inset Newline newline
\end_inset

: 4@ ( cell fetch on byte boundary )
\begin_inset Newline newline
\end_inset

: tick ( given adr of call instr, return tgt adr )
\begin_inset Newline newline
\end_inset

: call ( and ) jmp ( generate xfers to next word ) { br }
\begin_inset Newline newline
\end_inset

: .shan ( displays a shannon coded string )
\begin_inset Newline newline
\end_inset

: ,lit ( compiles a literal.
 )
\begin_inset Newline newline
\end_inset

: .' ( displays the following one-word comment.
 ) { br }
\begin_inset Newline newline
\end_inset

: strings ( starts an array of words in source.
 )
\begin_inset Newline newline
\end_inset

: ' ( interp only, returns next word's code addr.
 )
\begin_inset Newline newline
\end_inset

: execute ( is a call to the given routine adr.
 )
\begin_inset Newline newline
\end_inset

: eval ( interprets the source word whose address is given.
 ) }block
\begin_inset Newline newline
\end_inset

( 00216800 ) D# 90 code{ 
\begin_inset Newline newline
\end_inset

( disk audit utility ) [ empty d# 30 load ] :# bias 0 { cr }
\begin_inset Newline newline
\end_inset

:# sep 3000 [ d# 3000 sep ! ] :# head 1439 [ d# 1439 head ! ]
\begin_inset Newline newline
\end_inset

: +blocks ( sdn ) 2* ( bloks ; )
\begin_inset Newline newline
\end_inset

: bloks ( sdn ) push swap block swap block pop [ d# 256 ] * move ;
\begin_inset Newline newline
\end_inset

{ -cr } : n18 ( i-a ) [ d# 3018 block ] + ;
\begin_inset Newline newline
\end_inset

: wipe [ blk ] @ d# 1 erase ( e ) lis ; { -cr } : to ( n ) [ head ]
\begin_inset Newline newline
\end_inset

! ;
\begin_inset Newline newline
\end_inset

: obliterate ( lh ) over negate + erase ;
\begin_inset Newline newline
\end_inset

: matching ( sd ) less if swap then dup [ bias ] ! negate + [ sep ]
\begin_inset Newline newline
\end_inset

! ;
\begin_inset Newline newline
\end_inset

: cast ( nm-n' ) dup push /mod d# 1 or pop * + ;
\begin_inset Newline newline
\end_inset

: other ( n-n' ) [ bias ] @ negate + [ sep ] @ cast [ bias ] @ + ;
\begin_inset Newline newline
\end_inset

: lesser ( n-n ) dup other min ; [ d# 92 load ]
\begin_inset Newline newline
\end_inset

: ?blk ( n-n?n+ ) lesser dup block over other block [ d# 256 ] for
\begin_inset Newline newline
\end_inset

over @ over @ or drop if drop drop dup [ d# 1 ] + pop drop ; then
\begin_inset Newline newline
\end_inset

[ d# 1 ] + [ d# 1 ] u+ next drop drop [ d# 1 ] + ; { -cr } : ?blks
\begin_inset Newline newline
\end_inset

( sn-? ) for ?blk next drop ;
\begin_inset Newline newline
\end_inset

: ?bin ( kernel ) d# 0 d# 12 ?blks ( icons ) d# 12 d# 6 ?blks ;
\begin_inset Newline newline
\end_inset

: unpk abs [ d# 1 n18 ] ! [ d# 3036 ] block [ d# 5000 ] block [ d# 1404
 ]
\begin_inset Newline newline
\end_inset

blks move [ d# 5000 block ] d# 3036 [ d# 3 n18 ] @ [ d# -36 ] + range
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset

: check [ d# 3000 ] @back [ d# 0 n18 ] @ [ d# 18 block @ ] or drop
\begin_inset Newline newline
\end_inset

if ; then [ d# 1 n18 ] @ dup and -if unpk ; then drop ; }block
\begin_inset Newline newline
\end_inset

( 00216C00 ) D# 91 shadow{ 
\begin_inset Newline newline
\end_inset

( disk mgmt and reconciliation utility.
 )
\begin_inset Newline newline
\end_inset

: bloks ( copies n blocks from s to d, front to back so only moves
\begin_inset Newline newline
\end_inset

overlap downward safely.
 )
\begin_inset Newline newline
\end_inset

: +blocks ( copies n blocks and their shadows.
 )
\begin_inset Newline newline
\end_inset

: obliterate ( wipes from block l to block h.
 )
\begin_inset Newline newline
\end_inset

: matching ( sets up to match s to d.
 )
\begin_inset Newline newline
\end_inset

: to ( sets block no.
 past end of source area.
 )
\begin_inset Newline newline
\end_inset

: other ( given a block number in one of the areas returns the corresponding
\begin_inset Newline newline
\end_inset

block no.
 in the other area.
 )
\begin_inset Newline newline
\end_inset

: lesser ( given a block number returns the lesser of the pair it is
\begin_inset Newline newline
\end_inset

a member of )
\begin_inset Newline newline
\end_inset

: ?blks ( scans a range of blks leaving nos of any differing blks on
\begin_inset Newline newline
\end_inset

the stack.
 )
\begin_inset Newline newline
\end_inset

: ?bin ( scans the binary parts of okad disk.
 )
\begin_inset Newline newline
\end_inset

: check ( reads backup to { 0001770F } and decompresses if appropriate )
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00217000 ) D# 92 code{ 
\begin_inset Newline newline
\end_inset

( compare )
\begin_inset Newline newline
\end_inset

: blink ( n ) dup other [ blk ] ! edit ;
\begin_inset Newline newline
\end_inset

: var ( nnxx-nnd ) push push d# 1 + d# 1 u+ pop pop
\begin_inset Newline newline
\end_inset

: *1 ( nnxx-nnd ) or ;
\begin_inset Newline newline
\end_inset

: *2 ( nnxx-nnd ) var push over @ over @ or pop + ;
\begin_inset Newline newline
\end_inset

: tag ( nn-n ) dup h# 0000000F and jump *1 *1 *2 *1 *1 *2 *1 *1 *1
\begin_inset Newline newline
\end_inset

*1 *1 *1 var *1 *1 *1
\begin_inset Newline newline
\end_inset

: +or ( nn-n ) over - and or ;
\begin_inset Newline newline
\end_inset

: ?nul ( nnxx-nnxx ) over over +or drop if ; then drop drop pop drop
\begin_inset Newline newline
\end_inset

drop drop ;
\begin_inset Newline newline
\end_inset

: co ( naa-n ) over @ over @ ?nul tag drop if drop drop blink ; then
\begin_inset Newline newline
\end_inset

d# 1 + d# 1 u+ co ;
\begin_inset Newline newline
\end_inset

: com ( n-n ) dup block over other block co ;
\begin_inset Newline newline
\end_inset

: g blk @ lesser
\begin_inset Newline newline
\end_inset

: gg ( n ) [ head ] @ over - + drop -if drop ; then [ d# 1 ] + com
\begin_inset Newline newline
\end_inset

gg ;
\begin_inset Newline newline
\end_inset

: v [ blk ] @ other edit ;
\begin_inset Newline newline
\end_inset

: give blk @ dup other d# 1 bloks ;
\begin_inset Newline newline
\end_inset

: take blk @ dup other swap d# 1 bloks ;
\begin_inset Newline newline
\end_inset

: check [ d# 3000 ] @back ;
\begin_inset Newline newline
\end_inset

: all d# 0 [ d# 3000 ] matching [ nblk ] @ [ d# -1 ] + to [ d# 17 ]
\begin_inset Newline newline
\end_inset

gg ; }block
\begin_inset Newline newline
\end_inset

( 00217400 ) D# 93 shadow{ 
\begin_inset Newline newline
\end_inset

: blink ( displays the given block with its other set as the editor's
\begin_inset Newline newline
\end_inset

'other' block )
\begin_inset Newline newline
\end_inset

: var ( compares a variable name, advancing pointers to skip its value.
 )
\begin_inset Newline newline
\end_inset

: *1 ( compares garden variety words.
 )
\begin_inset Newline newline
\end_inset

: *2 ( compares large literals.
 )
\begin_inset Newline newline
\end_inset

: tag ( compares source cells given, true if diff, advancing ptrs and
\begin_inset Newline newline
\end_inset

ignoring variable vals.
 )
\begin_inset Newline newline
\end_inset

: ?nul ( ends loop in co if nuls hit in both blks.
 )
\begin_inset Newline newline
\end_inset

: co ( does work of com given adrs of both blks.
 )
\begin_inset Newline newline
\end_inset

: com ( invokes editor to blink the given block if it differs from
\begin_inset Newline newline
\end_inset

the other, otherwise returns.
 )
\begin_inset Newline newline
\end_inset

: g ( scans for diffs after current editor block.
 )
\begin_inset Newline newline
\end_inset

: v ( shows the other block )
\begin_inset Newline newline
\end_inset

: give ( writes current editor block over its twin )
\begin_inset Newline newline
\end_inset

: take ( writes twin over current editor block.
 )
\begin_inset Newline newline
\end_inset

: check ( reads backup to 3000 for matching.
 )
\begin_inset Newline newline
\end_inset

: all ( scans the whole usable area of the disk.
 ) }block
\begin_inset Newline newline
\end_inset

( 00217800 ) D# 94 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00217C00 ) D# 95 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00218000 ) D# 96 code{ 
\begin_inset Newline newline
\end_inset

( native async ) [ d# 96 orgn ! macro ]
\begin_inset Newline newline
\end_inset

: 1@ ( b-c ) h# 0000008A 2, ;
\begin_inset Newline newline
\end_inset

: 1! ( cb ) < a! > h# 00000288 2, < drop > ;
\begin_inset Newline newline
\end_inset

: 2@ ( b-h ) h# 00008B66 3, ;
\begin_inset Newline newline
\end_inset

: 2! ( hb ) < a! > h# 00028966 3, < drop > ;
\begin_inset Newline newline
\end_inset

: 4@ ( b-n ) h# 0000008B 2, ;
\begin_inset Newline newline
\end_inset

: 4! ( nb ) < a! > h# 00000289 2, < drop > ;
\begin_inset Newline newline
\end_inset

: swab ( h-h ) h# 0000C486 2, ;
\begin_inset Newline newline
\end_inset

: swa4 ( n-n ) h# 0000C80F 2, ; [ forth ]
\begin_inset Newline newline
\end_inset

: a-b ( a-b ) 2* 2* ;
\begin_inset Newline newline
\end_inset

: b-a ( b-a ) [ d# 3 ] + 2/ 2/ ;
\begin_inset Newline newline
\end_inset

: create ( -a ) pop b-a ;
\begin_inset Newline newline
\end_inset

: rez ( n ) h +! ;
\begin_inset Newline newline
\end_inset

: +or ( nn-n ) over - and or ;
\begin_inset Newline newline
\end_inset

: ?zero ( n-n ) [ d# 0 ] or if dup or ; then ( - ) [ d# -1 ] or ; { br }
\begin_inset Newline newline
\end_inset

:# act 0 :# vport 373 :# 0tg 1 :# 1tg 1 :# 2tg 1
\begin_inset Newline newline
\end_inset

: cold d# 1 [ 0tg ] ! d# 1 [ 1tg ] ! d# 1 [ 2tg ] ! d# 0 [ act ] !
\begin_inset Newline newline
\end_inset

; { br }
\begin_inset Newline newline
\end_inset

( ser ) [ d# 98 load d# 118 load ] ( routes ) [ d# 120 load ] { cr }
\begin_inset Newline newline
\end_inset

( generic ) [ d# 122 d# 6 loads ] ( panel ) [ d# 134 load ] { cr }
\begin_inset Newline newline
\end_inset

( user ) [ d# 136 load ] ( canon ) [ d# 138 load ] }block
\begin_inset Newline newline
\end_inset

( 00218400 ) D# 97 shadow{ 
\begin_inset Newline newline
\end_inset

( talk to chip via native rs232.
 ) { br }
\begin_inset Newline newline
\end_inset

: 1@ ( and ) 1! ( byte fetch and store, byte address.
 )
\begin_inset Newline newline
\end_inset

: 2@ ( and ) 2! ( halfcell fetch/store, byte adr.
 )
\begin_inset Newline newline
\end_inset

: swab ( and ) swa4 ( 2-way and 4-way byte swaps.
 )
\begin_inset Newline newline
\end_inset

: a-b ( and ) b-a ( convert cells to+from bytes.
 ) { br }
\begin_inset Newline newline
\end_inset

: bofs ( and ) ofs ( make byte and cell offset adrs in a structure
\begin_inset Newline newline
\end_inset

given byte posn and byte width.
 )
\begin_inset Newline newline
\end_inset

: create ( used after ) [ align ] ( to exit with word adr of cell following
\begin_inset Newline newline
\end_inset

in dictionary.
 ) [ note that writing into such allocations invalidates
\begin_inset Newline newline
\end_inset

nearby instruction cache! ]
\begin_inset Newline newline
\end_inset

: rez ( allots n bytes in the dictionary.
 )
\begin_inset Newline newline
\end_inset

: +or ( inclusive or.
 )
\begin_inset Newline newline
\end_inset

: ?zero ( classical zero-equal returning 0 or -1 with indicators.
 )
\begin_inset Newline newline
\end_inset

{ br }
\begin_inset Newline newline
\end_inset

: ntgt ( indices for active paths, 1 for adjacent.
 )
\begin_inset Newline newline
\end_inset

: act ( number of selected path, to which ) vport ( leads.
 )
\begin_inset Newline newline
\end_inset

: cold ( sets no active paths.
 )
\begin_inset Newline newline
\end_inset

: user ( test code before canonicals.
 ) }block
\begin_inset Newline newline
\end_inset

( 00218800 ) D# 98 code{ 
\begin_inset Newline newline
\end_inset

( async umbilical ) [ h# 000003F8 ] ( serial ) [ d# 60 load ]
\begin_inset Newline newline
\end_inset

: rsh ( ni-n ) d# 0 + if for 2/ next ; then drop ;
\begin_inset Newline newline
\end_inset

: sdat align create [ d# 16384 rez ] :# bi 30
\begin_inset Newline newline
\end_inset

: -stream d# 0 [ bi ] ! ;
\begin_inset Newline newline
\end_inset

: stream ( -b ) [ sdat a-b ] ;
\begin_inset Newline newline
\end_inset

: /str ( -b ) [ bi ] @ [ stream ] + ; { br }
\begin_inset Newline newline
\end_inset

: @18 ( -n ) /str 4@ [ h# 0003FFFF ] and
\begin_inset Newline newline
\end_inset

: +wd d# 3 [ bi ] +! ;
\begin_inset Newline newline
\end_inset

: !18 ( n ) [ h# 0003FFFF ] or [ h# 00000040 ] * [ h# 00000012 ] +
\begin_inset Newline newline
\end_inset

/str 4! +wd ; { br }
\begin_inset Newline newline
\end_inset

: +sea ( -ok ) init d# 1 [ d# 0 ] + ;
\begin_inset Newline newline
\end_inset

: -sea ;
\begin_inset Newline newline
\end_inset

: reset [ d# 2 ] st! [ d# 100000 ] for next [ d# 0 ] st! ;
\begin_inset Newline newline
\end_inset

: tosea ( bn ) for dup 1@ xmit [ d# 1 ] + next drop ;
\begin_inset Newline newline
\end_inset

: insea ( w ) stream swap [ d# 3 ] * for { indent }
\begin_inset Newline newline
\end_inset

rcv over 1! [ d# 1 ] + next drop ; }block
\begin_inset Newline newline
\end_inset

( 00218C00 ) D# 99 shadow{ 
\begin_inset Newline newline
\end_inset

( async data are 18 bits per 3 bytes.
 to chip word inverted, shifted
\begin_inset Newline newline
\end_inset

up 6, '12' inserted, then sent low order byte first.
 from chip are
\begin_inset Newline newline
\end_inset

tbd.
 ) { br }
\begin_inset Newline newline
\end_inset

: sport ( com port address )
\begin_inset Newline newline
\end_inset

: 4@ ( and ) 4! ( full cell on byte address.
 )
\begin_inset Newline newline
\end_inset

: +sea ( opens serial; true if good, handle in dh.
 )
\begin_inset Newline newline
\end_inset

: -sea ( closes the handle.
 )
\begin_inset Newline newline
\end_inset

: /sea ( resets the chip.
 )
\begin_inset Newline newline
\end_inset

: tosea ( transmits n bytes to chip.
 )
\begin_inset Newline newline
\end_inset

: insea ( receives w g18 words from the chip.
 ) { br }
\begin_inset Newline newline
\end_inset

: -stream ( clears byte index ) bi ( in ) sdat ( buffer.
 )
\begin_inset Newline newline
\end_inset

: stream ( byte adr of buffer.
 )
\begin_inset Newline newline
\end_inset

: /str ( byte adr of next 18-bit slot in buff.
 ) { br }
\begin_inset Newline newline
\end_inset

: @18 ( returns the next 18 bits from the stream.
 )
\begin_inset Newline newline
\end_inset

: !18 ( appends 18 bits to the stream.
 no higher order bits may be
\begin_inset Newline newline
\end_inset

present! ) }block
\begin_inset Newline newline
\end_inset

( 00219000 ) D# 100 code{ 
\begin_inset Newline newline
\end_inset

( onspec usb interface ) [ d# 100 orgn ! macro ]
\begin_inset Newline newline
\end_inset

: 1@ ( b-c ) h# 0000008A 2, ;
\begin_inset Newline newline
\end_inset

: 1! ( cb ) < a! > h# 00000288 2, < drop > ;
\begin_inset Newline newline
\end_inset

: 2@ ( b-h ) h# 00008B66 3, ;
\begin_inset Newline newline
\end_inset

: 2! ( hb ) < a! > h# 00028966 3, < drop > ;
\begin_inset Newline newline
\end_inset

: swab ( h-h ) h# 0000C486 2, ;
\begin_inset Newline newline
\end_inset

: swa4 ( n-n ) h# 0000C80F 2, ; [ forth ]
\begin_inset Newline newline
\end_inset

: a-b ( a-b ) 2* 2* ;
\begin_inset Newline newline
\end_inset

: b-a ( b-a ) [ d# 3 ] + 2/ 2/ ;
\begin_inset Newline newline
\end_inset

: bofs ( bw-b'b ) over + swap ;
\begin_inset Newline newline
\end_inset

: ofs ( bw-b'a ) bofs b-a ;
\begin_inset Newline newline
\end_inset

: create ( -a ) pop b-a ;
\begin_inset Newline newline
\end_inset

: rez ( n ) h +! ;
\begin_inset Newline newline
\end_inset

: +or ( nn-n ) over - and or ;
\begin_inset Newline newline
\end_inset

: ?zero ( n-n ) [ d# 0 ] or if dup or ; then ( - ) [ d# -1 ] or ; { br }
\begin_inset Newline newline
\end_inset

:# act 0 :# vport 325 :# 0tg 1 :# 1tg 1 :# 2tg 1
\begin_inset Newline newline
\end_inset

: cold d# 1 [ 0tg ] ! d# 1 [ 1tg ] ! d# 1 [ 2tg ] ! d# 0 [ act ] !
\begin_inset Newline newline
\end_inset

; { br }
\begin_inset Newline newline
\end_inset

( usb ) [ d# 102 d# 5 loads ] ( routes ) [ d# 112 load ] { cr }
\begin_inset Newline newline
\end_inset

( generic ) [ d# 122 d# 6 loads ] ( panel ) [ d# 134 load ] { cr }
\begin_inset Newline newline
\end_inset

( user ) [ d# 136 load ] ( canon ) [ d# 138 load ] }block
\begin_inset Newline newline
\end_inset

( 00219400 ) D# 101 shadow{ 
\begin_inset Newline newline
\end_inset

( talk to seaforth via onspec usb.
 ) { br }
\begin_inset Newline newline
\end_inset

: 1@ ( and ) 1! ( byte fetch and store, byte address.
 )
\begin_inset Newline newline
\end_inset

: 2@ ( and ) 2! ( halfcell fetch/store, byte adr.
 )
\begin_inset Newline newline
\end_inset

: swab ( and ) swa4 ( 2-way and 4-way byte swaps.
 )
\begin_inset Newline newline
\end_inset

: a-b ( and ) b-a ( convert cells to+from bytes.
 ) { br }
\begin_inset Newline newline
\end_inset

: bofs ( and ) ofs ( make byte and cell offset adrs in a structure
\begin_inset Newline newline
\end_inset

given byte posn and byte width.
 )
\begin_inset Newline newline
\end_inset

: create ( used after ) [ align ] ( to exit with word adr of cell following
\begin_inset Newline newline
\end_inset

in dictionary.
 ) [ note that writing into such allocations invalidates
\begin_inset Newline newline
\end_inset

nearby instruction cache! ]
\begin_inset Newline newline
\end_inset

: rez ( allots n bytes in the dictionary.
 )
\begin_inset Newline newline
\end_inset

: +or ( inclusive or.
 )
\begin_inset Newline newline
\end_inset

: ?zero ( classical zero-equal returning 0 or -1 with indicators.
 )
\begin_inset Newline newline
\end_inset

{ br }
\begin_inset Newline newline
\end_inset

: ntgt ( indices for active paths, 1 for adjacent.
 )
\begin_inset Newline newline
\end_inset

: act ( number of selected path, to which ) vport ( leads.
 )
\begin_inset Newline newline
\end_inset

: cold ( sets no active paths.
 )
\begin_inset Newline newline
\end_inset

: user ( test code before canonicals.
 ) }block
\begin_inset Newline newline
\end_inset

( 00219800 ) D# 102 code{ 
\begin_inset Newline newline
\end_inset

( find/open/close onspec )
\begin_inset Newline newline
\end_inset

: nam ( -a ) align create ( //./ ) [ H# 2F2E2F2F , ] ( d' ) [ h# 00003A47
\begin_inset Newline newline
\end_inset

, ]
\begin_inset Newline newline
\end_inset

: obuf ( -a ) align create [ d# 512 rez ] :# len 100
\begin_inset Newline newline
\end_inset

: spq ( -a ) align create [ d# 0 , d# 0 , d# 0 , ]
\begin_inset Newline newline
\end_inset

: inq ( -ok ) [ len ] d# 512 obuf d# 12 spq h# 002D1400 [ dh ] @ fioctl
\begin_inset Newline newline
\end_inset

; { br }
\begin_inset Newline newline
\end_inset

: -sea [ dh ] @ [ d# 0 ] + if fclose d# 0 then [ dh ] ! ;
\begin_inset Newline newline
\end_inset

: ?sea ( -t ) obuf dup [ d# 3 ] + @ b-a + dup @ [ H# 66414553 ] or
\begin_inset Newline newline
\end_inset

swap [ d# 1 ] + @ [ H# 6874726F ] or +or ?zero ;
\begin_inset Newline newline
\end_inset

: +sea ( -ok ) h# 00003A44 [ nam d# 1 + ] ! d# 20 for nam r/w fopen
\begin_inset Newline newline
\end_inset

[ dh ] ! if inq drop if ?sea if pop drop ; then drop then then -sea
\begin_inset Newline newline
\end_inset

d# 1 [ nam d# 1 + ] +! next d# 0 ; }block
\begin_inset Newline newline
\end_inset

( 00219C00 ) D# 103 shadow{ 
\begin_inset Newline newline
\end_inset

: nam ( pathname buffer )
\begin_inset Newline newline
\end_inset

: spq ( argument for inquiry )
\begin_inset Newline newline
\end_inset

: obuf ( buffer for inquiry return )
\begin_inset Newline newline
\end_inset

: len ( bytes returned from fioctl calls ) { br }
\begin_inset Newline newline
\end_inset

: inq ( makes device inquiry, returns true if ok )
\begin_inset Newline newline
\end_inset

: ?sea ( true with indic if reply vendor seaforth ) { cr }
\begin_inset Newline newline
\end_inset

: +sea ( finds a forthdrive.
 true if found, handle in dh.
 )
\begin_inset Newline newline
\end_inset

: -sea ( closes the handle.
 ) }block
\begin_inset Newline newline
\end_inset

( 0021A000 ) D# 104 code{ 
\begin_inset Newline newline
\end_inset

( scsi operations )
\begin_inset Newline newline
\end_inset

: /sdb ( -n ) [ d# 28 d# 16 + d# 32 + d# 16 d# 1024 * + ] ; { br }
\begin_inset Newline newline
\end_inset

: sdb align create [ /sdb rez ] ( struc ) [ sdb a-b ]
\begin_inset Newline newline
\end_inset

: nsdb ( -b ) [ d# 2 bofs ] ; ( sstat ) [ d# 1 + d# 3 + ]
\begin_inset Newline newline
\end_inset

: ncdb ( -b ) [ d# 1 bofs ] ; ( nsns ) [ d# 1 + ]
\begin_inset Newline newline
\end_inset

: i/o ( -b ) [ d# 1 bofs ] ; [ d# 3 + ]
\begin_inset Newline newline
\end_inset

: ndata ( -a ) [ d# 4 ofs ] ;
\begin_inset Newline newline
\end_inset

: nto ( -a ) [ d# 4 ofs ] ;
\begin_inset Newline newline
\end_inset

: 'data ( -a ) [ d# 4 ofs ] ;
\begin_inset Newline newline
\end_inset

: 'sns ( -a ) [ d# 4 ofs ] ;
\begin_inset Newline newline
\end_inset

: cdb ( -b ) [ d# 16 bofs ] ; ( sns ) [ d# 32 + ]
\begin_inset Newline newline
\end_inset

: sdat ( -b ) [ d# 16 d# 1024 * bofs ] ; [ drop ] { br }
\begin_inset Newline newline
\end_inset

: !cdb ( an ) d# 0 sdb [ d# 28 d# 16 + d# 32 + b-a ] fill [ d# 28 d# 16
\begin_inset Newline newline
\end_inset

+ dup ] nsdb 2! [ dup ] 'sns ! [ d# 32 + ] 'data ! d# 20 [ nto ] !
\begin_inset Newline newline
\end_inset

dup [ ncdb ] 1! [ cdb b-a ] swap b-a move ;
\begin_inset Newline newline
\end_inset

: !xfer ( ni ) [ i/o ] 1! [ ndata ] ! ;
\begin_inset Newline newline
\end_inset

: /scsi ( -ok ) [ len ] /sdb sdb over over h# 0004D004 [ dh ] @ fioctl
\begin_inset Newline newline
\end_inset

; }block
\begin_inset Newline newline
\end_inset

( 0021A400 ) D# 105 shadow{ 
\begin_inset Newline newline
\end_inset

: /sdb ( total length of scsi structure, bytes ) { br }
\begin_inset Newline newline
\end_inset

: sdb ( scsi structure word adr unless -b )
\begin_inset Newline newline
\end_inset

: nsdb ( -b length in bytes thru cdb )
\begin_inset Newline newline
\end_inset

: ncdb ( -b length of cdb in bytes )
\begin_inset Newline newline
\end_inset

: i/o ( -b 0 out 1 in 2 no data )
\begin_inset Newline newline
\end_inset

: ndata ( -a length in bytes of data transfer )
\begin_inset Newline newline
\end_inset

: nto ( -a timeout in seconds )
\begin_inset Newline newline
\end_inset

: 'data ( -a offset in bytes to sdat )
\begin_inset Newline newline
\end_inset

: 'sns ( -a offset in bytes to sns )
\begin_inset Newline newline
\end_inset

: cdb ( -b scsi command )
\begin_inset Newline newline
\end_inset

: sdat ( -b scsi data ) { br }
\begin_inset Newline newline
\end_inset

: !cdb ( initializes sdb for cmd whose word adr and byte lng are given.
\begin_inset Newline newline
\end_inset

data xfer params must be set before /scsi.
 )
\begin_inset Newline newline
\end_inset

: !xfer ( sets length in bytes and direction of data transfer.
 )
\begin_inset Newline newline
\end_inset

: /scsi ( executes scsi command returning api status not necessarily
\begin_inset Newline newline
\end_inset

scsi status.
 ) }block
\begin_inset Newline newline
\end_inset

( 0021A800 ) D# 106 code{ 
\begin_inset Newline newline
\end_inset

( onspec vendor unique ops )
\begin_inset Newline newline
\end_inset

: /lok ( f-ok ) push [ len ] d# 0 d# 0 d# 0 d# 0 pop [ dh ] @ fioctl
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset

: lok [ h# 00090018 ] /lok drop ;
\begin_inset Newline newline
\end_inset

: -lok [ h# 0009001C ] /lok drop ;
\begin_inset Newline newline
\end_inset

: scsi ( -ok lok ) /scsi ( -lok ) [ d# 0 ] + ; { br }
\begin_inset Newline newline
\end_inset

: /os align create [ h# 0000FA20 , h# 00000000 , h# 00000000 2, ]
\begin_inset Newline newline
\end_inset

: wos align create [ h# 0000FB20 , h# 00000000 , h# 00000000 2, ]
\begin_inset Newline newline
\end_inset

: wos! align create [ h# 0002FB20 , h# 00000000 , h# 00000000 2, ]
\begin_inset Newline newline
\end_inset

: ros align create [ h# 0001FB20 , h# 00000000 , h# 00000000 2, ]
\begin_inset Newline newline
\end_inset

: !nbits ( h ) swab [ cdb d# 7 + ] 2! ; { br }
\begin_inset Newline newline
\end_inset

: /sea ( -ok ) /os d# 10 !cdb d# 0 d# 2 !xfer scsi drop ;
\begin_inset Newline newline
\end_inset

: tosea ( wbo ) d# 10 !cdb !nbits 2* d# 0 !xfer scsi drop ;
\begin_inset Newline newline
\end_inset

: insea ( w ) ros d# 10 !cdb [ d# 18 ] * dup !nbits [ d# 14 ] + [ d# 16
 ]
\begin_inset Newline newline
\end_inset

/ 2* d# 1 !xfer scsi drop ;
\begin_inset Newline newline
\end_inset

: mute -lok -sea ; }block
\begin_inset Newline newline
\end_inset

( 0021AC00 ) D# 107 shadow{ 
\begin_inset Newline newline
\end_inset

: lok ( and ) -lok ( perform the lock and unlock volume functions that
\begin_inset Newline newline
\end_inset

are apparently required around a scsi command.
 )
\begin_inset Newline newline
\end_inset

: scsi ( executes a scsi passthrough command with proper lock protection.
 )
\begin_inset Newline newline
\end_inset

{ br }
\begin_inset Newline newline
\end_inset

( onspec custom scsi command blocks- )
\begin_inset Newline newline
\end_inset

: /os ( cycles chip power and resets it.
 )
\begin_inset Newline newline
\end_inset

: wos ( writes synch to chip )
\begin_inset Newline newline
\end_inset

: wos! ( writes and leaves lines tristate.
 )
\begin_inset Newline newline
\end_inset

: ros ( reads synch from chip.
 )
\begin_inset Newline newline
\end_inset

: !nbits ( sets bit count field in command, limit 32 or 64k ) { br }
\begin_inset Newline newline
\end_inset

: /sea ( resets the chip.
 )
\begin_inset Newline newline
\end_inset

: tosea ( transmits w halfwords, b bits with op ) [ wos ] ( or ) [ wos!
 ]
\begin_inset Newline newline
\end_inset

( as you wish.
 )
\begin_inset Newline newline
\end_inset

: insea ( receives w g18 words from the sync boot node.
 the data in
\begin_inset Newline newline
\end_inset

our memory are in onspec format both directions.
 )
\begin_inset Newline newline
\end_inset

: mute ( properly closes the handle.
 ) }block
\begin_inset Newline newline
\end_inset

( 0021B000 ) D# 108 code{ 
\begin_inset Newline newline
\end_inset

( onspec bitstream ) :# bi 180 [ macro ]
\begin_inset Newline newline
\end_inset

: 4@ ( b-n ) h# 0000008B 2, ;
\begin_inset Newline newline
\end_inset

: 4! ( nb ) < a! > h# 00000289 2, < drop > ;
\begin_inset Newline newline
\end_inset

: swah ( n-n ) h# 000000C1 1, h# 000010C8 2, ; [ forth ]
\begin_inset Newline newline
\end_inset

: lsh ( ni-n ) d# 0 + if for 2* next ; then drop ;
\begin_inset Newline newline
\end_inset

: rsh ( ni-n ) d# 0 + if for 2/ next ; then drop ; { br }
\begin_inset Newline newline
\end_inset

: -stream d# 0 [ bi ] ! ;
\begin_inset Newline newline
\end_inset

: stream ( -wb ) [ bi ] @ dup [ d# 15 ] + [ d# 16 ] / swap ;
\begin_inset Newline newline
\end_inset

: /str ( -bi ) [ bi ] @ [ d# 16 ] /mod 2* [ sdat ] + swap - [ d# 15 ]
\begin_inset Newline newline
\end_inset

+ ; { cr }
\begin_inset Newline newline
\end_inset

: @18 ( -n ) /str push 4@ swah pop rsh [ h# 0003FFFF ] and
\begin_inset Newline newline
\end_inset

: +wd d# 18 [ bi ] +! ;
\begin_inset Newline newline
\end_inset

: !18 ( n ) [ h# 0003FFFF ] and /str swap push i 4@ swah push push
\begin_inset Newline newline
\end_inset

i lsh h# FFFC0000 pop lsh pop and or swah pop 4! +wd ; }block
\begin_inset Newline newline
\end_inset

( 0021B400 ) D# 109 shadow{ 
\begin_inset Newline newline
\end_inset

( onspec data are a continuous stream of bits in consecutive bytes,
\begin_inset Newline newline
\end_inset

left to right, except that bytes are swapped in halfcell units.
 cell
\begin_inset Newline newline
\end_inset

fetched on any halfcell boundary and half-swapped has continuous bits
\begin_inset Newline newline
\end_inset

running from hi to lo.
 ) { br }
\begin_inset Newline newline
\end_inset

: 4@ ( and ) 4! ( full cell on byte address.
 )
\begin_inset Newline newline
\end_inset

: lsh ( and ) rsh ( left and right arith shifts.
 )
\begin_inset Newline newline
\end_inset

: swah ( swaps hi and lo halfcells of a number.
 ) { br }
\begin_inset Newline newline
\end_inset

: -stream ( clears bit index ) bi ( in sdat buffer.
 )
\begin_inset Newline newline
\end_inset

: stream ( halfcells and bits within index.
 )
\begin_inset Newline newline
\end_inset

: /str ( cell addr, shift count for next 18.
 ) { br }
\begin_inset Newline newline
\end_inset

: @18 ( returns the next 18 bits from the stream.
 )
\begin_inset Newline newline
\end_inset

: !18 ( appends 18 bits to the stream.
 no higher order bits may be
\begin_inset Newline newline
\end_inset

present! ) }block
\begin_inset Newline newline
\end_inset

( 0021B800 ) D# 110 code{ 
\begin_inset Newline newline
\end_inset

( node { 0000258F } sync boot frames )
\begin_inset Newline newline
\end_inset

: /frame ( nw xfr jmp ) -stream [ h# 00010000 ] + !18 !18 [ d# 1 ]
\begin_inset Newline newline
\end_inset

+ 2/ ( words ) 2* ( actual { FFFFFFEF } + ) !18 ;
\begin_inset Newline newline
\end_inset

: +frame ( wn ) for dup @ !18 [ d# 1 ] + next drop ;
\begin_inset Newline newline
\end_inset

: +ram ( w n node ) nn-n 2* [ h# 00008000 ] + block u+ for dup @ [
\begin_inset Newline newline
\end_inset

h# 00015555 ] or !18 [ d# 1 ] + next drop ;
\begin_inset Newline newline
\end_inset

: !frame ( op ) push stream pop tosea ; { br }
\begin_inset Newline newline
\end_inset

: exec [ h# 000000B6 ] ;
\begin_inset Newline newline
\end_inset

: talk cold mute +sea if lok drop /sea h# 00000040 d# 0 [ exec ] /frame
\begin_inset Newline newline
\end_inset

h# 00000000 h# 00000040 { 0000022F } d# 300 +ram [ wos ] !frame ( good )
\begin_inset Newline newline
\end_inset

; then ( bad ) -sea ; { br }
\begin_inset Newline newline
\end_inset

: exch ( w n f n ) push push dup [ h# 00000002 ] + [ d# -2 ] and [ vport
 ]
\begin_inset Newline newline
\end_inset

@ pop /frame [ vport ] @ [ h# 00012000 ] + !18 dup - [ h# 00000001 ]
\begin_inset Newline newline
\end_inset

and drop if [ vport ] @ [ h# 00010000 ] + !18 then +frame wos! !frame
\begin_inset Newline newline
\end_inset

pop insea -stream ; { br }
\begin_inset Newline newline
\end_inset

: ok [ h# 00000018 ] ;
\begin_inset Newline newline
\end_inset

: fet [ h# 0000001C ] ;
\begin_inset Newline newline
\end_inset

: stat [ h# 00000023 ] ;
\begin_inset Newline newline
\end_inset

: bstk [ h# 00000025 ] ; }block
\begin_inset Newline newline
\end_inset

( 0021BC00 ) D# 111 shadow{ 
\begin_inset Newline newline
\end_inset

( boot frames begin with a 3 word header; ) { indent }
\begin_inset Newline newline
\end_inset

100xx ( jump to xx when done ) { indent }
\begin_inset Newline newline
\end_inset

ddd ( mem/port adr to store payload ) { indent }
\begin_inset Newline newline
\end_inset

nnn ( transfer length ) { indent }
\begin_inset Newline newline
\end_inset

[ nnn+1 * 2 ] ( words of payload )
\begin_inset Newline newline
\end_inset

: /frame ( heads a new given ) [ even ] ( words of payload, destination
\begin_inset Newline newline
\end_inset

addr, final jump addr.
 )
\begin_inset Newline newline
\end_inset

: +frame ( appends words to payload.
 )
\begin_inset Newline newline
\end_inset

: +ram ( appends a string of code from binary produced by ) compile
\begin_inset Newline newline
\end_inset

( for the given ) [ node.
 ]
\begin_inset Newline newline
\end_inset

: !frame ( transmits frame given ) [ wos ] ( or ) [ wos! ] { br }
\begin_inset Newline newline
\end_inset

: talk ( prepares chip for control thru node 19.
 )
\begin_inset Newline newline
\end_inset

: exch ( performs a transaction with target given addr and length of
\begin_inset Newline newline
\end_inset

port stream, stream end action in node 19, and number of words reply.
 )
\begin_inset Newline newline
\end_inset

{ br }
\begin_inset Newline newline
\end_inset

: ok ( stream end to simply ack completion; ) fet ( pumps one word
\begin_inset Newline newline
\end_inset

from target; ) bstk ( shepherds stack dump; ) stat ( pumps ten.
 )
\begin_inset Newline newline
\end_inset

exec ( is next boot frame.
 ) }block
\begin_inset Newline newline
\end_inset

( 0021C000 ) D# 112 code{ 
\begin_inset Newline newline
\end_inset

( route lists )
\begin_inset Newline newline
\end_inset

: 0pa align create [ d# 300 , d# 400 , d# 17 , d# 27 , d# 37 , d# 36
\begin_inset Newline newline
\end_inset

, d# 35 , d# 34 , d# 33 , d# 32 , d# 31 , d# 30 , d# 20 , d# 10 ,
\begin_inset Newline newline
\end_inset

d# -1 , ] { br }
\begin_inset Newline newline
\end_inset

: 1pa align create [ d# 300 , d# 301 , d# 17 , d# 16 , d# 15 , d# 14
\begin_inset Newline newline
\end_inset

, d# 13 , d# 12 , d# 11 , d# 21 , d# 22 , d# 23 , d# 24 , d# 25 ,
\begin_inset Newline newline
\end_inset

d# 26 , d# -1 , ] { br }
\begin_inset Newline newline
\end_inset

: 2pa align create [ d# 300 , d# 200 , d# 17 , d# 7 , d# 6 , d# 5 ,
\begin_inset Newline newline
\end_inset

d# 4 , d# 3 , d# 2 , d# 1 , d# 11 , d# 10 , d# 20 , d# 30 , d# 31
\begin_inset Newline newline
\end_inset

, d# 32 , d# 33 , d# 34 , d# 35 , d# 36 , d# 37 , d# 27 , d# 26 ,
\begin_inset Newline newline
\end_inset

d# 25 , d# 24 , d# 23 , d# 22 , d# 12 , d# 13 , d# 14 , d# 15 , d# 16
\begin_inset Newline newline
\end_inset

, d# 17 , d# -1 , ] { br }
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0021C400 ) D# 113 shadow{ 
\begin_inset Newline newline
\end_inset

: 0pth 1pth 2pth ( are manually set route lists for using the north,
\begin_inset Newline newline
\end_inset

south, and west ports of node 19.
 end list is marked by -1 ) { br }
\begin_inset Newline newline
\end_inset

( this block has plenty of extra room so that you may customize the
\begin_inset Newline newline
\end_inset

available lists without changing the reference versions.
 ) }block
\begin_inset Newline newline
\end_inset

( 0021C800 ) D# 114 code{ 
\begin_inset Newline newline
\end_inset

( windows async ) [ d# 114 orgn ! macro ]
\begin_inset Newline newline
\end_inset

: 1@ ( b-c ) h# 0000008A 2, ; { -cr } : 1! ( cb ) < a! > h# 00000288
\begin_inset Newline newline
\end_inset

2, < drop > ;
\begin_inset Newline newline
\end_inset

: 2@ ( b-h ) h# 00008B66 3, ; { -cr } : 2! ( hb ) < a! > h# 00028966
\begin_inset Newline newline
\end_inset

3, < drop > ;
\begin_inset Newline newline
\end_inset

: 4@ ( b-n ) h# 0000008B 2, ; { -cr } : 4! ( nb ) < a! > h# 00000289
\begin_inset Newline newline
\end_inset

2, < drop > ;
\begin_inset Newline newline
\end_inset

: swab ( h-h ) h# 0000C486 2, ;
\begin_inset Newline newline
\end_inset

: swa4 ( n-n ) h# 0000C80F 2, ; [ forth ]
\begin_inset Newline newline
\end_inset

: a-b ( a-b ) 2* 2* ; { -cr } : b-a ( b-a ) [ d# 3 ] + 2/ 2/ ;
\begin_inset Newline newline
\end_inset

: create ( -a ) pop b-a ; { -cr } : rez ( n ) h +! ;
\begin_inset Newline newline
\end_inset

: +or ( nn-n ) over - and or ;
\begin_inset Newline newline
\end_inset

: ?zero ( n-n ) [ d# 0 ] or if dup or ; then ( - ) [ d# -1 ] or ; { br }
\begin_inset Newline newline
\end_inset

:# act 0 :# vport 373 :# 0tg 1 :# 1tg 1 :# 2tg 1
\begin_inset Newline newline
\end_inset

: cold d# 1 [ 0tg ] ! d# 1 [ 1tg ] ! d# 1 [ 2tg ] ! d# 0 [ act ] !
\begin_inset Newline newline
\end_inset

; { br }
\begin_inset Newline newline
\end_inset

( ser ) [ d# 116 d# 2 loads ] ( routes ) [ d# 120 load ] { cr }
\begin_inset Newline newline
\end_inset

( generic ) [ d# 122 d# 6 loads ] ( panel ) [ d# 134 load ] { cr }
\begin_inset Newline newline
\end_inset

( user ) [ d# 136 load ] ( canon ) [ d# 138 load ] }block
\begin_inset Newline newline
\end_inset

( 0021CC00 ) D# 115 shadow{ 
\begin_inset Newline newline
\end_inset

( talk to chip via onspec usb.
 ) { br }
\begin_inset Newline newline
\end_inset

: 1@ ( and ) 1! ( byte fetch and store, byte address.
 )
\begin_inset Newline newline
\end_inset

: 2@ ( and ) 2! ( halfcell fetch/store, byte adr.
 )
\begin_inset Newline newline
\end_inset

: swab ( and ) swa4 ( 2-way and 4-way byte swaps.
 )
\begin_inset Newline newline
\end_inset

: a-b ( and ) b-a ( convert cells to+from bytes.
 ) { br }
\begin_inset Newline newline
\end_inset

: bofs ( and ) ofs ( make byte and cell offset adrs in a structure
\begin_inset Newline newline
\end_inset

given byte posn and byte width.
 )
\begin_inset Newline newline
\end_inset

: create ( used after ) [ align ] ( to exit with word adr of cell following
\begin_inset Newline newline
\end_inset

in dictionary.
 ) [ note that writing into such allocations invalidates
\begin_inset Newline newline
\end_inset

nearby instruction cache! ]
\begin_inset Newline newline
\end_inset

: rez ( allots n bytes in the dictionary.
 )
\begin_inset Newline newline
\end_inset

: +or ( inclusive or.
 )
\begin_inset Newline newline
\end_inset

: ?zero ( classical zero-equal returning 0 or -1 with indicators.
 )
\begin_inset Newline newline
\end_inset

{ br }
\begin_inset Newline newline
\end_inset

: ntgt ( indices for active paths, 1 for adjacent.
 )
\begin_inset Newline newline
\end_inset

: act ( number of selected path, to which ) vport ( leads.
 )
\begin_inset Newline newline
\end_inset

: cold ( sets no active paths.
 )
\begin_inset Newline newline
\end_inset

: user ( test code before canonicals.
 ) }block
\begin_inset Newline newline
\end_inset

( 0021D000 ) D# 116 code{ 
\begin_inset Newline newline
\end_inset

( async umbilical ) :# sport 18 [ d# 18 sport ! ]
\begin_inset Newline newline
\end_inset

: rsh ( ni-n ) d# 0 + if for 2/ next ; then drop ;
\begin_inset Newline newline
\end_inset

: sdat align create [ d# 24576 rez ] :# bi 30
\begin_inset Newline newline
\end_inset

: -stream d# 0 [ bi ] ! ;
\begin_inset Newline newline
\end_inset

: stream ( -b ) [ sdat a-b ] ;
\begin_inset Newline newline
\end_inset

: /str ( -b ) [ bi ] @ [ stream ] + ; { br }
\begin_inset Newline newline
\end_inset

: @18 ( -n ) /str 4@ [ h# 0003FFFF ] and
\begin_inset Newline newline
\end_inset

: +wd d# 3 [ bi ] +! ;
\begin_inset Newline newline
\end_inset

: !18 ( n ) [ h# 0003FFFF ] or [ h# 00000040 ] * [ h# 00000012 ] +
\begin_inset Newline newline
\end_inset

/str 4! +wd ; { br }
\begin_inset Newline newline
\end_inset

: snam ( -a ) align create ( //./ ) [ H# 2F2E2F2F , ] ( com ) [ h# 006D6F63
\begin_inset Newline newline
\end_inset

, h# 00000000 , ]
\begin_inset Newline newline
\end_inset

: !nam [ sport ] @ d# 10 over - + drop -if d# 256 * d# 2560 /mod +
\begin_inset Newline newline
\end_inset

h# 00003000 + then h# 00000030 + snam a-b d# 7 + 4! ; [ !nam ]
\begin_inset Newline newline
\end_inset

: +sea ( -ok ) snam r/w fopen [ dh ] ! if d# 1 ; then d# 0 ;
\begin_inset Newline newline
\end_inset

: -sea [ dh ] @ [ d# 0 ] + if fclose d# 0 then [ dh ] ! ;
\begin_inset Newline newline
\end_inset

: ctl! ( n ) [ dh ] @ fesc drop ;
\begin_inset Newline newline
\end_inset

: reset [ d# 3 ] ctl! [ d# 500000 ] for next [ d# 4 ] ctl! ;
\begin_inset Newline newline
\end_inset

: tosea ( bn ) [ dh ] @ fwr drop ;
\begin_inset Newline newline
\end_inset

: insea ( w ) stream swap [ d# 3 ] * [ dh ] @ frd drop ; }block
\begin_inset Newline newline
\end_inset

( 0021D400 ) D# 117 shadow{ 
\begin_inset Newline newline
\end_inset

( async data are 18 bits per 3 bytes.
 to chip word inverted, shifted
\begin_inset Newline newline
\end_inset

up 6, '12' inserted, then sent low order byte first.
 from chip are
\begin_inset Newline newline
\end_inset

tbd.
 ) { br }
\begin_inset Newline newline
\end_inset

: sport ( comp com port number )
\begin_inset Newline newline
\end_inset

: 4@ ( and ) 4! ( full cell on byte address.
 )
\begin_inset Newline newline
\end_inset

: snam ( null terminated string //./comx )
\begin_inset Newline newline
\end_inset

: !nam ( sets port number in snam.
 )
\begin_inset Newline newline
\end_inset

: +sea ( opens serial; true if good, handle in dh.
 )
\begin_inset Newline newline
\end_inset

: -sea ( closes the handle.
 )
\begin_inset Newline newline
\end_inset

: /sea ( resets the chip.
 )
\begin_inset Newline newline
\end_inset

: tosea ( transmits w halfwords, b bits with op ) [ wos ] ( or ) [ wos!
 ]
\begin_inset Newline newline
\end_inset

( as you wish.
 )
\begin_inset Newline newline
\end_inset

: insea ( receives w g18 words from the sync boot node.
 ) { br }
\begin_inset Newline newline
\end_inset

: -stream ( clears byte index ) bi ( in ) sdat ( buffer.
 )
\begin_inset Newline newline
\end_inset

: stream ( byte adr of buffer.
 )
\begin_inset Newline newline
\end_inset

: /str ( byte adr of next 18-bit slot in buff.
 ) { br }
\begin_inset Newline newline
\end_inset

: @18 ( returns the next 18 bits from the stream.
 )
\begin_inset Newline newline
\end_inset

: !18 ( appends 18 bits to the stream.
 no higher order bits may be
\begin_inset Newline newline
\end_inset

present! ) }block
\begin_inset Newline newline
\end_inset

( 0021D800 ) D# 118 code{ 
\begin_inset Newline newline
\end_inset

( node { 0000588F } boot frames )
\begin_inset Newline newline
\end_inset

: wos ( -n ) d# 0 ;
\begin_inset Newline newline
\end_inset

: /frame ( nw xfr jmp ) -stream [ h# 00010000 ] + !18 !18 [ d# 1 ]
\begin_inset Newline newline
\end_inset

+ 2/ ( words ) 2* ( actual { FFFFFFEF } + ) !18 ;
\begin_inset Newline newline
\end_inset

: +frame ( wn ) for dup @ !18 [ d# 1 ] + next drop ;
\begin_inset Newline newline
\end_inset

: +ram ( w n node ) nn-n 2* [ h# 00008000 ] + block u+ for dup @ [
\begin_inset Newline newline
\end_inset

h# 00015555 ] or !18 [ d# 1 ] + next drop ;
\begin_inset Newline newline
\end_inset

: !frame ( f ) drop stream [ bi ] @ tosea ; { br }
\begin_inset Newline newline
\end_inset

: exec [ h# 000000AE ] ;
\begin_inset Newline newline
\end_inset

: talk cold -sea +sea if drop reset h# 00000040 d# 0 [ exec ] /frame
\begin_inset Newline newline
\end_inset

h# 00000000 h# 00000040 { 0000042F } d# 708 +ram [ wos ] !frame ( good )
\begin_inset Newline newline
\end_inset

; then ( bad ) -sea ; { cr }
\begin_inset Newline newline
\end_inset

: exch ( w n f n ) push push dup [ h# 00000002 ] + [ d# -2 ] and [ vport
 ]
\begin_inset Newline newline
\end_inset

@ pop /frame [ vport ] @ [ h# 00012000 ] + !18 dup - [ h# 00000001 ]
\begin_inset Newline newline
\end_inset

and drop if [ vport ] @ [ h# 00010000 ] + !18 then +frame [ wos ]
\begin_inset Newline newline
\end_inset

!frame pop insea -stream ; { br }
\begin_inset Newline newline
\end_inset

: ok [ h# 00000012 ] ;
\begin_inset Newline newline
\end_inset

: fet [ h# 00000015 ] ;
\begin_inset Newline newline
\end_inset

: stat [ h# 0000001B ] ;
\begin_inset Newline newline
\end_inset

: bstk [ h# 0000001D ] ; }block
\begin_inset Newline newline
\end_inset

( 0021DC00 ) D# 119 shadow{ 
\begin_inset Newline newline
\end_inset

( boot frames begin with a 3 word header; ) { indent }
\begin_inset Newline newline
\end_inset

100xx ( jump to xx when done ) { indent }
\begin_inset Newline newline
\end_inset

ddd ( mem/port adr to store payload ) { indent }
\begin_inset Newline newline
\end_inset

nnn ( transfer length ) { indent }
\begin_inset Newline newline
\end_inset

[ nnn+1 * 2 ] ( words of payload )
\begin_inset Newline newline
\end_inset

: /frame ( heads a new given ) [ even ] ( words of payload, destination
\begin_inset Newline newline
\end_inset

addr, final jump addr.
 )
\begin_inset Newline newline
\end_inset

: +frame ( appends words to payload.
 )
\begin_inset Newline newline
\end_inset

: +ram ( appends a string of code from binary produced by ) compile
\begin_inset Newline newline
\end_inset

( for the given ) [ node.
 ]
\begin_inset Newline newline
\end_inset

: !frame ( transmits frame given ) [ wos ] ( or ) [ wos! ] { br }
\begin_inset Newline newline
\end_inset

: talk ( prepares chip for control thru node 19.
 )
\begin_inset Newline newline
\end_inset

: exch ( performs a transaction with target given addr and length of
\begin_inset Newline newline
\end_inset

port stream, stream end action in boot node, and number of words reply.
 )
\begin_inset Newline newline
\end_inset

{ cr }
\begin_inset Newline newline
\end_inset

: ok ( stream end to simply ack completion; ) fet ( pumps one word
\begin_inset Newline newline
\end_inset

from target; ) bstk ( shepherds stack dump; ) stat ( pumps ten.
 )
\begin_inset Newline newline
\end_inset

exec ( is next boot frame.
 ) }block
\begin_inset Newline newline
\end_inset

( 0021E000 ) D# 120 code{ 
\begin_inset Newline newline
\end_inset

( node { 0000588F } route lists )
\begin_inset Newline newline
\end_inset

: 0pa align create [ d# 708 , d# 707 , d# 706 , d# 705 , d# 704 , d# 703
\begin_inset Newline newline
\end_inset

, d# 702 , d# 701 , d# 700 , d# 600 , d# 500 , d# 400 , d# 300 , d# 200
\begin_inset Newline newline
\end_inset

, d# 100 , d# 0 , d# 1 , d# 2 , d# 3 , d# 4 , d# 5 , d# 6 , d# 7 ,
\begin_inset Newline newline
\end_inset

d# 8 , d# 9 , d# 10 , d# 11 , d# 12 , d# 13 , d# 14 , d# 15 , d# 16
\begin_inset Newline newline
\end_inset

, d# 17 , d# 117 , d# 217 , d# 317 , d# 417 , d# 517 , d# 617 , d# 717
\begin_inset Newline newline
\end_inset

, d# 716 , d# 715 , d# 714 , d# 713 , d# 712 , d# 711 , d# 710 , d# 709
\begin_inset Newline newline
\end_inset

, d# 708 , d# -1 , ]
\begin_inset Newline newline
\end_inset

: 1pa align create [ d# 708 , d# 608 , d# -1 , ]
\begin_inset Newline newline
\end_inset

: 2pa align create [ d# 708 , d# 709 , d# 710 , d# 711 , d# 712 , d# 713
\begin_inset Newline newline
\end_inset

, d# 714 , d# 715 , d# 716 , d# 717 , d# 617 , d# 517 , d# 417 , d# 317
\begin_inset Newline newline
\end_inset

, d# 217 , d# 117 , d# 17 , d# 16 , d# 15 , d# 14 , d# 13 , d# 12
\begin_inset Newline newline
\end_inset

, d# 11 , d# 10 , d# 9 , d# 8 , d# 7 , d# 6 , d# 5 , d# 4 , d# 3 ,
\begin_inset Newline newline
\end_inset

d# 2 , d# 1 , d# 0 , d# 100 , d# 101 , d# 102 , d# 103 , d# 104 ,
\begin_inset Newline newline
\end_inset

d# 105 , d# 106 , d# 107 , d# 108 , d# 109 , d# 110 , d# 111 , d# 112
\begin_inset Newline newline
\end_inset

, d# 113 , d# 114 , d# 115 , d# 116 , ] { cr }
\begin_inset Newline newline
\end_inset

( rest ) [ d# 140 load ] }block
\begin_inset Newline newline
\end_inset

( 0021E400 ) D# 121 shadow{ 
\begin_inset Newline newline
\end_inset

: 0pth 1pth 2pth ( are manually set route lists for using the north,
\begin_inset Newline newline
\end_inset

south, and west ports of node 19.
 end list is marked by -1 ) { br }
\begin_inset Newline newline
\end_inset

( this block has plenty of extra room so that you may customize the
\begin_inset Newline newline
\end_inset

available lists without changing the reference versions.
 ) }block
\begin_inset Newline newline
\end_inset

( 0021E800 ) D# 122 code{ 
\begin_inset Newline newline
\end_inset

( boot target adjacent )
\begin_inset Newline newline
\end_inset

: wall ( nn-i ) over over or [ d# 1 ] and drop if or [ d# 2 ] and ;
\begin_inset Newline newline
\end_inset

then { 0000014F } [ d# 100 ] / swap { 0000014F } [ d# 100 ] / or [
\begin_inset Newline newline
\end_inset

d# 2 ] and [ d# 1 ] + ; { br }
\begin_inset Newline newline
\end_inset

: do! align create ( @p+a!.@p+ ) [ h# 00004AB7 , ] { indent }
\begin_inset Newline newline
\end_inset

[ h# 00000000 , h# 00000000 , ] ( !;;; ) [ h# 0000B555 , ]
\begin_inset Newline newline
\end_inset

: do@ align create ( ...@p+ ) [ h# 0002C9B7 , ] { indent }
\begin_inset Newline newline
\end_inset

[ h# 00000000 , ] ( a!@!p+; ) [ h# 0002BE35 , ]
\begin_inset Newline newline
\end_inset

: doi align create [ h# 00010000 , ]
\begin_inset Newline newline
\end_inset

: dopu align create ( @p+; ) [ h# 00005555 , h# 00000000 , ]
\begin_inset Newline newline
\end_inset

: dostk align create ( !p+dup-push!p+ ) [ h# 0000CDBE , ] { br }
\begin_inset Newline newline
\end_inset

: aa@ ( a-n ) [ do@ d# 1 + ] ! do@ [ d# 3 ] fet [ d# 1 ] exch @18 ;
\begin_inset Newline newline
\end_inset

: aa! ( na ) [ do! d# 1 + ] ! [ do! d# 2 + ] ! do! [ d# 4 ] ok [ d# 1 ]
\begin_inset Newline newline
\end_inset

exch ;
\begin_inset Newline newline
\end_inset

: acall ( a ) [ h# 00010000 ] +
\begin_inset Newline newline
\end_inset

: ains ( w ) [ doi ] ! doi [ d# 1 ] ok [ d# 1 ] exch ;
\begin_inset Newline newline
\end_inset

: apsh ( n ) [ dopu d# 1 + ] ! dopu [ d# 2 ] ok [ d# 1 ] exch ;
\begin_inset Newline newline
\end_inset

: astk dostk [ d# 1 ] bstk [ d# 10 ] exch ; }block
\begin_inset Newline newline
\end_inset

( 0021EC00 ) D# 123 shadow{ 
\begin_inset Newline newline
\end_inset

( this code supports boot node controlling one of its immediate neighbors
\begin_inset Newline newline
\end_inset

directly.
 ) [ these all begin with focusing call and each must return! ]
\begin_inset Newline newline
\end_inset

{ cr }
\begin_inset Newline newline
\end_inset

: port ( returns port for 0-3 rdlu ndx, then edges )
\begin_inset Newline newline
\end_inset

: wall ( is index for port between two nodes ) { br }
\begin_inset Newline newline
\end_inset

: doxxx ( port execution templates for target.
 )
\begin_inset Newline newline
\end_inset

: aa@ ( fetches from memory or port in target onto our stack here.
 )
\begin_inset Newline newline
\end_inset

: aa! ( stores a value from our stack here to port or memory in target.
 )
\begin_inset Newline newline
\end_inset

: ains ( executes an arbitrary instruction word which must end by returning.
 )
\begin_inset Newline newline
\end_inset

: acall ( executes a target word which must return or jump to ports.
 )
\begin_inset Newline newline
\end_inset

: apsh ( pushes a number onto target stack.
 )
\begin_inset Newline newline
\end_inset

: astk ( queries target stack nondestructively.
 ) }block
\begin_inset Newline newline
\end_inset

( 0021F000 ) D# 124 code{ 
\begin_inset Newline newline
\end_inset

( stream components ) :# 'pth 67522897
\begin_inset Newline newline
\end_inset

: nstream ( an-n'w ) swap [ 'pth ] ! [ d# -2 ] + -if [ d# 0 ] pop drop
\begin_inset Newline newline
\end_inset

; then ( pre ) [ d# 2 ] ;
\begin_inset Newline newline
\end_inset

: ?path ( i-n ) [ 'pth ] @ + @ ;
\begin_inset Newline newline
\end_inset

: side ( n-a ) [ 'pth ] @ + dup @ swap [ d# 1 ] + @ wall port ;
\begin_inset Newline newline
\end_inset

: /hdr ( w-w ) dup [ d# -2 ] and [ d# 0 ] side [ exec ] /frame ( pre )
\begin_inset Newline newline
\end_inset

[ d# 0 ] side [ h# 00012000 ] + !18 [ d# -1 ] + dup [ d# 1 ] and drop
\begin_inset Newline newline
\end_inset

if [ d# 0 ] side [ h# 00010000 ] + !18 then [ d# -1 ] + ; { br }
\begin_inset Newline newline
\end_inset

: +pump ( nw-nw ) [ d# -8 ] + ( @p+b!@p+@p+ ) [ h# 00004B17 ] !18 { cr }
\begin_inset Newline newline
\end_inset

[ h# 00000001 ] side dup !18 dup [ h# 00010000 ] + !18 [ h# 00012000 ]
\begin_inset Newline newline
\end_inset

+ !18 { cr }
\begin_inset Newline newline
\end_inset

( !b!b.@p+ ) [ h# 00009BB7 ] !18 ( w ) dup [ d# -1 ] + !18 { cr }
\begin_inset Newline newline
\end_inset

( dup-push-if ) [ h# 00024861 ] !18 ( @p+!b.unext ) [ h# 00005BB4 ]
\begin_inset Newline newline
\end_inset

!18 ;
\begin_inset Newline newline
\end_inset

: +load ( w n nb nd ) push push ( @p+a!.@p+ ) [ h# 00004AB7 ] !18 ( a )
\begin_inset Newline newline
\end_inset

over !18 ( n ) [ d# -1 ] + !18 ( dup-push-if ) [ h# 00024861 ] !18
\begin_inset Newline newline
\end_inset

{ cr }
\begin_inset Newline newline
\end_inset

( @p+!+.unxt ) [ h# 000058B4 ] !18 pop pop +ram ;
\begin_inset Newline newline
\end_inset

: +post ( p @p+b!.@p+ ) [ h# 00004BB7 ] !18 [ d# 1 ] side !18 [ d# 0 ]
\begin_inset Newline newline
\end_inset

side !18 ( a!@p+push; ) [ h# 0002BDBD ] !18 ( p ) !18 ; }block
\begin_inset Newline newline
\end_inset

( 0021F400 ) D# 125 shadow{ 
\begin_inset Newline newline
\end_inset

( templates and load streams )
\begin_inset Newline newline
\end_inset

: 'pth ( current posn in path list of nodes.
 )
\begin_inset Newline newline
\end_inset

: nstream ( given addr of path tbl, nodes away, gives no of wire nodes
\begin_inset Newline newline
\end_inset

and total stream length )
\begin_inset Newline newline
\end_inset

: ?path ( returns node number relative to current posn in selected
\begin_inset Newline newline
\end_inset

path.
 )
\begin_inset Newline newline
\end_inset

: side ( gives adr of ) 0 ( near, ) 1 ( far side next node )
\begin_inset Newline newline
\end_inset

: /hdr ( starts a stream of given length; if odd, we leave out jump
\begin_inset Newline newline
\end_inset

after waking 1st node.
 ) { br }
\begin_inset Newline newline
\end_inset

: +pump ( makes port pump thru next node; its ram load and init postamble
\begin_inset Newline newline
\end_inset

must be out of w.
 )
\begin_inset Newline newline
\end_inset

: +load ( builds a program load from binary given node ram addr, word
\begin_inset Newline newline
\end_inset

count, words to take from binary, and node number.
 caller must append
\begin_inset Newline newline
\end_inset

any words not taken from binary.
 )
\begin_inset Newline newline
\end_inset

: +post ( follows a node's ram load to set b to out, a to in, and jump
\begin_inset Newline newline
\end_inset

to ) p.
 }block
\begin_inset Newline newline
\end_inset

( 0021F800 ) D# 126 code{ 
\begin_inset Newline newline
\end_inset

( umbilical plumbing )
\begin_inset Newline newline
\end_inset

: using ( nn ) wall port [ vport ] ! ;
\begin_inset Newline newline
\end_inset

: avail ( n-p ) nn-n idle ; { br }
\begin_inset Newline newline
\end_inset

: +path ( n'wn-n'w ) dup [ 'pth ] +! negate u+ ; { br }
\begin_inset Newline newline
\end_inset

: rip ( nw-nw ) [ d# 0 ] u+ if ( post ) [ d# -5 ] + +pump [ d# 1 ]
\begin_inset Newline newline
\end_inset

+path rip [ d# -1 ] +path then [ d# 1 ] ?path avail +post ;
\begin_inset Newline newline
\end_inset

: rips ( an-n'w ) nstream over [ d# 13 ] * + [ d# 5 ] + /hdr rip
\begin_inset Newline newline
\end_inset

: hose ( nw ) drop drop d# 0 ?path d# 1 ?path using [ wos ] !frame
\begin_inset Newline newline
\end_inset

; { br }
\begin_inset Newline newline
\end_inset

: wire ( nw-nw ) [ d# 0 ] u+ if ( wire ) [ h# 00000016 d# 10 + negate ]
\begin_inset Newline newline
\end_inset

+ +pump [ d# 1 ] +path wire [ d# -1 ] +path ( wire ) h# 00000000 [
\begin_inset Newline newline
\end_inset

h# 00000016 ] dup { 000000EF } d# 17 +load [ d# 0 ] side +post ; then
\begin_inset Newline newline
\end_inset

( last ) h# 00000000 [ h# 00000020 ] dup [ d# -1 ] + { 000000CF }
\begin_inset Newline newline
\end_inset

d# 16 +load [ d# 1 ] side [ h# 00012000 ] + !18 [ d# 0 ] side +post
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset

: wires ( an-n'w ) nstream over [ d# 18 ] ( lwire ) [ h# 00000016 + ]
\begin_inset Newline newline
\end_inset

* + [ d# 10 ] ( llast ) [ h# 00000020 + ] + nop /hdr wire hose ; }block
\begin_inset Newline newline
\end_inset

( 0021FC00 ) D# 127 shadow{ 
\begin_inset Newline newline
\end_inset

( this block creates and destroys umbilical wiring within the chip.
 )
\begin_inset Newline newline
\end_inset

{ br }
\begin_inset Newline newline
\end_inset

: using ( sets ) vport ( between given pair of nodes.
 )
\begin_inset Newline newline
\end_inset

: avail ( is idle pc val for given node.
 ) { br }
\begin_inset Newline newline
\end_inset

: +path ( steps ) pos ( to, ) neg ( away from target.
 ) { br }
\begin_inset Newline newline
\end_inset

: wires ( builds wire for path table ) [ a.
 ] ( entry zero is boot
\begin_inset Newline newline
\end_inset

node.
 ) [ n ] ( is number of nodes away from boot in path; ) 0 ( no
\begin_inset Newline newline
\end_inset

uut, ) 1 ( no wire, uut is meighbor, ) 2 ( neighbor is last guy, )
\begin_inset Newline newline
\end_inset

3 [ n-2 ] ( wire nodes then last guy.
 generates call at end of last
\begin_inset Newline newline
\end_inset

guy pgm that last guy sends target for focus.
 )
\begin_inset Newline newline
\end_inset

: rips ( rips out a wire built by ) wire }block
\begin_inset Newline newline
\end_inset

( 00220000 ) D# 128 code{ 
\begin_inset Newline newline
\end_inset

( routing control )
\begin_inset Newline newline
\end_inset

: targets ( -a ) [ act ] @ align tbl [ 0tg , 1tg , 2tg , ]
\begin_inset Newline newline
\end_inset

: paths ( -a ) [ act ] @ align tbl [ 0pa , 1pa , 2pa , ] { br }
\begin_inset Newline newline
\end_inset

: path ( i ) [ act ] ! paths dup @ swap [ d# 1 ] + @ wall port [ vport ]
\begin_inset Newline newline
\end_inset

! ;
\begin_inset Newline newline
\end_inset

: node ( n ) [ d# 3 ] for i [ d# -1 ] + path paths targets @ + @ over
\begin_inset Newline newline
\end_inset

or drop while next drop ; then pop drop drop ; { br }
\begin_inset Newline newline
\end_inset

: -hook ( i ) path targets @ [ d# 1 ] or drop if paths targets @ rips
\begin_inset Newline newline
\end_inset

[ d# 1 ] targets ! then ;
\begin_inset Newline newline
\end_inset

: hook ( i n ) swap -hook [ d# 2 ] begin over over paths + @ or drop
\begin_inset Newline newline
\end_inset

while dup paths + @ [ d# 0 ] + drop -if drop drop ; then [ d# 1 ]
\begin_inset Newline newline
\end_inset

+ end then dup targets ! paths swap wires drop ; { br }
\begin_inset Newline newline
\end_inset

: ?adj pop [ d# 1 ] + dup 4@ swap [ d# 4 ] + targets @ d# 1 or drop
\begin_inset Newline newline
\end_inset

if push drop ; then + push ; }block
\begin_inset Newline newline
\end_inset

( 00220400 ) D# 129 shadow{ 
\begin_inset Newline newline
\end_inset

( these functions support route setup and selection for internal wiring.
 )
\begin_inset Newline newline
\end_inset

{ br }
\begin_inset Newline newline
\end_inset

: targets ( table of target index variables.
 )
\begin_inset Newline newline
\end_inset

: paths ( table of route lists.
 ) { br }
\begin_inset Newline newline
\end_inset

: path ( selects active path ) [ i ] ( 0,1,2 )
\begin_inset Newline newline
\end_inset

: node ( selects path whose target is node ) [ n ] { br }
\begin_inset Newline newline
\end_inset

: -hook ( rips out any wiring on path ) [ i ]
\begin_inset Newline newline
\end_inset

: hook ( hooks up path ) [ i ] ( to node ) [ n ] ( ripping out any
\begin_inset Newline newline
\end_inset

old wiring on that path.
 ) { br }
\begin_inset Newline newline
\end_inset

: ?adj ( executes following word and exits defn if selected path is
\begin_inset Newline newline
\end_inset

to adjacent node, otherwise skips following word.
 ) }block
\begin_inset Newline newline
\end_inset

( 00220800 ) D# 130 code{ 
\begin_inset Newline newline
\end_inset

( target anywhere )
\begin_inset Newline newline
\end_inset

: dor! align create [ h# 00012005 , h# 00000000 , h# 00000000 , ]
\begin_inset Newline newline
\end_inset

: dor@ align create [ h# 00012000 , h# 00000000 , ]
\begin_inset Newline newline
\end_inset

: dori align create [ h# 0001200A , h# 00000000 , ]
\begin_inset Newline newline
\end_inset

: dorp align create [ h# 0001200D , h# 00000000 , ]
\begin_inset Newline newline
\end_inset

: dorst align create [ h# 00012010 , ]
\begin_inset Newline newline
\end_inset

: stak align create [ d# 40 rez ] { br }
\begin_inset Newline newline
\end_inset

: r@ ( a-n ) ?adj aa@ [ dor@ d# 1 + ] ! dor@ [ d# 2 ] fet [ d# 1 ]
\begin_inset Newline newline
\end_inset

exch @18 ;
\begin_inset Newline newline
\end_inset

: r! ( na ) ?adj aa! [ dor! d# 1 + ] ! [ dor! d# 2 + ] ! dor! [ d# 3 ]
\begin_inset Newline newline
\end_inset

ok [ d# 1 ] exch ;
\begin_inset Newline newline
\end_inset

: call ( a ) [ h# 00010000 ] +
\begin_inset Newline newline
\end_inset

: rins ( w ) ?adj ains [ dori d# 1 + ] ! dori [ d# 2 ] ok [ d# 1 ]
\begin_inset Newline newline
\end_inset

exch ;
\begin_inset Newline newline
\end_inset

: lit' ( n ) ?adj apsh [ dorp d# 1 + ] ! dorp [ d# 2 ] ok [ d# 1 ]
\begin_inset Newline newline
\end_inset

exch ;
\begin_inset Newline newline
\end_inset

: aupd astk
\begin_inset Newline newline
\end_inset

: @stk @18 ( s ) [ stak d# 1 + ] ! @18 ( t ) [ stak ] ! [ stak d# 2
\begin_inset Newline newline
\end_inset

+ ] d# 8 for @18 over ! [ d# 1 ] + next drop ;
\begin_inset Newline newline
\end_inset

: upd ?adj aupd dorst [ d# 1 ] stat [ d# 10 ] exch @stk ;
\begin_inset Newline newline
\end_inset

: lit lit' upd ;
\begin_inset Newline newline
\end_inset

: boot ( a n nd ) nn-n swap push 2* d# 32768 + block over + swap begin
\begin_inset Newline newline
\end_inset

over @ [ h# 00015555 ] or over r! [ d# 1 ] + [ d# 1 ] u+ next drop
\begin_inset Newline newline
\end_inset

drop ; }block
\begin_inset Newline newline
\end_inset

( 00220C00 ) D# 131 shadow{ 
\begin_inset Newline newline
\end_inset

( these operations work on any target node.
 ) { br }
\begin_inset Newline newline
\end_inset

: dorx ( port templates for remote target.
 ) { br }
\begin_inset Newline newline
\end_inset

: r@ r! rins lit call ( are the specific names for the primitives using
\begin_inset Newline newline
\end_inset

appropriate sequences for adjacent or remote target nodes.
 ) { br }
\begin_inset Newline newline
\end_inset

: boot ( loads code into current remote node from binary image for
\begin_inset Newline newline
\end_inset

node ) [ nd ] ( from addr ) [ a ] ( in both image and ram for ) [ n ]
\begin_inset Newline newline
\end_inset

( words.
 ) }block
\begin_inset Newline newline
\end_inset

( 00221000 ) D# 132 code{ 
\begin_inset Newline newline
\end_inset

( remote instructions )
\begin_inset Newline newline
\end_inset

: compile recompile ;
\begin_inset Newline newline
\end_inset

: focus paths targets @ + dup @ swap d# -1 + @ wall port call ;
\begin_inset Newline newline
\end_inset

: virgin paths targets @ + @ avail call ; { br }
\begin_inset Newline newline
\end_inset

: rop ( n ) [ h# 0000000A ] or [ d# 13 ] for 2* next ( ;s ) [ h# 00001555
 ]
\begin_inset Newline newline
\end_inset

+ rins upd ;
\begin_inset Newline newline
\end_inset

: @+ [ h# 00000009 ] rop ; { -cr } : !+ [ h# 0000000D ] rop ; { -cr } 
\begin_inset Newline newline
\end_inset

: !b [ h# 0000000E ] rop ;
\begin_inset Newline newline
\end_inset

: r+* [ h# 00000010 ] rop ;
\begin_inset Newline newline
\end_inset

: r2* [ h# 00000011 ] rop ; { -cr } : r2/ [ h# 00000012 ] rop ;
\begin_inset Newline newline
\end_inset

: r- [ h# 00000013 ] rop ; { -cr } : r+ [ h# 00000014 ] rop ;
\begin_inset Newline newline
\end_inset

: rand [ h# 00000015 ] rop ; { -cr } : ror [ h# 00000016 ] rop ;
\begin_inset Newline newline
\end_inset

: rdrop [ h# 00000017 ] rop ; { -cr } : rdup [ h# 00000018 ] rop ;
\begin_inset Newline newline
\end_inset

: rover [ h# 0000001A ] rop ;
\begin_inset Newline newline
\end_inset

: ra! [ h# 0000001F ] rop ; { -cr } : ra@ [ h# 0000001B ] rop ;
\begin_inset Newline newline
\end_inset

: rb! [ h# 0000001E ] rop ; { br }
\begin_inset Newline newline
\end_inset

: io h# 0000015D ; { -cr } : data h# 00000141 ; { -cr } : up h# 00000145
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset

: down h# 00000115 ; { -cr } : left h# 00000175 ; { -cr } : right h# 000001D5
\begin_inset Newline newline
\end_inset

; }block
\begin_inset Newline newline
\end_inset

( 00221400 ) D# 133 shadow{ 
\begin_inset Newline newline
\end_inset

( single instruction words that may be executed by the target.
 these
\begin_inset Newline newline
\end_inset

must end with return for s40 restriction compliance.
 ) { br }
\begin_inset Newline newline
\end_inset

( the following won't work on s40 due to bug 1.
 )
\begin_inset Newline newline
\end_inset

: r@p+ [ h# 0000000C ] rop ;
\begin_inset Newline newline
\end_inset

: psh ( n ) r@p+ ( value ) rins ; }block
\begin_inset Newline newline
\end_inset

( 00221800 ) D# 134 code{ 
\begin_inset Newline newline
\end_inset

UNKNOWN ( indicator panel ) [ d# 135 load ] ( node stack / upd ) { .s
\begin_inset Newline newline
\end_inset

br }
\begin_inset Newline newline
\end_inset

UNKNOWN ( path, via, hops, tgt - green selected ) { .pth br }
\begin_inset Newline newline
\end_inset

UNKNOWN ( mem dump / ?ram or ?rom ) { .ram }
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00221C00 ) D# 135 shadow{ 
\begin_inset Newline newline
\end_inset

( code for panel )
\begin_inset Newline newline
\end_inset

: panel [ d# 134 ] list ;
\begin_inset Newline newline
\end_inset

: .s silver cr cr [ stak d# 6 + ] d# 4 for dup @ d# 5 h.n space [ d# 1 ]
\begin_inset Newline newline
\end_inset

+ next [ d# -5 ] + cr d# 6 for dup @ d# 5 h.n space [ d# -1 ] + next
\begin_inset Newline newline
\end_inset

drop ;
\begin_inset Newline newline
\end_inset

: ?color ( nn-nn ) over over or drop if silver ; then green ;
\begin_inset Newline newline
\end_inset

: .pth [ act ] @ cr d# 3 for cr i [ d# -1 ] + path [ act ] @ ?color
\begin_inset Newline newline
\end_inset

.
 paths dup [ d# 1 ] + @ .
 targets @ dup .
 + @ .
 next path ; { br }
\begin_inset Newline newline
\end_inset

: /ram align create [ d# 64 a-b rez ]
\begin_inset Newline newline
\end_inset

: rsp ( n dup ) d# 1 and drop if sp/2 then ;
\begin_inset Newline newline
\end_inset

: .ram silver cr [ /ram ] d# 64 for i [ d# 7 ] and ?zero drop if cr
\begin_inset Newline newline
\end_inset

space then i rsp dup @ d# 5 h.n i d# 1 and drop if space then [ d# 1 ]
\begin_inset Newline newline
\end_inset

+ next drop ; }block
\begin_inset Newline newline
\end_inset

( 00222000 ) D# 136 code{ 
\begin_inset Newline newline
\end_inset

( tester )
\begin_inset Newline newline
\end_inset

: ent d# 0 ;
\begin_inset Newline newline
\end_inset

: n6tst d# 0 d# 64 d# 6 boot ent call d# 0 r@ dup d# 123 + dup d# 0
\begin_inset Newline newline
\end_inset

r! d# 0 r@ or if abort then drop d# 0 r! ( upd ) ;
\begin_inset Newline newline
\end_inset

: rot ( n-n ) [ h# 0003FFFF ] and 2* [ h# 00040000 ] /mod + ;
\begin_inset Newline newline
\end_inset

: sto ( n ) dup [ d# 63 ] for rot dup i r! -next drop { cr }
\begin_inset Newline newline
\end_inset

[ d# 63 ] for rot i r@ over over or { indent }
\begin_inset Newline newline
\end_inset

drop if i abort then drop -next drop ;
\begin_inset Newline newline
\end_inset

: pat ( n ) [ d# 18 ] for dup sto rot next drop ;
\begin_inset Newline newline
\end_inset

: ramtst d# 0 sto h# 0003FFFF sto d# 1 pat h# 0003FFFE pat ;
\begin_inset Newline newline
\end_inset

: one ( n ) d# 2 swap hook pause ( n6tst ) ramtst ;
\begin_inset Newline newline
\end_inset

: ?ok ( n-t ) [ 0pa @ nn-n ] or ;
\begin_inset Newline newline
\end_inset

: all ( n ) nn-n [ d# 1 ] + for i [ d# -1 ] + ?ok drop if i [ d# -1 ]
\begin_inset Newline newline
\end_inset

+ n-nn one then next ;
\begin_inset Newline newline
\end_inset

: !dac ( n i ) d# 2 swap hook h# 00000155 or io r! ;
\begin_inset Newline newline
\end_inset

: !dacs ( n ) dup d# 709 !dac dup d# 713 !dac dup d# 717 !dac dup d# 617
\begin_inset Newline newline
\end_inset

!dac d# 117 !dac ;
\begin_inset Newline newline
\end_inset

: nn ( n-n ) d# -1 + dup !dacs ;
\begin_inset Newline newline
\end_inset

: ms d# 100000 * for next ;
\begin_inset Newline newline
\end_inset

: watch begin upd pause d# 1000 ms key? end ;
\begin_inset Newline newline
\end_inset

: ?ram d# 0
\begin_inset Newline newline
\end_inset

: suck ( a ) [ /ram ] d# 64 for over r@ over ! [ d# 1 ] + [ d# 1 ]
\begin_inset Newline newline
\end_inset

u+ next drop drop ;
\begin_inset Newline newline
\end_inset

: ?rom [ h# 00000080 ] suck ; }block
\begin_inset Newline newline
\end_inset

( 00222400 ) D# 137 shadow{ 
\begin_inset Newline newline
\end_inset

( this test routine tester loads and runs the code compiled for node
\begin_inset Newline newline
\end_inset

6 on all other nodes except the root, stopping if a node crashes or,
\begin_inset Newline newline
\end_inset

possibly, other failure criteria are met ) { br }
\begin_inset Newline newline
\end_inset

: one ( runs the test routine from node 6 compilation, entry point )
\begin_inset Newline newline
\end_inset

ent ( , on node ) [ n ] ( .
 aborts if we cannot write and read back
\begin_inset Newline newline
\end_inset

memory.
 )
\begin_inset Newline newline
\end_inset

: all ( tries the test starting with node n and going down to node
\begin_inset Newline newline
\end_inset

zero, skipping node 19.
 ) { br }
\begin_inset Newline newline
\end_inset

: watch ( displays live stack from current node.
 this and other interactive
\begin_inset Newline newline
\end_inset

functions can be enabled in a running program by placing a definition
\begin_inset Newline newline
\end_inset

like this in outer loop...
 )
\begin_inset Newline newline
\end_inset

: poll @b h# 00000200 and if up b! @b push ;' h# 0000015D b! then drop
\begin_inset Newline newline
\end_inset

; { br }
\begin_inset Newline newline
\end_inset

: !dac ( sets given output value in node i )
\begin_inset Newline newline
\end_inset

: !dacs ( sets given value in all dacs.
 ) }block
\begin_inset Newline newline
\end_inset

( 00222800 ) D# 138 code{ 
\begin_inset Newline newline
\end_inset

( canonical words )
\begin_inset Newline newline
\end_inset

: @ ( a-n ) r@ ;
\begin_inset Newline newline
\end_inset

: ! ( na ) r! ; ( call lit upd rins boot !b already ok )
\begin_inset Newline newline
\end_inset

: +* r+* ;
\begin_inset Newline newline
\end_inset

: 2* r2* ;
\begin_inset Newline newline
\end_inset

: 2/ r2/ ;
\begin_inset Newline newline
\end_inset

: - r- ;
\begin_inset Newline newline
\end_inset

: + r+ ;
\begin_inset Newline newline
\end_inset

: and rand ;
\begin_inset Newline newline
\end_inset

: or ror ;
\begin_inset Newline newline
\end_inset

: drop rdrop ;
\begin_inset Newline newline
\end_inset

: dup rdup ;
\begin_inset Newline newline
\end_inset

: over rover ;
\begin_inset Newline newline
\end_inset

: a! ra! ;
\begin_inset Newline newline
\end_inset

: a ra@ ;
\begin_inset Newline newline
\end_inset

: b! rb! ; }block
\begin_inset Newline newline
\end_inset

( 00222C00 ) D# 139 shadow{ 
\begin_inset Newline newline
\end_inset

( the final step in loading the ide is to redefine the canonical forth
\begin_inset Newline newline
\end_inset

words to operate on the target node.
 this is done as a separate step
\begin_inset Newline newline
\end_inset

so that you may define any sort of exerciser before losing access
\begin_inset Newline newline
\end_inset

to host colorforth words.
 ) }block
\begin_inset Newline newline
\end_inset

( 00223000 ) D# 140 code{ 
\begin_inset Newline newline
\end_inset

( node { 0000588F } route lists contd ) { cr }
\begin_inset Newline newline
\end_inset

[ d# 216 , d# 215 , d# 214 , d# 213 , d# 212 , d# 211 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 210 , d# 209 , d# 208 , d# 207 , d# 206 , d# 205 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 204 , d# 203 , d# 202 , d# 201 , d# 200 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 300 , d# 301 , d# 302 , d# 303 , d# 304 , d# 305 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 306 , d# 307 , d# 308 , d# 309 , d# 310 , d# 311 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 312 , d# 313 , d# 314 , d# 315 , d# 316 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 416 , d# 415 , d# 414 , d# 413 , d# 412 , d# 411 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 410 , d# 409 , d# 408 , d# 407 , d# 406 , d# 405 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 404 , d# 403 , d# 402 , d# 401 , d# 400 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 500 , d# 501 , d# 502 , d# 503 , d# 504 , d# 505 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 506 , d# 507 , d# 508 , d# 509 , d# 510 , d# 511 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 512 , d# 513 , d# 514 , d# 515 , d# 516 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 616 , d# 615 , d# 614 , d# 613 , d# 612 , d# 611 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 610 , d# 609 , d# 608 , d# 607 , d# 606 , d# 605 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 604 , d# 603 , d# 602 , d# 601 , d# 600 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 700 , d# 701 , d# 702 , d# 703 , d# 704 , d# 705 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 706 , d# 707 , d# 708 , d# -1 , ] }block
\begin_inset Newline newline
\end_inset

( 00223400 ) D# 141 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00223800 ) D# 142 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00223C00 ) D# 143 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00224000 ) D# 144 code{ 
\begin_inset Newline newline
\end_inset

( arrayforth tm and okad tools and designs ) { cr }
\begin_inset Newline newline
\end_inset

( copyright 2009-2010 greenarrays, inc.
 ) { cr }
\begin_inset Newline newline
\end_inset

:# first -1 [ d# -1 first ! ] { cr }
\begin_inset Newline newline
\end_inset

:# cur 23492085 ( config ) [ d# 148 load ] { br }
\begin_inset Newline newline
\end_inset

: .s ; ( defaults for blue words )
\begin_inset Newline newline
\end_inset

: .pth ;
\begin_inset Newline newline
\end_inset

: .ram ; { br }
\begin_inset Newline newline
\end_inset

: ray ( i-a ) pop 2/ 2/ + ; :# ntbl 0 [ d# 0 ntbl ! ]
\begin_inset Newline newline
\end_inset

: aray ( n ) < align > call ray [ d# 4 ] * [ h ] +! ;
\begin_inset Newline newline
\end_inset

: uatbl ( i-a ) [ d# 1000 aray ]
\begin_inset Newline newline
\end_inset

: nil d# 0 [ ntbl ] ! ; { br }
\begin_inset Newline newline
\end_inset

( png screen capture ) [ png ] { cr }
\begin_inset Newline newline
\end_inset

( chip design ) [ d# 900 load ] }block
\begin_inset Newline newline
\end_inset

( 00224400 ) D# 145 shadow{ 
\begin_inset Newline newline
\end_inset

( main load block for okad2 applications )
\begin_inset Newline newline
\end_inset

: cur ( cursor position )
\begin_inset Newline newline
\end_inset

: first ( execution of hardsim.
 initializes least-squares variables )
\begin_inset Newline newline
\end_inset

{ br }
\begin_inset Newline newline
\end_inset

: ray ( defines i-a array usage ) align ray
\begin_inset Newline newline
\end_inset

: aray ( use after red to make ray of n cells )
\begin_inset Newline newline
\end_inset

: uatbl ( lists transistor table addresses of the devices so far found
\begin_inset Newline newline
\end_inset

to be conducting current.
 )
\begin_inset Newline newline
\end_inset

: ntbl ( is number of active uatbl entries.
 )
\begin_inset Newline newline
\end_inset

: nil ( clears the table.
 ) }block
\begin_inset Newline newline
\end_inset

( 00224800 ) D# 146 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00224C00 ) D# 147 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00225000 ) D# 148 code{ 
\begin_inset Newline newline
\end_inset

( configuration blocks ) :# orgn 0 [ d# 0 orgn ! ]
\begin_inset Newline newline
\end_inset

: exit 7pop 7pop ;
\begin_inset Newline newline
\end_inset

: tbl ( i-n ) pop 2/ 2/ + @ ;
\begin_inset Newline newline
\end_inset

: assign ( a ) pop swap ! ;
\begin_inset Newline newline
\end_inset

: xqt ( a ) @ push ;
\begin_inset Newline newline
\end_inset

: cfuse d# 648 ; ( active ) [ cfuse load ]
\begin_inset Newline newline
\end_inset

: cfchip d# 650 ;
\begin_inset Newline newline
\end_inset

: cfpins d# 654 ;
\begin_inset Newline newline
\end_inset

: cfstart d# 656 ;
\begin_inset Newline newline
\end_inset

: cfpads d# 658 ;
\begin_inset Newline newline
\end_inset

: cfprobe d# 660 ;
\begin_inset Newline newline
\end_inset

: cfsim d# 662 ;
\begin_inset Newline newline
\end_inset

: cfstep d# 664 ;
\begin_inset Newline newline
\end_inset

: cfscale d# 666 ;
\begin_inset Newline newline
\end_inset

: cftape d# 756 ; ( tapeout default )
\begin_inset Newline newline
\end_inset

: readme [ cfuse block ] nop [ cfuse d# 18 / ] d# 2 @cyls ;
\begin_inset Newline newline
\end_inset

: tapeout [ cftape block ] nop [ cfuse block ] nop [ d# 36 d# 256 * ]
\begin_inset Newline newline
\end_inset

move ;
\begin_inset Newline newline
\end_inset

: recompile d# 940 load [ orgn ] @ load lis ; }block
\begin_inset Newline newline
\end_inset

( 00225400 ) D# 149 shadow{ 
\begin_inset Newline newline
\end_inset

( names for blocks that are customized to configure tools while designing
\begin_inset Newline newline
\end_inset

and testing.
 )
\begin_inset Newline newline
\end_inset

: cfuse ( two cylinders on cylinder boundary - 18 blocks plus shadows
\begin_inset Newline newline
\end_inset

- actively loaded and used )
\begin_inset Newline newline
\end_inset

: cftape ( default image of config area under change control in base )
\begin_inset Newline newline
\end_inset

{ br }
\begin_inset Newline newline
\end_inset

: exit ( terminates interpretation of a block.
 )
\begin_inset Newline newline
\end_inset

: tbl ( self fetching cell array.
 usage' )
\begin_inset Newline newline
\end_inset

: squared ( i-n ) align tbl [ d# 0 , d# 1 , d# 4 , d# 9 , d# 16 , ]
\begin_inset Newline newline
\end_inset

: assign ( places addr of following code in the location given and
\begin_inset Newline newline
\end_inset

exits current definition.
 )
\begin_inset Newline newline
\end_inset

: xqt ( calls the code whose adr is in the var given.
 ) }block
\begin_inset Newline newline
\end_inset

( 00225800 ) D# 150 code{ 
\begin_inset Newline newline
\end_inset

( redact okad disk ) [ audit ] { br }
\begin_inset Newline newline
\end_inset

( to arm this block, make ) { cr }
\begin_inset Newline newline
\end_inset

( this word white...
 ) [ exit ] { br }
\begin_inset Newline newline
\end_inset

( okad ) [ d# 146 d# 148 obliterate d# 190 cfuse obliterate cfpins
\begin_inset Newline newline
\end_inset

d# 890 obliterate ] { cr }
\begin_inset Newline newline
\end_inset

( chip ) [ d# 902 d# 940 obliterate d# 944 d# 1248 obliterate ] { br }
\begin_inset Newline newline
\end_inset

( type save to commit changes ) }block
\begin_inset Newline newline
\end_inset

( 00225C00 ) D# 151 shadow{ 
\begin_inset Newline newline
\end_inset

( load this block to redact an okad disk for public release or extensive
\begin_inset Newline newline
\end_inset

programming.
 ) }block
\begin_inset Newline newline
\end_inset

( 00226000 ) D# 152 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00226400 ) D# 153 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00226800 ) D# 154 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00226C00 ) D# 155 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00227000 ) D# 156 code{ 
\begin_inset Newline newline
\end_inset

( big letters ) [ macro ]
\begin_inset Newline newline
\end_inset

: *byte h# 0000C80F 2, ; [ forth ]
\begin_inset Newline newline
\end_inset

: clr [ aper d# 2 + ] ; :# sz 14 :# cur 9462784 [ d# 14 sz ! ]
\begin_inset Newline newline
\end_inset

: ptab ( xy ) d# 1024 * + [ aper @ d# 4 / ] + [ cur ] ! ;
\begin_inset Newline newline
\end_inset

: center ( n ) [ sz ] @ d# -24 * d# 768 + 2/ ptab ;
\begin_inset Newline newline
\end_inset

: table d# 12 * [ d# 12 block ] + ;
\begin_inset Newline newline
\end_inset

: 1line ( a ) [ sz ] @ for [ clr ] @ over ! d# 1 + next drop ;
\begin_inset Newline newline
\end_inset

: pix ( a ) [ sz ] @ for dup 1line d# 1024 + next drop ;
\begin_inset Newline newline
\end_inset

: row ( an-an ) d# 16 for dup and -if over pix then [ sz ] @ u+ 2*
\begin_inset Newline newline
\end_inset

next d# 1024 [ sz ] @ * [ sz ] @ d# -16 * + u+ ;
\begin_inset Newline newline
\end_inset

: !emit table [ cur ] @ d# 12 for over @ *byte row row drop d# 1 u+
\begin_inset Newline newline
\end_inset

next drop drop [ sz ] @ d# 18 * [ cur ] +! ;
\begin_inset Newline newline
\end_inset

: !digit d# 24 + !emit ;
\begin_inset Newline newline
\end_inset

: 2.
 ( nn ) /mod !digit !digit ;
\begin_inset Newline newline
\end_inset

: 4.
 ( n ) d# 100 /mod d# 10 2.
 d# 10 2.
 ; }block
\begin_inset Newline newline
\end_inset

( 00227400 ) D# 157 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00227800 ) D# 158 code{ 
\begin_inset Newline newline
\end_inset

( big clock ) [ empty d# 40 load d# 156 load ]
\begin_inset Newline newline
\end_inset

: hm sec d# 60 /
\begin_inset Newline newline
\end_inset

: sex ( n ) d# 60 /mod d# 100 mod d# 10 2.
 d# 10 2.
 ; :# t0 32458
\begin_inset Newline newline
\end_inset

: ?beep if ; then beep ;
\begin_inset Newline newline
\end_inset

: till [ t0 ] @ sec negate + green -if negate red then ?beep sex ;
\begin_inset Newline newline
\end_inset

: set ( n ) d# 60 * sec + [ t0 ] !
\begin_inset Newline newline
\end_inset

: ok show black screen blue d# 0 center hm ( till ) ;
\begin_inset Newline newline
\end_inset

: run dup pause drop key? run ; [ ok run ] }block
\begin_inset Newline newline
\end_inset

( 00227C00 ) D# 159 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00228000 ) D# 160 code{ 
\begin_inset Newline newline
\end_inset

( compare ) [ empty d# 30 load ]
\begin_inset Newline newline
\end_inset

: n18 ( i-a ) [ d# 3018 block ] + ;
\begin_inset Newline newline
\end_inset

: unpk abs [ d# 1 n18 ] ! [ d# 3036 ] block [ d# 5000 ] block [ d# 1404
 ]
\begin_inset Newline newline
\end_inset

blks move [ d# 5000 block ] d# 3036 [ d# 3 n18 ] @ [ d# -36 ] + range
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset

: check [ d# 3000 ] @back [ d# 0 n18 ] @ [ d# 18 block @ ] or drop
\begin_inset Newline newline
\end_inset

if ; then [ d# 1 n18 ] @ dup and -if unpk ; then drop ;
\begin_inset Newline newline
\end_inset

: blink dup d# 3000 + [ blk ] ! edit ;
\begin_inset Newline newline
\end_inset

: var push push d# 1 + d# 1 u+ pop pop
\begin_inset Newline newline
\end_inset

: *1 or ;
\begin_inset Newline newline
\end_inset

: *2 var push over @ over @ or pop + ;
\begin_inset Newline newline
\end_inset

: tag ( nn-n ) dup h# 0000000F and jump *1 *1 *2 *1 *1 *2 *1 *1 *1
\begin_inset Newline newline
\end_inset

*1 *1 *1 var *1 *1 *1
\begin_inset Newline newline
\end_inset

: co ( naa-n ) d# 256 for over @ over @ tag drop if drop drop pop drop
\begin_inset Newline newline
\end_inset

pop drop dup d# 2 u+ ( i ) pop swap blink ; then d# 1 + d# 1 u+ next
\begin_inset Newline newline
\end_inset

drop drop ;
\begin_inset Newline newline
\end_inset

: com ( n ) dup block over d# 3000 + block co ;
\begin_inset Newline newline
\end_inset

: q ( nn ) for com d# 2 + next drop ;
\begin_inset Newline newline
\end_inset

: all d# 18 [ d# 1439 d# -18 + 2/ ] q ;
\begin_inset Newline newline
\end_inset

: old [ blk ] @ d# 3000 mod dup d# 3000 + [ blk ] ! copy ; }block
\begin_inset Newline newline
\end_inset

( 00228400 ) D# 161 shadow{ 
\begin_inset Newline newline
\end_inset

: check ( reads backup to { 0001770F } and decompresses if appropriate )
\begin_inset Newline newline
\end_inset

: blink ( displays the given block with its other set as the editor's
\begin_inset Newline newline
\end_inset

'other' block )
\begin_inset Newline newline
\end_inset

: var ( compares a variable name, advancing pointers to skip its value.
 )
\begin_inset Newline newline
\end_inset

: *1 ( compares garden variety words.
 )
\begin_inset Newline newline
\end_inset

: *2 ( compares large literals.
 )
\begin_inset Newline newline
\end_inset

: tag ( compare compares the two source cells given, returning true
\begin_inset Newline newline
\end_inset

if they differ.
 ignores variable differences.
 )
\begin_inset Newline newline
\end_inset

: ?nul ( ends the loop in co when nuls are found in both blocks.
 )
\begin_inset Newline newline
\end_inset

: co ( given the addresses of the two blocks does the work of com.
 )
\begin_inset Newline newline
\end_inset

: com ( invokes editor to blink the given block if it differs from
\begin_inset Newline newline
\end_inset

the other, leaving stack set to continue the scan by typing q.
 otherwise
\begin_inset Newline newline
\end_inset

returns.
 )
\begin_inset Newline newline
\end_inset

: all ( scans the whole usable area of the disk.
 )
\begin_inset Newline newline
\end_inset

: q ( scans for differences given starting block and number of source
\begin_inset Newline newline
\end_inset

blocks skipping shadows.
 )
\begin_inset Newline newline
\end_inset

: note! ( return stk probably grows! ) }block
\begin_inset Newline newline
\end_inset

( 00228800 ) D# 162 code{ 
\begin_inset Newline newline
\end_inset

( compare roms ) [ compile empty ] :# x 887904 :# y 8913568
\begin_inset Newline newline
\end_inset

: old ( n-a ) d# 64 * d# 1420 block + ;
\begin_inset Newline newline
\end_inset

: new ( n-a ) 2* h# 00008000 + block h# 00000080 + ;
\begin_inset Newline newline
\end_inset

: spaces for space next ;
\begin_inset Newline newline
\end_inset

: 5-8 d# 8 /mod d# 32 /mod d# 32 /mod h# 00000100 * + h# 00000100 *
\begin_inset Newline newline
\end_inset

+ h# 00000100 * swap d# 4 * + ;
\begin_inset Newline newline
\end_inset

: it @ + @ dup 5-8 white h.
 space dup h# 00015555 or d# 5 silver h.n
\begin_inset Newline newline
\end_inset

space ;
\begin_inset Newline newline
\end_inset

: lines for i [ x ] it i [ y ] it white or if red dup d# 5 h.n then
\begin_inset Newline newline
\end_inset

drop space i d# 1 h.n cr -next ;
\begin_inset Newline newline
\end_inset

: u d# 16
\begin_inset Newline newline
\end_inset

: +xy dup [ x ] +! [ y ] +! ;
\begin_inset Newline newline
\end_inset

: d d# -16 +xy ;
\begin_inset Newline newline
\end_inset

: n d# 1 +
\begin_inset Newline newline
\end_inset

: see ( n-n ) dup old [ x ] ! dup new [ y ] ! show black screen text
\begin_inset Newline newline
\end_inset

d# 15 lines green [ x ] @ h.
 d# 7 spaces [ y ] @ h.
 keyboard ;
\begin_inset Newline newline
\end_inset

: b d# -1 + see ;
\begin_inset Newline newline
\end_inset

: diff ( n-n ) dup old over new d# 64 for over @ over @ or drop if
\begin_inset Newline newline
\end_inset

drop drop pop drop pop drop see ; then d# 1 + d# 1 u+ next drop drop
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset

: check d# 40
\begin_inset Newline newline
\end_inset

: more d# -1 + diff d# 0 or if more ; then drop show green screen keyboard
\begin_inset Newline newline
\end_inset

; }block
\begin_inset Newline newline
\end_inset

( 00228C00 ) D# 163 shadow{ 
\begin_inset Newline newline
\end_inset

( compare roms )
\begin_inset Newline newline
\end_inset

: .
 ( put t18 rom into blocks 1420ff )
\begin_inset Newline newline
\end_inset

: see n-n ( compare roms for node n )
\begin_inset Newline newline
\end_inset

: u ( up 16 words )
\begin_inset Newline newline
\end_inset

: d ( down 16 words )
\begin_inset Newline newline
\end_inset

: n ( next node )
\begin_inset Newline newline
\end_inset

: b ( back one node )
\begin_inset Newline newline
\end_inset

: diff ( compare up to 64 words, t18 binary vs g18 compile.
 total match
\begin_inset Newline newline
\end_inset

gets green screen.
 first non-matching word causes a dump of that node.
\begin_inset Newline newline
\end_inset

note the double pop drop in diff.
 don't run it as a command.
 )
\begin_inset Newline newline
\end_inset

: check ( run diff on all 40 nodes ) }block
\begin_inset Newline newline
\end_inset

( 00229000 ) D# 164 code{ 
\begin_inset Newline newline
\end_inset

( timing ) [ empty macro ]
\begin_inset Newline newline
\end_inset

: out h# 0000E1E6 2, ; [ forth ]
\begin_inset Newline newline
\end_inset

: tare time - d# 1000 for next time + ;
\begin_inset Newline newline
\end_inset

: tare+ time - push d# 1000 for dup next c pop time + ;
\begin_inset Newline newline
\end_inset

: test tare time + - d# 1000 for out next time + ; ( next 3 loop 5.7
\begin_inset Newline newline
\end_inset

/next 2 /swap 25 swap 7.2 ) [ macro ]
\begin_inset Newline newline
\end_inset

: c! h# 0000C88B 2, < drop > here ;
\begin_inset Newline newline
\end_inset

: loop h# 00000049 1, h# 00000075 1, ( e2 ) here - + 1, ; [ forth ]
\begin_inset Newline newline
\end_inset

: try time - d# 1000 c! loop time + ; }block
\begin_inset Newline newline
\end_inset

( 00229400 ) D# 165 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00229800 ) D# 166 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00229C00 ) D# 167 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0022A000 ) D# 168 code{ 
\begin_inset Newline newline
\end_inset

( png empty ) :# w 1024 :# hh 768 :# d 1
\begin_inset Newline newline
\end_inset

: frame { 03A0001F } [ aper @ d# 4 / ] ; [ d# 172 load d# 174 load ]
\begin_inset Newline newline
\end_inset

: -crc ( a ) here over negate + crc ..
 ;
\begin_inset Newline newline
\end_inset

: here/4 ( -a ) here d# 3 and drop if d# 0 1, here/4 ; then here d# 2
\begin_inset Newline newline
\end_inset

2/s ;
\begin_inset Newline newline
\end_inset

: bys ( nn-b ) ..
 here swap , ; { cr }
\begin_inset Newline newline
\end_inset

( pallettes ) [ d# 170 load ] { br }
\begin_inset Newline newline
\end_inset

: !png ( awh-an ) [ d ] @ / [ hh ] ! [ d ] @ / [ w ] ! here/4 swap
\begin_inset Newline newline
\end_inset

H# 474E5089 , H# 0A1A0A0D , ( ihdr ) H# 52444849 d# 13 bys [ w ] @
\begin_inset Newline newline
\end_inset

..
 [ hh ] @ ..
 h# 00000304 , h# 00000000 1, -crc ( plte ) pallette
\begin_inset Newline newline
\end_inset

( idat ) H# 54414449 d# 0 bys swap deflate -crc ( iend ) H# 444E4549
\begin_inset Newline newline
\end_inset

d# 0 bys -crc here/4 over negate + ; { br }
\begin_inset Newline newline
\end_inset

: 'at ( xy-a ) d# 1024 * + [ frame ] + ;
\begin_inset Newline newline
\end_inset

: full d# 1 [ d ] ! d# 0 dup 'at d# 1024 d# 768 !png ;
\begin_inset Newline newline
\end_inset

: png full wgds ; }block
\begin_inset Newline newline
\end_inset

( 0022A400 ) D# 169 shadow{ 
\begin_inset Newline newline
\end_inset

: d ( is reduction factor ) }block
\begin_inset Newline newline
\end_inset

( 0022A800 ) D# 170 code{ 
\begin_inset Newline newline
\end_inset

( pallettes )
\begin_inset Newline newline
\end_inset

: paper H# 45544C50 d# 48 bys { cr }
\begin_inset Newline newline
\end_inset

h# 00FFFFFF 3, h# 00C00000 3, h# 0000C000 3, h# 00C0C000 3, { cr }
\begin_inset Newline newline
\end_inset

h# 000000C0 3, h# 00C000C0 3, h# 0000C0C0 3, h# 00404040 3, { cr }
\begin_inset Newline newline
\end_inset

h# 00C0C0C0 3, h# 00FF0000 3, h# 0000FF00 3, h# 00FFFF00 3, { cr }
\begin_inset Newline newline
\end_inset

h# 000000FF 3, h# 00FF00FF 3, h# 0000FFFF 3, h# 00000000 3, -crc ;
\begin_inset Newline newline
\end_inset

{ br }
\begin_inset Newline newline
\end_inset

: crt H# 45544C50 d# 48 bys { cr }
\begin_inset Newline newline
\end_inset

h# 00000000 3, h# 00C00000 3, h# 0000C000 3, h# 00C0C000 3, { cr }
\begin_inset Newline newline
\end_inset

h# 000000C0 3, h# 00C000C0 3, h# 0000C0C0 3, h# 00404040 3, { cr }
\begin_inset Newline newline
\end_inset

h# 00C0C0C0 3, h# 00FF0000 3, h# 0000FF00 3, h# 00FFFF00 3, { cr }
\begin_inset Newline newline
\end_inset

h# 000000FF 3, h# 00FF00FF 3, h# 0000FFFF 3, h# 00FFFFFF 3, -crc ;
\begin_inset Newline newline
\end_inset

{ br }
\begin_inset Newline newline
\end_inset

: pallette ( paper ) crt ; }block
\begin_inset Newline newline
\end_inset

( 0022AC00 ) D# 171 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0022B000 ) D# 172 code{ 
\begin_inset Newline newline
\end_inset

( crc ) :# ad1 23534 :# ad2 64494 [ macro ] { br }
\begin_inset Newline newline
\end_inset

: 2/s ?lit h# 0000E8C1 2, 1, ; { -cr } : 1@ h# 0000008A 2, ; [ forth ]
\begin_inset Newline newline
\end_inset

: bit ( n-n ) d# 1 ? if d# 1 2/s H# EDB88320 or ; { indent }
\begin_inset Newline newline
\end_inset

then d# 1 2/s ;
\begin_inset Newline newline
\end_inset

: ,crc ( nn ) for dup d# 8 for bit next , { indent }
\begin_inset Newline newline
\end_inset

d# 1 + next drop ;
\begin_inset Newline newline
\end_inset

: table ( -a ) align array [ d# 0 d# 256 ,crc ]
\begin_inset Newline newline
\end_inset

: crc ( bn-n ) d# -1 swap for over 1@ over or h# 000000FF and table
\begin_inset Newline newline
\end_inset

swap d# 8 2/s or d# 1 u+ next - nip ; { br }
\begin_inset Newline newline
\end_inset

: +adl ( n ) h# 000000FF and [ ad1 ] @ + dup [ ad2 ] @ +
\begin_inset Newline newline
\end_inset

: adl! [ ad2 ] ! [ ad1 ] ! ;
\begin_inset Newline newline
\end_inset

: +mod [ ad1 ] @ d# 65521 mod [ ad2 ] @ d# 65521 mod adl! ; }block
\begin_inset Newline newline
\end_inset

( 0022B400 ) D# 173 shadow{ 
\begin_inset Newline newline
\end_inset

: 2/s ( shift right by literal )
\begin_inset Newline newline
\end_inset

: 1@ ( fetch byte, address in eax )
\begin_inset Newline newline
\end_inset

: array ( return word address in dictionary )
\begin_inset Newline newline
\end_inset

: bit ( process 1 bit with standard 32-bit crc )
\begin_inset Newline newline
\end_inset

: fill ( construct crc table for bytes )
\begin_inset Newline newline
\end_inset

: table ( said table )
\begin_inset Newline newline
\end_inset

: crc ( compute crc for a byte string )
\begin_inset Newline newline
\end_inset

: ad1/ad2 ( adler checksums )
\begin_inset Newline newline
\end_inset

: +adl ( add a byte to both checksums )
\begin_inset Newline newline
\end_inset

: adl! ( store checksums )
\begin_inset Newline newline
\end_inset

: +mod ( truncate checksums ) }block
\begin_inset Newline newline
\end_inset

( 0022B800 ) D# 174 code{ 
\begin_inset Newline newline
\end_inset

( lz77 ) [ macro ] { -cr } : *byte h# 0000C486 2, ;
\begin_inset Newline newline
\end_inset

: !bx < a! > h# 00000289 2, < drop > ; [ forth ] { br }
\begin_inset Newline newline
\end_inset

: *bys dup d# 16 2/s *byte swap h# 0000FFFF and *byte h# 00010000 *
\begin_inset Newline newline
\end_inset

+ ; { -cr } : ..
 *bys , ;
\begin_inset Newline newline
\end_inset

: 0/1 h# 00000080 ? if h# 0000007E and h# 0000007E or drop if d# 7
\begin_inset Newline newline
\end_inset

; then h# 0000000F ; then d# 0 and ; { -cr } : +or over - and or ;
\begin_inset Newline newline
\end_inset

: 4b dup 0/1 h# 00000009 and over d# 8 2/s 0/1 h# 0000000A and +or
\begin_inset Newline newline
\end_inset

swap d# 16 2/s 0/1 h# 0000000C and +or ;
\begin_inset Newline newline
\end_inset

: pix dup @ [ d ] @ u+ 4b ;
\begin_inset Newline newline
\end_inset

: row 1, dup [ w ] @ 2/ dup d# 1 + dup 2, - 2, d# 0 dup 1, +adl for
\begin_inset Newline newline
\end_inset

pix d# 16 * push pix pop or dup 1, +adl next drop +mod [ d ] @ d# 1024
\begin_inset Newline newline
\end_inset

* + ; { br }
\begin_inset Newline newline
\end_inset

: deflate h# 00000178 2, d# 1 d# 0 adl! [ hh ] @ d# -1 + for d# 0 row
\begin_inset Newline newline
\end_inset

next d# 1 row drop [ ad2 ] @ *byte 2, [ ad1 ] @ *byte 2, here over
\begin_inset Newline newline
\end_inset

d# 4 + negate + *bys over d# -4 + !bx ; }block
\begin_inset Newline newline
\end_inset

( 0022BC00 ) D# 175 shadow{ 
\begin_inset Newline newline
\end_inset

: 0/1 ( 0, f or 7 for dark, bright or dim ) }block
\begin_inset Newline newline
\end_inset

( 0022C000 ) D# 176 code{ 
\begin_inset Newline newline
\end_inset

( cf-html ) [ empty d# 74 load ] { cr }
\begin_inset Newline newline
\end_inset

:# pad 271638528 [ d# 3000 block d# 4 * pad ! ] { cr }
\begin_inset Newline newline
\end_inset

:# hld 271672321 [ pad @ hld ! d# 178 d# 6 loads ]
\begin_inset Newline newline
\end_inset

: estyle ,link ,t1cr ( cfhtml.css '? ) ;
\begin_inset Newline newline
\end_inset

: .hdr [ pad ] @ [ hld ] ! ,t1cr ( @html? @head? ) istyle { cr }
\begin_inset Newline newline
\end_inset

( estyle ) ,t1cr ( @/head? @body? @table? ) ;
\begin_inset Newline newline
\end_inset

: .blk ( n ) d# 0 [ pos ] ! crlf ,t1 ( @td? ) { cr }
\begin_inset Newline newline
\end_inset

dup even? if dup .dec ,t1cr ( *list ) then { cr }
\begin_inset Newline newline
\end_inset

.cr block ,t1 ( @code ) d# 0 [ class ] ! d# 0 [ --cr ] ! { cr }
\begin_inset Newline newline
\end_inset

begin @+ dup and while .token end then { cr }
\begin_inset Newline newline
\end_inset

[ class ] @ eq? if ,t1 ( ? ) then drop drop { cr }
\begin_inset Newline newline
\end_inset

begin -eol? while .nb end then .cr { cr }
\begin_inset Newline newline
\end_inset

,t1 ( @/code? ) .cr ,t1cr ( @/td? ) ;
\begin_inset Newline newline
\end_inset

: .sep ,t1 ( @td? ) .nb .nb ,t1 ( @/td? ) ;
\begin_inset Newline newline
\end_inset

: .blks ( first last+2 ) over negate + 2/ for { cr }
\begin_inset Newline newline
\end_inset

,t1 ( @tr? ) dup d# 1 or .blk .sep dup .blk { cr }
\begin_inset Newline newline
\end_inset

,t1cr ( @/tr? ) [ d# 2 ] + next drop ;
\begin_inset Newline newline
\end_inset

: .tlr ,t1cr ( @/table? @/body? @/html? ) sav ;
\begin_inset Newline newline
\end_inset

: .html ( first last+2 ) .hdr .blks .tlr ; { cr }
\begin_inset Newline newline
\end_inset

[ named ] ( cf.html ) }block
\begin_inset Newline newline
\end_inset

( 0022C400 ) D# 177 shadow{ 
\begin_inset Newline newline
\end_inset

( colorforth to html utility ) { br }
\begin_inset Newline newline
\end_inset

( the html is created between ) [ pad ] ( and ) [ hld ] { cr }
\begin_inset Newline newline
\end_inset

( by ) .html ( and its factors ) .hdr .blks ( and ) .tlr ( , then
\begin_inset Newline newline
\end_inset

written to the file last ) [ named ] ( .
 ) { br }
\begin_inset Newline newline
\end_inset

( uncomment ) estyle ( in ) .hdr ( to use an external ) { cr }
\begin_inset Newline newline
\end_inset

( stylesheet, maybe for printing.
 ) { br }
\begin_inset Newline newline
\end_inset

( pairs of blocks are formatted 2-up using html tables, with the odd/even
\begin_inset Newline newline
\end_inset

blocks used to invoke ) [ .html ] ( or ) [ .blks ] ( displayed on
\begin_inset Newline newline
\end_inset

the right.
 'n list' is shown above the even block.
 ) { br }
\begin_inset Newline newline
\end_inset

[ d# 176 d# 188 .html ] ( puts shadows on left, while ) { cr }
\begin_inset Newline newline
\end_inset

[ d# 177 d# 189 .html ] ( puts them on the right.
 ) { br }
\begin_inset Newline newline
\end_inset

[ seeb ] ( toggles blue-word visibility.
 ) { br }
\begin_inset Newline newline
\end_inset

( the last line of each block is filled ) { cr }
\begin_inset Newline newline
\end_inset

( with ) nbsp ( for column alignment.
 the ) [ class ] @ { cr }
\begin_inset Newline newline
\end_inset

( line closes the ) < code > ( tag of an empty block.
 ) }block
\begin_inset Newline newline
\end_inset

( 0022C800 ) D# 178 code{ 
\begin_inset Newline newline
\end_inset

( generate html details ) { cr }
\begin_inset Newline newline
\end_inset

: eq? ( nn-n ) over or if drop d# -1 then - ( nz? ; )
\begin_inset Newline newline
\end_inset

: nz? ( n ) dup and drop ;
\begin_inset Newline newline
\end_inset

: even? ( n ) h# 00000001 or h# 00000001 and drop ; { br }
\begin_inset Newline newline
\end_inset

: @+ ( a-an ) dup d# 1 + swap @ ;
\begin_inset Newline newline
\end_inset

: @tag ( a-at ) dup @ h# 0000000F and ; { br }
\begin_inset Newline newline
\end_inset

: sc h# 0000003B ( semicolon )
\begin_inset Newline newline
\end_inset

: ch, ( c ) [ hld ] @ 1! d# 1 [ hld ] +! ;
\begin_inset Newline newline
\end_inset

: lb h# 0000007B ( left-brace ) ch, ;
\begin_inset Newline newline
\end_inset

: rb sc h# 0000007D ( right-brace ) ch,
\begin_inset Newline newline
\end_inset

: crlf d# 13 ch, d# 10 ch, ; { br }
\begin_inset Newline newline
\end_inset

: ,token ( n ) ch if ch, ,token ; then drop drop ;
\begin_inset Newline newline
\end_inset

: ,word ( a-a ) begin @+ ,token @tag drop until ; { cr }
\begin_inset Newline newline
\end_inset

( loop ) begin ,word
\begin_inset Newline newline
\end_inset

: ,comments ( a ) @tag d# 9 or drop until drop ; [ macro ] { cr }
\begin_inset Newline newline
\end_inset

: ,t ( words ) 7push pop < ,lit > call ,comments nop ;
\begin_inset Newline newline
\end_inset

: ,trb ( words ) < ,t > call rb nop ;
\begin_inset Newline newline
\end_inset

: ,t1 ( words ) call set1 < ,t > call set0 nop ;
\begin_inset Newline newline
\end_inset

: ,t1cr ( words ) < ,t1 > call crlf nop [ forth ] }block
\begin_inset Newline newline
\end_inset

( 0022CC00 ) D# 179 shadow{ 
\begin_inset Newline newline
\end_inset

: eq? { -cr } : nz? { -cr } : diff? { -cr } : even? ( leave only flags )
\begin_inset Newline newline
\end_inset

{ cr }
\begin_inset Newline newline
\end_inset

: @+ { -cr } : @tag ( are common factors ) { br }
\begin_inset Newline newline
\end_inset

( the following words generate ascii text only for html tags and source
\begin_inset Newline newline
\end_inset

formatting; it will not be visible in the html display.
 ) { br }
\begin_inset Newline newline
\end_inset

: sc { -cr } : ch, { -cr } : lb { -cr } : rb { -cr } : crlf ( punctuation
\begin_inset Newline newline
\end_inset

output ) { br }
\begin_inset Newline newline
\end_inset

( the macros enable in-line output from the ) { cr }
\begin_inset Newline newline
\end_inset

( standard cf-ascii table using ) [ set0 ] ( default or the extended
\begin_inset Newline newline
\end_inset

table using ) [ set1 ] { br }
\begin_inset Newline newline
\end_inset

: ,token ( output ascii characters for one token )
\begin_inset Newline newline
\end_inset

: ,word ( output a token and any extension tokens )
\begin_inset Newline newline
\end_inset

: ,comments ( output contiguous comment words ) { br }
\begin_inset Newline newline
\end_inset

: ,t ( output from current set, don't change set.
 )
\begin_inset Newline newline
\end_inset

: ,trb ,t ( output followed by ) rb
\begin_inset Newline newline
\end_inset

: ,t1 ( output from ) set1 ( , return to ) set0 ( at end )
\begin_inset Newline newline
\end_inset

: ,t1cr ,t1 ( output followed by ) crlf }block
\begin_inset Newline newline
\end_inset

( 0022D000 ) D# 180 code{ 
\begin_inset Newline newline
\end_inset

( translate text and numbers ) :# pos 0
\begin_inset Newline newline
\end_inset

: -bol? [ pos ] @ nz? ;
\begin_inset Newline newline
\end_inset

: -eol? [ pos ] @ d# 46 or drop ;
\begin_inset Newline newline
\end_inset

: .cr ,t1 ( @br? ) d# 0 [ pos ] ! ; { cr }
\begin_inset Newline newline
\end_inset

( loop ) begin .cr { -cr } : emit ( c ) ch, d# 1 [ pos ] +! ;
\begin_inset Newline newline
\end_inset

: .ch ( c ) -eol? until emit ;
\begin_inset Newline newline
\end_inset

: .sp -eol? if -bol? if h# 00000020 emit ; then then ;
\begin_inset Newline newline
\end_inset

: .2sp .sp ( .nb ; )
\begin_inset Newline newline
\end_inset

: .nb h# 00000026 ( ampersand ) .ch ,t ( nbsp ) sc ; { br }
\begin_inset Newline newline
\end_inset

: .sp.tn ( n ) .sp ( .tn ; )
\begin_inset Newline newline
\end_inset

: .tn ( n ) ch if .ch .tn ; then drop drop ; { br }
\begin_inset Newline newline
\end_inset

: .hd ( n ) [ d# -10 ] + -if [ h# 0000003A ] + .ch ; then [ h# 00000041 ]
\begin_inset Newline newline
\end_inset

+ .ch ;
\begin_inset Newline newline
\end_inset

: .dec ( n ) .sp [ d# 0 ] + -if h# 0000002D .ch negate then [ d# -1 ]
\begin_inset Newline newline
\end_inset

swap begin [ d# 10 ] /mod dup and while end then drop
\begin_inset Newline newline
\end_inset

: spit ( -1 ...
 ) begin .hd [ d# 0 ] + -until drop ; { br }
\begin_inset Newline newline
\end_inset

: hd ( n-nn ) dup [ h# 0000000F ] and swap 2/ 2/ 2/ 2/ ;
\begin_inset Newline newline
\end_inset

: .hex ( n ) .sp [ d# -1 ] swap begin hd H# 0FFFFFFF and while end
\begin_inset Newline newline
\end_inset

then drop spit ;
\begin_inset Newline newline
\end_inset

: .3hex ( n ) hd hd hd drop .sp .hd .hd .hd ; }block
\begin_inset Newline newline
\end_inset

( 0022D400 ) D# 181 shadow{ 
\begin_inset Newline newline
\end_inset

:# pos 0 ( character display ) [ pos ] ( ition in line )
\begin_inset Newline newline
\end_inset

: -bol? { -cr } : -eol? ( test position )
\begin_inset Newline newline
\end_inset

: .cr ( visible crlf )
\begin_inset Newline newline
\end_inset

: emit ( visible character )
\begin_inset Newline newline
\end_inset

: .ch { -cr } : .sp { -cr } : .2sp { -cr } : .nb ( quirky characteristics )
\begin_inset Newline newline
\end_inset

{ cr }
\begin_inset Newline newline
\end_inset

< note > [ .sp ] ( does nothing at left margin ) { cr }
\begin_inset Newline newline
\end_inset

< note > [ .ch ] ( does ) [ .cr ] ( after 46th character ) { cr }
\begin_inset Newline newline
\end_inset

< note > [ .2sp ] ( takes only one space at left margin ) { cr }
\begin_inset Newline newline
\end_inset

< note > [ .nb ] ( takes only one character position.
 ) { br }
\begin_inset Newline newline
\end_inset

: .tn { -cr } : .sp.tn ( display a token.
 ) { br }
\begin_inset Newline newline
\end_inset

: .hd { -cr } : hd { -cr } : spit ( are number-output factors )
\begin_inset Newline newline
\end_inset

: .dec { -cr } : .hex { -cr } : .3hex ( display numbers ) }block
\begin_inset Newline newline
\end_inset

( 0022D800 ) D# 182 code{ 
\begin_inset Newline newline
\end_inset

( translate cf token details ) { cr }
\begin_inset Newline newline
\end_inset

:# class 763363337 :# --cr 0
\begin_inset Newline newline
\end_inset

: ,class ( a ) @ [ class ] @ over or drop ( diff? ) if { cr }
\begin_inset Newline newline
\end_inset

[ class ] @ nz? if ,t1 ( @/code? @code ) then { cr }
\begin_inset Newline newline
\end_inset

,t1 ( *class+ ) dup [ class ] ! ,token ,t1 ( ? ) ; { cr }
\begin_inset Newline newline
\end_inset

then drop ; [ macro ]
\begin_inset Newline newline
\end_inset

: ,c 7push pop < ,lit > call ,class nop ; [ forth ] { br }
\begin_inset Newline newline
\end_inset

: .quirks ( n ) [ --cr ] @ nz? if .2sp drop d# 0 [ --cr ] ! ; { cr }
\begin_inset Newline newline
\end_inset

then ( class ) nz? if -bol? if .cr then then ;
\begin_inset Newline newline
\end_inset

: .space -eol? if .nb then ;
\begin_inset Newline newline
\end_inset

: .indent .cr d# 4 for .nb next ; { br }
\begin_inset Newline newline
\end_inset

: .blue ( n ) H# 9080000E ( cr ) eq? if .cr drop ; { cr }
\begin_inset Newline newline
\end_inset

then H# E721000E ( -cr ) eq? if d# 1 [ --cr ] ! drop ; { cr }
\begin_inset Newline newline
\end_inset

then H# 8625920E ( space ) eq? if .space drop ; { cr }
\begin_inset Newline newline
\end_inset

then H# 76C08C4E ( indent ) eq? if .indent drop ; { cr }
\begin_inset Newline newline
\end_inset

then H# C620000E ( br ) eq? if .cr .cr then drop ; }block
\begin_inset Newline newline
\end_inset

( 0022DC00 ) D# 183 shadow{ 
\begin_inset Newline newline
\end_inset

:# class 0 ( current class ) { cr }
\begin_inset Newline newline
\end_inset

:# --cr 0 ( true suppresses ) [ cr ] ( before next red word ) { cr }
\begin_inset Newline newline
\end_inset

: ,class { -cr } : ,c ( class defining words, cf style ) { br }
\begin_inset Newline newline
\end_inset

: .quirks ( handle the spacing before red words ) { br }
\begin_inset Newline newline
\end_inset

: .space ( blue spaces are ignored at eol! )
\begin_inset Newline newline
\end_inset

: .indent { 0000008F } ( + html leading space ) { br }
\begin_inset Newline newline
\end_inset

: .blue ( generate most of the blue-word effects ) }block
\begin_inset Newline newline
\end_inset

( 0022E000 ) D# 184 code{ 
\begin_inset Newline newline
\end_inset

( translate cf tokens )
\begin_inset Newline newline
\end_inset

: sh? ( n-n ) 2/ 2/ 2/ 2/ dup 2/ swap d# 1 and drop ;
\begin_inset Newline newline
\end_inset

: lh? ( an-an ) push @+ pop h# 00000010 and drop ; { br }
\begin_inset Newline newline
\end_inset

: .t1 ( n ) ,c ( t1 ) .sp.tn ;
\begin_inset Newline newline
\end_inset

: .t2 ( an-a ) lh? if ,c ( h2 ) .hex ; then ,c ( d2 ) .dec ;
\begin_inset Newline newline
\end_inset

: .t3 ( n ) [ class ] @ ,c ( t3 ) .quirks ( .sp.tn ) .tn ;
\begin_inset Newline newline
\end_inset

: .t4 ( n ) ,c ( t4 ) .sp.tn ;
\begin_inset Newline newline
\end_inset

: .t5 ( an-a ) lh? if ,c ( h5 ) .hex ; then ,c ( d5 ) .dec ;
\begin_inset Newline newline
\end_inset

: .t6 ( n ) sh? if ,c ( h6 ) .hex ; then ,c ( d6 ) .dec ;
\begin_inset Newline newline
\end_inset

: .t7 ( n ) ,c ( t7 ) .sp.tn ;
\begin_inset Newline newline
\end_inset

: .t8 ( n ) sh? if ,c ( h8 ) .hex ; then ,c ( d8 ) .dec ;
\begin_inset Newline newline
\end_inset

: .t9 ( n ) ,c ( t9 ) .sp.tn ;
\begin_inset Newline newline
\end_inset

: .ta ( n ) ,c ( ta ) .sp.tn ;
\begin_inset Newline newline
\end_inset

: .tb ( n ) ,c ( tb ) .sp.tn ;
\begin_inset Newline newline
\end_inset

: .tc ( an-a ) ,c ( tc ) .sp.tn ,c ( dc ) @+ .dec ;
\begin_inset Newline newline
\end_inset

: .td ( n ) sh? ,c ( hd ) .3hex ;
\begin_inset Newline newline
\end_inset

: .te ( n ) ,c ( te ) ?seeb if dup .sp.tn then .blue ;
\begin_inset Newline newline
\end_inset

: .tf ( n ) sh? if ,c ( hf ) .hex ; then ,c ( df ) .dec ; { br }
\begin_inset Newline newline
\end_inset

: .token ( an-a ) dup h# 0000000F and jump { cr }
\begin_inset Newline newline
\end_inset

.tn .t1 .t2 .t3 .t4 .t5 .t6 .t7 { cr }
\begin_inset Newline newline
\end_inset

.t8 .t9 .ta .tb .tc .td .te .tf }block
\begin_inset Newline newline
\end_inset

( 0022E400 ) D# 185 shadow{ 
\begin_inset Newline newline
\end_inset

: sh? ( extract short number, true flag if hex )
\begin_inset Newline newline
\end_inset

: lh? ( extract long number, true flag if hex ) { br }
\begin_inset Newline newline
\end_inset

( tag ------- cf class ------- html class ) { cr }
\begin_inset Newline newline
\end_inset

< .t0 > ( extension token ........
 ) < same as last >
\begin_inset Newline newline
\end_inset

: .t1 ( execute word ...........
 ) [ t1 ]
\begin_inset Newline newline
\end_inset

: .t2 ( execute long number ....
 ) [ h2, d2 ]
\begin_inset Newline newline
\end_inset

: .t3 ( define word ...........
 ) { -cr } : t3
\begin_inset Newline newline
\end_inset

: .t4 ( compile word ...........
 ) t4
\begin_inset Newline newline
\end_inset

: .t5 ( compile long number ....
 ) h5, d5
\begin_inset Newline newline
\end_inset

: .t6 ( compile short number ...
 ) h6, d6
\begin_inset Newline newline
\end_inset

: .t7 ( compile macro ..........
 ) < t7 >
\begin_inset Newline newline
\end_inset

: .t8 ( execute short number ...
 ) [ h8, d8 ]
\begin_inset Newline newline
\end_inset

: .t9 ( lowercase text comment .
 t9 )
\begin_inset Newline newline
\end_inset

: .ta ( capitalized text comment ta ) < deprecated >
\begin_inset Newline newline
\end_inset

: .tb ( uppercase text comment .
 tb ) < deprecated >
\begin_inset Newline newline
\end_inset

: .tc ( variable ...............
 ) :# tc 0 dc
\begin_inset Newline newline
\end_inset

: .td ( target address .........
 hd )
\begin_inset Newline newline
\end_inset

: .te ( editor command .........
 ) < te >
\begin_inset Newline newline
\end_inset

: .tf ( short number comment ...
 hf, df ) { br }
\begin_inset Newline newline
\end_inset

: .token ( translate tag-by-tag ) { indent }
\begin_inset Newline newline
\end_inset

< note > ( address may be incremented ) }block
\begin_inset Newline newline
\end_inset

( 0022E800 ) D# 186 code{ 
\begin_inset Newline newline
\end_inset

( stylesheet details and file output )
\begin_inset Newline newline
\end_inset

: vat ,t ( *vertical-align; top ) sc ;
\begin_inset Newline newline
\end_inset

: bcw crlf ,t ( *background-color; white ) sc ;
\begin_inset Newline newline
\end_inset

: wsn crlf ,t ( *white-space; nowrap ) sc ;
\begin_inset Newline newline
\end_inset

: fo ,t ( *font- ) ;
\begin_inset Newline newline
\end_inset

: ffm crlf fo { indent }
\begin_inset Newline newline
\end_inset

,t ( family; lucida*console,monospace ) sc ;
\begin_inset Newline newline
\end_inset

: fwb crlf fo ,t ( weight; bold ) sc ;
\begin_inset Newline newline
\end_inset

: fz fo ,t ( size; ) ;
\begin_inset Newline newline
\end_inset

: fc lb ,t ( *color; ) h# 00000023 ( sharp ) ch, ;
\begin_inset Newline newline
\end_inset

: fsi sc fo ,t ( style; italic ) rb ;
\begin_inset Newline newline
\end_inset

: tt sc ,t ( *text-transform; ) ; { br }
\begin_inset Newline newline
\end_inset

: ,link ,t1 ( @link *rel+stylesheet ) { indent }
\begin_inset Newline newline
\end_inset

,t1 ( *type+'text/css' *href+' ) ; { br }
\begin_inset Newline newline
\end_inset

: fopen ( af-h ) push push d# 0 d# 32 ( exist ) d# 2 d# 0 d# 0 { indent
 }
\begin_inset Newline newline
\end_inset

pop pop swap fcreate ;
\begin_inset Newline newline
\end_inset

: sav [ d# 0 fnam ] w/o fopen dup push { indent }
\begin_inset Newline newline
\end_inset

[ pad ] @ dup negate [ hld ] @ + pop { indent }
\begin_inset Newline newline
\end_inset

fwr drop fclose ; }block
\begin_inset Newline newline
\end_inset

( 0022EC00 ) D# 187 shadow{ 
\begin_inset Newline newline
\end_inset

: vat { -cr } : bcw { -cr } : wsn { -cr } : fo { -cr } : ffm { -cr } 
\begin_inset Newline newline
\end_inset

: fwb { -cr } : fz { -cr } : fc { -cr } : fsi { -cr } : tt { cr }
\begin_inset Newline newline
\end_inset

( space-saving factors of internal stylesheet ) { br }
\begin_inset Newline newline
\end_inset

: ,link ( most of the external stylesheet link ) { br }
\begin_inset Newline newline
\end_inset

: fopen { -cr } : sav ( open, write, close html file ) { cr }
\begin_inset Newline newline
\end_inset

< note > ( byte addresses throughout ) }block
\begin_inset Newline newline
\end_inset

( 0022F000 ) D# 188 code{ 
\begin_inset Newline newline
\end_inset

( internal stylesheet )
\begin_inset Newline newline
\end_inset

: istyle ,t1cr ( @style*type+'text/css'? ) set1 { cr }
\begin_inset Newline newline
\end_inset

,t ( td ) lb vat bcw wsn ffm fwb fz ,trb ( x-large ) ,t ( code ) lb
\begin_inset Newline newline
\end_inset

fz ,t ( large ) tt ,trb ( lowercase ) { cr }
\begin_inset Newline newline
\end_inset

,t ( .t1 ) fc ,trb ( ddaa00 ) { cr }
\begin_inset Newline newline
\end_inset

,t ( .h2 ) fc ,t ( aa7700 ) fsi { cr }
\begin_inset Newline newline
\end_inset

,t ( .d2 ) fc ,trb ( ddaa00 ) { cr }
\begin_inset Newline newline
\end_inset

,t ( .t3 ) fc ,trb ( ff0000 ) { cr }
\begin_inset Newline newline
\end_inset

,t ( .t4 ) fc ,trb ( 00cc00 ) { cr }
\begin_inset Newline newline
\end_inset

,t ( .h5 ) fc ,t ( 009900 ) fsi { cr }
\begin_inset Newline newline
\end_inset

,t ( .d5 ) fc ,trb ( 00cc00 ) { cr }
\begin_inset Newline newline
\end_inset

,t ( .h6 ) fc ,t ( 009900 ) fsi { cr }
\begin_inset Newline newline
\end_inset

,t ( .d6 ) fc ,trb ( 00cc00 ) { cr }
\begin_inset Newline newline
\end_inset

,t ( .t7 ) fc ,trb ( 00cccc ) { cr }
\begin_inset Newline newline
\end_inset

,t ( .h8 ) fc ,t ( aa7700 ) fsi { cr }
\begin_inset Newline newline
\end_inset

,t ( .d8 ) fc ,trb ( ddaa00 ) { cr }
\begin_inset Newline newline
\end_inset

,t ( .t9 ) fc ,trb ( 444444 ) { cr }
\begin_inset Newline newline
\end_inset

,t ( .ta ) fc ,t ( 000000 ) tt ,trb ( capitalize ) { cr }
\begin_inset Newline newline
\end_inset

,t ( .tb ) fc ,t ( 000000 ) tt ,trb ( uppercase ) { cr }
\begin_inset Newline newline
\end_inset

,t ( .tc ) fc ,trb ( ff00ff ) { cr }
\begin_inset Newline newline
\end_inset

,t ( .dc ) fc ,trb ( 00ff00 ) { cr }
\begin_inset Newline newline
\end_inset

,t ( .hd ) fc ,t ( bbbbbb ) fsi { cr }
\begin_inset Newline newline
\end_inset

,t ( .te ) fc ,trb ( 0000ff ) { cr }
\begin_inset Newline newline
\end_inset

,t ( .hf ) fc ,t ( 777777 ) fsi { cr }
\begin_inset Newline newline
\end_inset

,t ( .df ) fc ,trb ( 444444 ) ,t1cr ( @/style? ) ; }block
\begin_inset Newline newline
\end_inset

( 0022F400 ) D# 189 shadow{ 
\begin_inset Newline newline
\end_inset

: istyle ( internal styles are aimed toward ) { cr }
\begin_inset Newline newline
\end_inset

( providing code examples for stand-alone use in other documents.
\begin_inset Newline newline
\end_inset

although it's black-on-white, it faithfully displays the colorforth
\begin_inset Newline newline
\end_inset

screen.
 ) { br }
\begin_inset Newline newline
\end_inset

( some cf-html rendering tests ) { br }
\begin_inset Newline newline
\end_inset

[ load D# 2147483647 H# 80000000 ]
\begin_inset Newline newline
\end_inset

: t1 ; D# 2147483646 H# 80000001 d# 87 h# 00000057 < ?lit > [ d# 87
\begin_inset Newline newline
\end_inset

h# 00000057 ] ( rtoeani rtos ascii ) :# var 123 { cr -cr } : quirky
\begin_inset Newline newline
\end_inset

{ 000000BD } { indent { 00000AEF } { 00000AFF } }
\begin_inset Newline newline
\end_inset

[ d# -87 ] ( end ) [ h# 00000000 ] h# 00000000 { 0000001F } }block
\begin_inset Newline newline
\end_inset

( 0022F800 ) D# 190 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0022FC00 ) D# 191 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00230000 ) D# 192 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00230400 ) D# 193 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00230800 ) D# 194 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00230C00 ) D# 195 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00231000 ) D# 196 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00231400 ) D# 197 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00231800 ) D# 198 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00231C00 ) D# 199 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00232000 ) D# 200 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00232400 ) D# 201 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00232800 ) D# 202 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00232C00 ) D# 203 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00233000 ) D# 204 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00233400 ) D# 205 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00233800 ) D# 206 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00233C00 ) D# 207 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00234000 ) D# 208 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00234400 ) D# 209 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00234800 ) D# 210 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00234C00 ) D# 211 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00235000 ) D# 212 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00235400 ) D# 213 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00235800 ) D# 214 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00235C00 ) D# 215 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00236000 ) D# 216 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00236400 ) D# 217 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00236800 ) D# 218 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00236C00 ) D# 219 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00237000 ) D# 220 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00237400 ) D# 221 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00237800 ) D# 222 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00237C00 ) D# 223 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00238000 ) D# 224 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00238400 ) D# 225 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00238800 ) D# 226 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00238C00 ) D# 227 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00239000 ) D# 228 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00239400 ) D# 229 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00239800 ) D# 230 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00239C00 ) D# 231 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023A000 ) D# 232 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023A400 ) D# 233 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023A800 ) D# 234 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023AC00 ) D# 235 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023B000 ) D# 236 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023B400 ) D# 237 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023B800 ) D# 238 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023BC00 ) D# 239 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023C000 ) D# 240 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023C400 ) D# 241 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023C800 ) D# 242 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023CC00 ) D# 243 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023D000 ) D# 244 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023D400 ) D# 245 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023D800 ) D# 246 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023DC00 ) D# 247 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023E000 ) D# 248 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023E400 ) D# 249 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023E800 ) D# 250 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023EC00 ) D# 251 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023F000 ) D# 252 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023F400 ) D# 253 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023F800 ) D# 254 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0023FC00 ) D# 255 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00240000 ) D# 256 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00240400 ) D# 257 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00240800 ) D# 258 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00240C00 ) D# 259 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00241000 ) D# 260 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00241400 ) D# 261 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00241800 ) D# 262 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00241C00 ) D# 263 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00242000 ) D# 264 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00242400 ) D# 265 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00242800 ) D# 266 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00242C00 ) D# 267 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00243000 ) D# 268 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00243400 ) D# 269 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00243800 ) D# 270 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00243C00 ) D# 271 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00244000 ) D# 272 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00244400 ) D# 273 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00244800 ) D# 274 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00244C00 ) D# 275 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00245000 ) D# 276 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00245400 ) D# 277 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00245800 ) D# 278 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00245C00 ) D# 279 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00246000 ) D# 280 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00246400 ) D# 281 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00246800 ) D# 282 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00246C00 ) D# 283 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00247000 ) D# 284 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00247400 ) D# 285 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00247800 ) D# 286 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00247C00 ) D# 287 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00248000 ) D# 288 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00248400 ) D# 289 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00248800 ) D# 290 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00248C00 ) D# 291 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00249000 ) D# 292 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00249400 ) D# 293 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00249800 ) D# 294 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00249C00 ) D# 295 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024A000 ) D# 296 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024A400 ) D# 297 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024A800 ) D# 298 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024AC00 ) D# 299 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024B000 ) D# 300 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024B400 ) D# 301 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024B800 ) D# 302 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024BC00 ) D# 303 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024C000 ) D# 304 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024C400 ) D# 305 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024C800 ) D# 306 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024CC00 ) D# 307 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024D000 ) D# 308 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024D400 ) D# 309 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024D800 ) D# 310 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024DC00 ) D# 311 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024E000 ) D# 312 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024E400 ) D# 313 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024E800 ) D# 314 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024EC00 ) D# 315 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024F000 ) D# 316 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024F400 ) D# 317 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024F800 ) D# 318 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0024FC00 ) D# 319 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00250000 ) D# 320 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00250400 ) D# 321 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00250800 ) D# 322 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00250C00 ) D# 323 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00251000 ) D# 324 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00251400 ) D# 325 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00251800 ) D# 326 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00251C00 ) D# 327 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00252000 ) D# 328 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00252400 ) D# 329 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00252800 ) D# 330 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00252C00 ) D# 331 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00253000 ) D# 332 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00253400 ) D# 333 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00253800 ) D# 334 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00253C00 ) D# 335 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00254000 ) D# 336 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00254400 ) D# 337 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00254800 ) D# 338 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00254C00 ) D# 339 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00255000 ) D# 340 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00255400 ) D# 341 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00255800 ) D# 342 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00255C00 ) D# 343 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00256000 ) D# 344 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00256400 ) D# 345 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00256800 ) D# 346 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00256C00 ) D# 347 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00257000 ) D# 348 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00257400 ) D# 349 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00257800 ) D# 350 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00257C00 ) D# 351 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00258000 ) D# 352 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00258400 ) D# 353 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00258800 ) D# 354 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00258C00 ) D# 355 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00259000 ) D# 356 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00259400 ) D# 357 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00259800 ) D# 358 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00259C00 ) D# 359 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025A000 ) D# 360 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025A400 ) D# 361 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025A800 ) D# 362 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025AC00 ) D# 363 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025B000 ) D# 364 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025B400 ) D# 365 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025B800 ) D# 366 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025BC00 ) D# 367 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025C000 ) D# 368 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025C400 ) D# 369 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025C800 ) D# 370 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025CC00 ) D# 371 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025D000 ) D# 372 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025D400 ) D# 373 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025D800 ) D# 374 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025DC00 ) D# 375 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025E000 ) D# 376 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025E400 ) D# 377 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025E800 ) D# 378 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025EC00 ) D# 379 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025F000 ) D# 380 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025F400 ) D# 381 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025F800 ) D# 382 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0025FC00 ) D# 383 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00260000 ) D# 384 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00260400 ) D# 385 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00260800 ) D# 386 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00260C00 ) D# 387 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00261000 ) D# 388 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00261400 ) D# 389 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00261800 ) D# 390 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00261C00 ) D# 391 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00262000 ) D# 392 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00262400 ) D# 393 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00262800 ) D# 394 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00262C00 ) D# 395 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00263000 ) D# 396 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00263400 ) D# 397 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00263800 ) D# 398 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00263C00 ) D# 399 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00264000 ) D# 400 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00264400 ) D# 401 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00264800 ) D# 402 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00264C00 ) D# 403 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00265000 ) D# 404 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00265400 ) D# 405 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00265800 ) D# 406 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00265C00 ) D# 407 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00266000 ) D# 408 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00266400 ) D# 409 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00266800 ) D# 410 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00266C00 ) D# 411 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00267000 ) D# 412 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00267400 ) D# 413 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00267800 ) D# 414 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00267C00 ) D# 415 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00268000 ) D# 416 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00268400 ) D# 417 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00268800 ) D# 418 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00268C00 ) D# 419 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00269000 ) D# 420 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00269400 ) D# 421 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00269800 ) D# 422 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00269C00 ) D# 423 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026A000 ) D# 424 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026A400 ) D# 425 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026A800 ) D# 426 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026AC00 ) D# 427 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026B000 ) D# 428 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026B400 ) D# 429 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026B800 ) D# 430 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026BC00 ) D# 431 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026C000 ) D# 432 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026C400 ) D# 433 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026C800 ) D# 434 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026CC00 ) D# 435 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026D000 ) D# 436 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026D400 ) D# 437 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026D800 ) D# 438 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026DC00 ) D# 439 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026E000 ) D# 440 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026E400 ) D# 441 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026E800 ) D# 442 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026EC00 ) D# 443 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026F000 ) D# 444 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026F400 ) D# 445 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026F800 ) D# 446 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0026FC00 ) D# 447 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00270000 ) D# 448 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00270400 ) D# 449 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00270800 ) D# 450 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00270C00 ) D# 451 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00271000 ) D# 452 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00271400 ) D# 453 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00271800 ) D# 454 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00271C00 ) D# 455 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00272000 ) D# 456 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00272400 ) D# 457 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00272800 ) D# 458 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00272C00 ) D# 459 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00273000 ) D# 460 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00273400 ) D# 461 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00273800 ) D# 462 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00273C00 ) D# 463 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00274000 ) D# 464 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00274400 ) D# 465 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00274800 ) D# 466 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00274C00 ) D# 467 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00275000 ) D# 468 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00275400 ) D# 469 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00275800 ) D# 470 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00275C00 ) D# 471 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00276000 ) D# 472 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00276400 ) D# 473 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00276800 ) D# 474 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00276C00 ) D# 475 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00277000 ) D# 476 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00277400 ) D# 477 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00277800 ) D# 478 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00277C00 ) D# 479 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00278000 ) D# 480 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00278400 ) D# 481 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00278800 ) D# 482 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00278C00 ) D# 483 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00279000 ) D# 484 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00279400 ) D# 485 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00279800 ) D# 486 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00279C00 ) D# 487 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027A000 ) D# 488 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027A400 ) D# 489 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027A800 ) D# 490 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027AC00 ) D# 491 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027B000 ) D# 492 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027B400 ) D# 493 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027B800 ) D# 494 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027BC00 ) D# 495 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027C000 ) D# 496 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027C400 ) D# 497 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027C800 ) D# 498 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027CC00 ) D# 499 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027D000 ) D# 500 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027D400 ) D# 501 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027D800 ) D# 502 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027DC00 ) D# 503 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027E000 ) D# 504 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027E400 ) D# 505 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027E800 ) D# 506 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027EC00 ) D# 507 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027F000 ) D# 508 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027F400 ) D# 509 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027F800 ) D# 510 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0027FC00 ) D# 511 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00280000 ) D# 512 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00280400 ) D# 513 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00280800 ) D# 514 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00280C00 ) D# 515 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00281000 ) D# 516 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00281400 ) D# 517 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00281800 ) D# 518 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00281C00 ) D# 519 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00282000 ) D# 520 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00282400 ) D# 521 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00282800 ) D# 522 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00282C00 ) D# 523 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00283000 ) D# 524 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00283400 ) D# 525 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00283800 ) D# 526 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00283C00 ) D# 527 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00284000 ) D# 528 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00284400 ) D# 529 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00284800 ) D# 530 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00284C00 ) D# 531 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00285000 ) D# 532 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00285400 ) D# 533 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00285800 ) D# 534 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00285C00 ) D# 535 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00286000 ) D# 536 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00286400 ) D# 537 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00286800 ) D# 538 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00286C00 ) D# 539 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00287000 ) D# 540 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00287400 ) D# 541 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00287800 ) D# 542 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00287C00 ) D# 543 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00288000 ) D# 544 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00288400 ) D# 545 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00288800 ) D# 546 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00288C00 ) D# 547 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00289000 ) D# 548 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00289400 ) D# 549 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00289800 ) D# 550 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00289C00 ) D# 551 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028A000 ) D# 552 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028A400 ) D# 553 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028A800 ) D# 554 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028AC00 ) D# 555 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028B000 ) D# 556 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028B400 ) D# 557 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028B800 ) D# 558 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028BC00 ) D# 559 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028C000 ) D# 560 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028C400 ) D# 561 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028C800 ) D# 562 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028CC00 ) D# 563 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028D000 ) D# 564 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028D400 ) D# 565 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028D800 ) D# 566 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028DC00 ) D# 567 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028E000 ) D# 568 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028E400 ) D# 569 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028E800 ) D# 570 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028EC00 ) D# 571 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028F000 ) D# 572 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028F400 ) D# 573 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028F800 ) D# 574 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0028FC00 ) D# 575 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00290000 ) D# 576 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00290400 ) D# 577 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00290800 ) D# 578 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00290C00 ) D# 579 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00291000 ) D# 580 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00291400 ) D# 581 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00291800 ) D# 582 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00291C00 ) D# 583 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00292000 ) D# 584 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00292400 ) D# 585 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00292800 ) D# 586 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00292C00 ) D# 587 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00293000 ) D# 588 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00293400 ) D# 589 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00293800 ) D# 590 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00293C00 ) D# 591 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00294000 ) D# 592 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00294400 ) D# 593 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00294800 ) D# 594 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00294C00 ) D# 595 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00295000 ) D# 596 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00295400 ) D# 597 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00295800 ) D# 598 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00295C00 ) D# 599 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00296000 ) D# 600 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00296400 ) D# 601 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00296800 ) D# 602 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00296C00 ) D# 603 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00297000 ) D# 604 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00297400 ) D# 605 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00297800 ) D# 606 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00297C00 ) D# 607 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00298000 ) D# 608 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00298400 ) D# 609 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00298800 ) D# 610 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00298C00 ) D# 611 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00299000 ) D# 612 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00299400 ) D# 613 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00299800 ) D# 614 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00299C00 ) D# 615 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029A000 ) D# 616 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029A400 ) D# 617 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029A800 ) D# 618 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029AC00 ) D# 619 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029B000 ) D# 620 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029B400 ) D# 621 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029B800 ) D# 622 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029BC00 ) D# 623 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029C000 ) D# 624 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029C400 ) D# 625 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029C800 ) D# 626 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029CC00 ) D# 627 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029D000 ) D# 628 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029D400 ) D# 629 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029D800 ) D# 630 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029DC00 ) D# 631 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029E000 ) D# 632 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029E400 ) D# 633 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029E800 ) D# 634 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029EC00 ) D# 635 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029F000 ) D# 636 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029F400 ) D# 637 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029F800 ) D# 638 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0029FC00 ) D# 639 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A0000 ) D# 640 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A0400 ) D# 641 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A0800 ) D# 642 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A0C00 ) D# 643 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A1000 ) D# 644 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A1400 ) D# 645 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A1800 ) D# 646 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A1C00 ) D# 647 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A2000 ) D# 648 code{ 
\begin_inset Newline newline
\end_inset

( active config global ) :# fov 2 :# cuco 700 :# testb 0 :# ps/ 4
\begin_inset Newline newline
\end_inset

[ d# 4 ps/ ! ] :# sim 1 [ d# 1 sim ! ] :# dh 0 [ d# 0 dh ! ] { br }
\begin_inset Newline newline
\end_inset

: compile [ d# 940 ] load ;
\begin_inset Newline newline
\end_inset

: tether { -cr } : te [ d# 944 ] load ;
\begin_inset Newline newline
\end_inset

: simrec ; ( default nop )
\begin_inset Newline newline
\end_inset

: logger winver drop if [ d# 554 ] d# 3 loads then ;
\begin_inset Newline newline
\end_inset

: -tape [ d# 1 ] d# 1 and ; [ qwerty seeb ] }block
\begin_inset Newline newline
\end_inset

( 002A2400 ) D# 649 shadow{ 
\begin_inset Newline newline
\end_inset

( these parameters are globally resident and should not be overloaded.
\begin_inset Newline newline
\end_inset

use ) [ warm ] ( after changing any but variables marked hot.
 )
\begin_inset Newline newline
\end_inset

: sim ( is ) 0 ( for full hi lvl integrator, ) 1 ( for faster hand
\begin_inset Newline newline
\end_inset

coded, ) 2 ( for fastest partial sim, ) 3 ( no sim for tare.
 )
\begin_inset Newline newline
\end_inset

: fov ( abstract display scale )
\begin_inset Newline newline
\end_inset

: ps/ ( picosec per display step in hardsim )
\begin_inset Newline newline
\end_inset

: dh ( holds drive handle we are responsible for.
 )
\begin_inset Newline newline
\end_inset

: testb ( nonzero to enable testbeds.
 )
\begin_inset Newline newline
\end_inset

: compile ( compiles rom for layout and ram for optional initialization
\begin_inset Newline newline
\end_inset

via ) [ pram ] ( in hardsim.
 )
\begin_inset Newline newline
\end_inset

: simrec ( defined here as nop in case not loaded )
\begin_inset Newline newline
\end_inset

: logger ( compiles log file generator in windows systems )
\begin_inset Newline newline
\end_inset

: -tape ( the ) [ yellow ] ( literal must be 0 for tapeout, 1 for testing.
 )
\begin_inset Newline newline
\end_inset

: saying [ qwerty ] ( at the end of the block enables the qwerty keyboard
\begin_inset Newline newline
\end_inset

mode till next boot.
 ) }block
\begin_inset Newline newline
\end_inset

( 002A2800 ) D# 650 code{ 
\begin_inset Newline newline
\end_inset

( cfchip definition active )
\begin_inset Newline newline
\end_inset

: 6row 600n 601n 602n 603n 604n 605n 606n 607n 608n 609n 610n 611n
\begin_inset Newline newline
\end_inset

612n 613n 614n 615n 616n 617n ;
\begin_inset Newline newline
\end_inset

: 5row 500n 501n 502n 503n 504n 505n 506n 507n 508n 509n 510n 511n
\begin_inset Newline newline
\end_inset

512n 513n 514n 515n 516n 517n ;
\begin_inset Newline newline
\end_inset

: 4row 400n 401n 402n 403n 404n 405n 406n 407n 408n 409n 410n 411n
\begin_inset Newline newline
\end_inset

412n 413n 414n 415n 416n 417n ;
\begin_inset Newline newline
\end_inset

: 3row 300n 301n 302n 303n 304n 305n 306n 307n 308n 309n 310n 311n
\begin_inset Newline newline
\end_inset

312n 313n 314n 315n 316n 317n ;
\begin_inset Newline newline
\end_inset

: 2row 200n 201n 202n 203n 204n 205n 206n 207n 208n 209n 210n 211n
\begin_inset Newline newline
\end_inset

212n 213n 214n 215n 216n 217n ;
\begin_inset Newline newline
\end_inset

: 1row 100n 101n 102n 103n 104n 105n 106n 107n 108n 109n 110n 111n
\begin_inset Newline newline
\end_inset

112n 113n 114n 115n 116n 117n ; }block
\begin_inset Newline newline
\end_inset

( 002A2C00 ) D# 651 shadow{ 
\begin_inset Newline newline
\end_inset

( define chip to lay out, loaded from 998 )
\begin_inset Newline newline
\end_inset

: 3..0row ( lay out all the nodes.
 comment those you do not wish to
\begin_inset Newline newline
\end_inset

work with; make active nodes green.
 make sure cuco numbers a valid
\begin_inset Newline newline
\end_inset

node that you are laying out before doing extract )
\begin_inset Newline newline
\end_inset

: chip ( top-level gds cell )
\begin_inset Newline newline
\end_inset

: chip0 ( octagon before global - well before wc )
\begin_inset Newline newline
\end_inset

: warnings ( nodes 3 or 5 require 4.
 ) { cr }
\begin_inset Newline newline
\end_inset

( change ) offset ( to reflect offset ) }block
\begin_inset Newline newline
\end_inset

( 002A3000 ) D# 652 code{ 
\begin_inset Newline newline
\end_inset

( cfchip definition { 0000004F } active )
\begin_inset Newline newline
\end_inset

: 7row 700n 701n 702n 703n 704n 705n 706n 707n 708n 709n 710n 711n
\begin_inset Newline newline
\end_inset

712n 713n 714n 715n 716n 717n ;
\begin_inset Newline newline
\end_inset

: 0row 000n 001n 002n 003n 004n 005n 006n 007n 008n 009n 010n 011n
\begin_inset Newline newline
\end_inset

012n 013n 014n 015n 016n 017n ;
\begin_inset Newline newline
\end_inset

: logo poly cpr m1 cpr m2 cpr m3 cpr m4 cpr ;
\begin_inset Newline newline
\end_inset

: chip0 power octagon dummy global pcps 0row 1row 2row 3row 4row 5row
\begin_inset Newline newline
\end_inset

6row 7row ;
\begin_inset Newline newline
\end_inset

: chip seal origin v chip0 d# 120 [ gy d# -169 + ] v logo ; }block
\begin_inset Newline newline
\end_inset

( 002A3400 ) D# 653 shadow{ 
\begin_inset Newline newline
\end_inset

( define chip to lay out, loaded from 998 )
\begin_inset Newline newline
\end_inset

: 3..0row ( lay out all the nodes.
 comment those you do not wish to
\begin_inset Newline newline
\end_inset

work with; make active nodes green.
 make sure cuco numbers a valid
\begin_inset Newline newline
\end_inset

node that you are laying out before doing extract )
\begin_inset Newline newline
\end_inset

: chip ( top-level gds cell )
\begin_inset Newline newline
\end_inset

: chip0 ( octagon before global - well before wc )
\begin_inset Newline newline
\end_inset

: warnings ( nodes 3 or 5 require 4.
 ) { cr }
\begin_inset Newline newline
\end_inset

( change ) offset ( to reflect offset ) }block
\begin_inset Newline newline
\end_inset

( 002A3800 ) D# 654 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A3C00 ) D# 655 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A4000 ) D# 656 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A4400 ) D# 657 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A4800 ) D# 658 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A4C00 ) D# 659 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A5000 ) D# 660 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A5400 ) D# 661 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A5800 ) D# 662 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A5C00 ) D# 663 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A6000 ) D# 664 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A6400 ) D# 665 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A6800 ) D# 666 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A6C00 ) D# 667 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A7000 ) D# 668 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A7400 ) D# 669 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A7800 ) D# 670 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A7C00 ) D# 671 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A8000 ) D# 672 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A8400 ) D# 673 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A8800 ) D# 674 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A8C00 ) D# 675 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A9000 ) D# 676 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A9400 ) D# 677 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A9800 ) D# 678 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002A9C00 ) D# 679 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AA000 ) D# 680 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AA400 ) D# 681 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AA800 ) D# 682 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AAC00 ) D# 683 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AB000 ) D# 684 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AB400 ) D# 685 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AB800 ) D# 686 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002ABC00 ) D# 687 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AC000 ) D# 688 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AC400 ) D# 689 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AC800 ) D# 690 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002ACC00 ) D# 691 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AD000 ) D# 692 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AD400 ) D# 693 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AD800 ) D# 694 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002ADC00 ) D# 695 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AE000 ) D# 696 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AE400 ) D# 697 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AE800 ) D# 698 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AEC00 ) D# 699 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AF000 ) D# 700 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AF400 ) D# 701 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AF800 ) D# 702 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002AFC00 ) D# 703 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B0000 ) D# 704 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B0400 ) D# 705 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B0800 ) D# 706 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B0C00 ) D# 707 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B1000 ) D# 708 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B1400 ) D# 709 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B1800 ) D# 710 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B1C00 ) D# 711 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B2000 ) D# 712 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B2400 ) D# 713 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B2800 ) D# 714 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B2C00 ) D# 715 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B3000 ) D# 716 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B3400 ) D# 717 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B3800 ) D# 718 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B3C00 ) D# 719 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B4000 ) D# 720 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B4400 ) D# 721 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B4800 ) D# 722 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B4C00 ) D# 723 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B5000 ) D# 724 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B5400 ) D# 725 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B5800 ) D# 726 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B5C00 ) D# 727 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B6000 ) D# 728 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B6400 ) D# 729 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B6800 ) D# 730 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B6C00 ) D# 731 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B7000 ) D# 732 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B7400 ) D# 733 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B7800 ) D# 734 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B7C00 ) D# 735 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B8000 ) D# 736 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B8400 ) D# 737 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B8800 ) D# 738 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B8C00 ) D# 739 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B9000 ) D# 740 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B9400 ) D# 741 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B9800 ) D# 742 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002B9C00 ) D# 743 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BA000 ) D# 744 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BA400 ) D# 745 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BA800 ) D# 746 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BAC00 ) D# 747 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BB000 ) D# 748 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BB400 ) D# 749 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BB800 ) D# 750 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BBC00 ) D# 751 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BC000 ) D# 752 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BC400 ) D# 753 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BC800 ) D# 754 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BCC00 ) D# 755 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BD000 ) D# 756 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BD400 ) D# 757 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BD800 ) D# 758 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BDC00 ) D# 759 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BE000 ) D# 760 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BE400 ) D# 761 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BE800 ) D# 762 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BEC00 ) D# 763 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BF000 ) D# 764 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BF400 ) D# 765 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BF800 ) D# 766 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002BFC00 ) D# 767 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C0000 ) D# 768 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C0400 ) D# 769 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C0800 ) D# 770 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C0C00 ) D# 771 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C1000 ) D# 772 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C1400 ) D# 773 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C1800 ) D# 774 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C1C00 ) D# 775 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C2000 ) D# 776 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C2400 ) D# 777 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C2800 ) D# 778 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C2C00 ) D# 779 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C3000 ) D# 780 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C3400 ) D# 781 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C3800 ) D# 782 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C3C00 ) D# 783 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C4000 ) D# 784 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C4400 ) D# 785 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C4800 ) D# 786 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C4C00 ) D# 787 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C5000 ) D# 788 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C5400 ) D# 789 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C5800 ) D# 790 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C5C00 ) D# 791 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C6000 ) D# 792 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C6400 ) D# 793 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C6800 ) D# 794 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C6C00 ) D# 795 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C7000 ) D# 796 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C7400 ) D# 797 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C7800 ) D# 798 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C7C00 ) D# 799 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C8000 ) D# 800 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C8400 ) D# 801 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C8800 ) D# 802 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C8C00 ) D# 803 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C9000 ) D# 804 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C9400 ) D# 805 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C9800 ) D# 806 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002C9C00 ) D# 807 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CA000 ) D# 808 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CA400 ) D# 809 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CA800 ) D# 810 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CAC00 ) D# 811 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CB000 ) D# 812 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CB400 ) D# 813 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CB800 ) D# 814 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CBC00 ) D# 815 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CC000 ) D# 816 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CC400 ) D# 817 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CC800 ) D# 818 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CCC00 ) D# 819 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CD000 ) D# 820 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CD400 ) D# 821 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CD800 ) D# 822 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CDC00 ) D# 823 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CE000 ) D# 824 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CE400 ) D# 825 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CE800 ) D# 826 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CEC00 ) D# 827 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CF000 ) D# 828 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CF400 ) D# 829 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CF800 ) D# 830 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002CFC00 ) D# 831 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D0000 ) D# 832 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D0400 ) D# 833 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D0800 ) D# 834 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D0C00 ) D# 835 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D1000 ) D# 836 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D1400 ) D# 837 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D1800 ) D# 838 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D1C00 ) D# 839 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D2000 ) D# 840 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D2400 ) D# 841 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D2800 ) D# 842 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D2C00 ) D# 843 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D3000 ) D# 844 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D3400 ) D# 845 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D3800 ) D# 846 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D3C00 ) D# 847 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D4000 ) D# 848 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D4400 ) D# 849 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D4800 ) D# 850 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D4C00 ) D# 851 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D5000 ) D# 852 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D5400 ) D# 853 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D5800 ) D# 854 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D5C00 ) D# 855 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D6000 ) D# 856 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D6400 ) D# 857 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D6800 ) D# 858 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D6C00 ) D# 859 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D7000 ) D# 860 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D7400 ) D# 861 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D7800 ) D# 862 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D7C00 ) D# 863 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D8000 ) D# 864 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D8400 ) D# 865 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D8800 ) D# 866 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D8C00 ) D# 867 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D9000 ) D# 868 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D9400 ) D# 869 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D9800 ) D# 870 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002D9C00 ) D# 871 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DA000 ) D# 872 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DA400 ) D# 873 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DA800 ) D# 874 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DAC00 ) D# 875 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DB000 ) D# 876 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DB400 ) D# 877 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DB800 ) D# 878 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DBC00 ) D# 879 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DC000 ) D# 880 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DC400 ) D# 881 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DC800 ) D# 882 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DCC00 ) D# 883 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DD000 ) D# 884 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DD400 ) D# 885 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DD800 ) D# 886 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DDC00 ) D# 887 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DE000 ) D# 888 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DE400 ) D# 889 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002DE800 ) D# 890 code{ 
\begin_inset Newline newline
\end_inset

( ga144 chrt .18 design specific )
\begin_inset Newline newline
\end_inset

: gdsnos [ d# 440 ] ;
\begin_inset Newline newline
\end_inset

: nnx { 0000010F } [ d# 18 ] ; { -cr } : nny { 0000008F } [ d# 8 ]
\begin_inset Newline newline
\end_inset

; { -cr } : nns [ nnx nny * ] ;
\begin_inset Newline newline
\end_inset

: nnc ( nns ) [ nns d# 1 + ] ;
\begin_inset Newline newline
\end_inset

: nn-n ( n-n { 0000014F } ) [ d# 100 ] /mod [ nnx ] * + ;
\begin_inset Newline newline
\end_inset

: n-nn ( n-n ) [ nnx ] /mod { 0000014F } [ d# 100 ] * + ; { br }
\begin_inset Newline newline
\end_inset

: gapl [ d# 2 ] ( strap ) [ d# 5 + ] ( pwr ) [ d# 0 + ] ( chans ) [
\begin_inset Newline newline
\end_inset

d# 20 d# 2 * + ] ;
\begin_inset Newline newline
\end_inset

: gapr [ d# 2 ] ( strap ) [ d# 5 + ] ( pwr ) [ d# 0 + ] ( chans ) [
\begin_inset Newline newline
\end_inset

d# 24 d# 2 * + ] ;
\begin_inset Newline newline
\end_inset

: gapb [ d# 2 ] ( strap ) [ d# 5 + ] ( pwr ) [ d# 0 + ] ( chans ) [
\begin_inset Newline newline
\end_inset

d# 28 d# 2 * + ] ;
\begin_inset Newline newline
\end_inset

: gapt [ d# 2 ] ( strap ) [ d# 5 + ] ( pwr ) [ d# 0 + ] ( chans ) [
\begin_inset Newline newline
\end_inset

d# 18 d# 2 * + ] ;
\begin_inset Newline newline
\end_inset

: ray0 ( -xy ) gapl [ d# 199 ] + gapb [ d# 199 ] + ;
\begin_inset Newline newline
\end_inset

: rayn ( -xy ) nnx [ d# 350 ] * nny [ d# 759 ] * d# -1 + ray0 v+ ;
\begin_inset Newline newline
\end_inset

{ br }
\begin_inset Newline newline
\end_inset

: gx [ rayn drop gapr + d# 199 + ] ;
\begin_inset Newline newline
\end_inset

: gy [ rayn nip gapt + d# 199 + ] ; { br }
\begin_inset Newline newline
\end_inset

: origin { 0000148F } { 00000B2F } d# 26 d# 26 ;
\begin_inset Newline newline
\end_inset

: cx [ origin drop d# 2 * gx + d# 2 + ] ;
\begin_inset Newline newline
\end_inset

: cy [ origin nip d# 2 * gy + d# 2 + ] ;
\begin_inset Newline newline
\end_inset

: -cx [ cx negate ] ; { -cr } : cx*y [ cx cy * ] ; { br }
\begin_inset Newline newline
\end_inset

: gfx [ d# 8 ] ; { -cr } : gfy [ d# 16 ] ; }block
\begin_inset Newline newline
\end_inset

( 002DEC00 ) D# 891 shadow{ 
\begin_inset Newline newline
\end_inset

: gdsnos ( block for gds layer numbers )
\begin_inset Newline newline
\end_inset

: nnx ( and nny number of nodes/row and /column )
\begin_inset Newline newline
\end_inset

: nnc ( number of nodes compiled )
\begin_inset Newline newline
\end_inset

: nn-n ( and ) n-nn ( convert yx notation to and from linear node numbers
 )
\begin_inset Newline newline
\end_inset

: gapl, r, b, t ( distance in tiles between inner edge of padring bus
\begin_inset Newline newline
\end_inset

and outer edge of core pwr )
\begin_inset Newline newline
\end_inset

: ray0 ( and ) rayn ( are gxy relative phys origin and upper right
\begin_inset Newline newline
\end_inset

corner of node array.
 source of constants is ) [ xtab ] ( and ) [ ytab.
 ]
\begin_inset Newline newline
\end_inset

: gx ( and ) gy ( bounds of pad ring.
 ) [ always remember to check ]
\begin_inset Newline newline
\end_inset

global [ reset wiring when size or placement of node array or pad
\begin_inset Newline newline
\end_inset

ring are changed! ]
\begin_inset Newline newline
\end_inset

: cx ( and ) cy ( bounds of seal ring.
 )
\begin_inset Newline newline
\end_inset

: -cx ( negative tiles/row )
\begin_inset Newline newline
\end_inset

: origin ( origin of 'die' i.e.
 pad ring within seal ring.
 c coords
\begin_inset Newline newline
\end_inset

rel to seal; g rel to 'die' )
\begin_inset Newline newline
\end_inset

: gfx ( and ) gfy ( fill cell grid ) }block
\begin_inset Newline newline
\end_inset

( 002DF000 ) D# 892 code{ 
\begin_inset Newline newline
\end_inset

( ga144 pads, ports and resets ) { br }
\begin_inset Newline newline
\end_inset

: port ( i-pa ) align tbl [ h# 000001D5 , h# 00000115 , h# 00000175
\begin_inset Newline newline
\end_inset

, h# 00000145 , h# 00000195 , h# 00000185 , h# 000001B5 , h# 000001A5
\begin_inset Newline newline
\end_inset

, ]
\begin_inset Newline newline
\end_inset

: idle ( n-p ) [ nnx ] /mod [ nny d# -1 + ] mod [ d# 1 ] min [ d# 4 ]
\begin_inset Newline newline
\end_inset

+ swap [ nnx d# -1 + ] mod [ d# 1 ] min 2* + port ;
\begin_inset Newline newline
\end_inset

: rstadr align tbl [ h# 000000AA , h# 00000195 , h# 00000185 , h# 000001B5
\begin_inset Newline newline
\end_inset

, h# 000001A5 , ]
\begin_inset Newline newline
\end_inset

: rstdef strings ( p0aa p13f p12f p11f p10f )
\begin_inset Newline newline
\end_inset

: ?rst ( pa-i ) [ d# 4 ] for dup i rstadr or while drop -next abort
\begin_inset Newline newline
\end_inset

then drop drop pop ; }block
\begin_inset Newline newline
\end_inset

( 002DF400 ) D# 893 shadow{ 
\begin_inset Newline newline
\end_inset

: port ( returns port for 0-3 rdlu then edges )
\begin_inset Newline newline
\end_inset

: idle ( is idle p value for given node.
 )
\begin_inset Newline newline
\end_inset

: rstadr ( and ) rstdef ( number values and white names of p straps
\begin_inset Newline newline
\end_inset

rom, corn, side, top/bot, mid.
 )
\begin_inset Newline newline
\end_inset

: ?rst ( returns index of valid reset or aborts.
 ) }block
\begin_inset Newline newline
\end_inset

( 002DF800 ) D# 894 code{ 
\begin_inset Newline newline
\end_inset

( ga144 node types ) { br }
\begin_inset Newline newline
\end_inset

: laid [ nns aray ] { -cr } : resets [ nns aray ]
\begin_inset Newline newline
\end_inset

: kinds [ nns aray ] { br }
\begin_inset Newline newline
\end_inset

: 0's ( n ) for d# 0 , next ;
\begin_inset Newline newline
\end_inset

: +roms ( -ia ) align ray [ nns 0's ]
\begin_inset Newline newline
\end_inset

: iz ( nn i ) swap nn-n +roms ! ; { cr }
\begin_inset Newline newline
\end_inset

[ d# 701 d# 2 iz d# 705 d# 10 iz d# 708 d# 6 iz ] { indent }
\begin_inset Newline newline
\end_inset

[ d# 709 d# 14 iz d# 713 d# 14 iz d# 717 d# 14 iz ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 117 d# 14 iz d# 617 d# 14 iz ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 1 d# 2 iz d# 200 d# 18 iz d# 300 d# 4 iz ] { cr }
\begin_inset Newline newline
\end_inset

( eforth ) [ d# 105 d# 20 iz d# 106 d# 20 iz ] ( sdram...
 ) { cr }
\begin_inset Newline newline
\end_inset

[ d# 7 d# 20 iz d# 8 d# 20 iz d# 9 d# 20 iz d# 107 d# 20 iz d# 108
\begin_inset Newline newline
\end_inset

d# 20 iz ]
\begin_inset Newline newline
\end_inset

: @rom ( nn-n ) nn-n +roms @ [ d# 22 ] less if drop [ d# 1418 ] + ;
\begin_inset Newline newline
\end_inset

then drop [ d# 100 ] mod [ d# 1301 ] + ; { br }
\begin_inset Newline newline
\end_inset

: bedtab ( -serbed ) [ cuco ] @ nn-n kinds @ ;
\begin_inset Newline newline
\end_inset

: ?serbed [ testb ] @ d# 0 or drop if bedtab ; then d# 0 ; }block
\begin_inset Newline newline
\end_inset

( 002DFC00 ) D# 895 shadow{ 
\begin_inset Newline newline
\end_inset

: laid ( nz if node laid out )
\begin_inset Newline newline
\end_inset

: resets ( index of reset address )
\begin_inset Newline newline
\end_inset

: kinds ( kind for testbeds )
\begin_inset Newline newline
\end_inset

: +roms ( and ) @rom ( are here only as temporary kludges.
 we will
\begin_inset Newline newline
\end_inset

eventually load a table from the node defns for default kind and prom
\begin_inset Newline newline
\end_inset

source.
 )
\begin_inset Newline newline
\end_inset

: +roms ( array indexed by linear node number returning code number
\begin_inset Newline newline
\end_inset

for rom load block.
 )
\begin_inset Newline newline
\end_inset

: iz ( sets node ) [ nn ] ( to use rom load block ) [ n ] ( codes-
\begin_inset Newline newline
\end_inset

0-arith 2-serdes 4-syncboot 6-async 10-spi 14-analog 18-1wire )
\begin_inset Newline newline
\end_inset

: @rom ( returns block number for production rom code applicable to
\begin_inset Newline newline
\end_inset

the given node.
 )
\begin_inset Newline newline
\end_inset

: ?serbed ( 0-none 1-async 2-sync 3-1wire 4-spi 5-strap 6-serdes 7-servers
\begin_inset Newline newline
\end_inset

for ) [ cuco ] ( if ) [ testb ] ( nz.
 ) }block
\begin_inset Newline newline
\end_inset

( 002E0000 ) D# 896 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E0400 ) D# 897 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E0800 ) D# 898 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E0C00 ) D# 899 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E1000 ) D# 900 code{ 
\begin_inset Newline newline
\end_inset

( okad tools compile is in cfuse )
\begin_inset Newline newline
\end_inset

: softsim { -cr } : so d# 942 load ;
\begin_inset Newline newline
\end_inset

: tile d# 910 load ; ( layout tiles ) [ d# 146 load ]
\begin_inset Newline newline
\end_inset

: place { -cr } : pl tile ( layout and display )
\begin_inset Newline newline
\end_inset

: flat { -cr } : fl d# 912 load ; ( 2d display )
\begin_inset Newline newline
\end_inset

: cover d# 914 load ;
\begin_inset Newline newline
\end_inset

: gds d# 916 load ; ( construct gds file )
\begin_inset Newline newline
\end_inset

: @gds d# 918 load ; ( display gds )
\begin_inset Newline newline
\end_inset

: ?gds d# 920 load ; ( examine gds )
\begin_inset Newline newline
\end_inset

: extract { -cr } : ex d# 922 load ; ( build tables )
\begin_inset Newline newline
\end_inset

: hardsim { -cr } : ha d# 924 load ; ( integrate i and v )
\begin_inset Newline newline
\end_inset

: hilo d# 926 load ; ( mark nets above vdd/2 )
\begin_inset Newline newline
\end_inset

: lite d# 928 load ;
\begin_inset Newline newline
\end_inset

: lit d# 908 load ;
\begin_inset Newline newline
\end_inset

: pram d# 934 load ;
\begin_inset Newline newline
\end_inset

: calc d# 930 load ; ( tsmc calculation app )
\begin_inset Newline newline
\end_inset

: prism d# 932 load ; ( tsmc spectrum ) [ d# 890 d# 3 loads ] ( design
\begin_inset Newline newline
\end_inset

specific ) [ mark empty ] }block
\begin_inset Newline newline
\end_inset

( 002E1400 ) D# 901 shadow{ 
\begin_inset Newline newline
\end_inset

( design load block for okad2 applications )
\begin_inset Newline newline
\end_inset

: ex
\begin_inset Newline newline
\end_inset

: extract ( netlist for simulation and go into )
\begin_inset Newline newline
\end_inset

: flat ( view of layout - keys )
\begin_inset Newline newline
\end_inset

: .
\begin_inset Newline newline
\end_inset

: ....
 [ ludr ] ( big left up down right )
\begin_inset Newline newline
\end_inset

: .432 [ ludr ] ( toggle metal 2-4 , move ludr )
\begin_inset Newline newline
\end_inset

: ....
 [ +g1- ] ( zoom in, toggle gates, toggle metal1, zoom out )
\begin_inset Newline newline
\end_inset

: .
 ( exit flat view or simulator with ) [ space e space ] ( to enter
\begin_inset Newline newline
\end_inset

block editor and get new key menu on bottum right )
\begin_inset Newline newline
\end_inset

: ha
\begin_inset Newline newline
\end_inset

: hardsim ( virtual scope ) [ g ] n ( go till number ) [ h ] ( go till
\begin_inset Newline newline
\end_inset

key ) [ b ] ( go 1000 counts , exit with ) [ e ]
\begin_inset Newline newline
\end_inset

: gds ( consruct gds file image and display )
\begin_inset Newline newline
\end_inset

: @gds ( view file records )
\begin_inset Newline newline
\end_inset

: ?gds
\begin_inset Newline newline
\end_inset

: lite ( brighten the net pointed to - metal-1 )
\begin_inset Newline newline
\end_inset

: lit ( brighten an additional net ) }block
\begin_inset Newline newline
\end_inset

( 002E1800 ) D# 902 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E1C00 ) D# 903 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E2000 ) D# 904 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E2400 ) D# 905 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E2800 ) D# 906 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E2C00 ) D# 907 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E3000 ) D# 908 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E3400 ) D# 909 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E3800 ) D# 910 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E3C00 ) D# 911 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E4000 ) D# 912 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E4400 ) D# 913 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E4800 ) D# 914 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E4C00 ) D# 915 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E5000 ) D# 916 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E5400 ) D# 917 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E5800 ) D# 918 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E5C00 ) D# 919 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E6000 ) D# 920 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E6400 ) D# 921 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E6800 ) D# 922 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E6C00 ) D# 923 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E7000 ) D# 924 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E7400 ) D# 925 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E7800 ) D# 926 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E7C00 ) D# 927 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E8000 ) D# 928 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E8400 ) D# 929 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E8800 ) D# 930 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E8C00 ) D# 931 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E9000 ) D# 932 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E9400 ) D# 933 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E9800 ) D# 934 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002E9C00 ) D# 935 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EA000 ) D# 936 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EA400 ) D# 937 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EA800 ) D# 938 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EAC00 ) D# 939 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EB000 ) D# 940 code{ 
\begin_inset Newline newline
\end_inset

( g18 compiler ) [ empty c ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 0 d# 0 laid nns fill d# 0 d# 0 kinds nns fill ] { br }
\begin_inset Newline newline
\end_inset

[ d# 1400 load ] { br }
\begin_inset Newline newline
\end_inset

: reset ( a ) ?rst [ com ] @ resets ! ;
\begin_inset Newline newline
\end_inset

: kind ( n ) [ com ] @ kinds ! ;
\begin_inset Newline newline
\end_inset

: node ( nn ) nn-n nns mod dup [ com ] ! { cr }
\begin_inset Newline newline
\end_inset

n-nn @rom load ;
\begin_inset Newline newline
\end_inset

: bin ( nn ) d# 0 memory swap nn-n [ com ] ! d# 0 memory d# 512 move
\begin_inset Newline newline
\end_inset

; { br }
\begin_inset Newline newline
\end_inset

: program d# 1380 load [ nns d# -1 + ] for i [ com ] ! { cr }
\begin_inset Newline newline
\end_inset

i idle reset i n-nn @rom load -next { cr }
\begin_inset Newline newline
\end_inset

( special rom's ) [ d# 1304 ] load { cr }
\begin_inset Newline newline
\end_inset

-tape drop if [ d# 1300 ] load then ; { br }
\begin_inset Newline newline
\end_inset

[ d# 1402 d# 6 loads target program empty ] }block
\begin_inset Newline newline
\end_inset

( 002EB400 ) D# 941 shadow{ 
\begin_inset Newline newline
\end_inset

( compiles all relevant g18 code.
 ) { br }
\begin_inset Newline newline
\end_inset

: laid ( is cleared for setting as nodes laid out )
\begin_inset Newline newline
\end_inset

: resets ( is set to default multiport executes for all nodes and may
\begin_inset Newline newline
\end_inset

be overridden in source code using ) reset
\begin_inset Newline newline
\end_inset

: kinds ( is set to default testbed none and may be overridden with )
\begin_inset Newline newline
\end_inset

kind ( to 0-none 1-async 2-sync 3-1wire 4-spi 5-strap 6-serdes 7-servers
 )
\begin_inset Newline newline
\end_inset

: program ( compile code for multicomputers.
 always compiles standard
\begin_inset Newline newline
\end_inset

rom; if not tapeout, the load block at { 0000A28F } defines test environment
\begin_inset Newline newline
\end_inset

which may be in rom, ram, or both.
 ) { br }
\begin_inset Newline newline
\end_inset

: node ( starts random compilation for node ) [ nn ] ( by compiling
\begin_inset Newline newline
\end_inset

node ) [ nn's ] ( rom )
\begin_inset Newline newline
\end_inset

: bin ( saves the binary just generated in the bin for node ) [ nn, ]
\begin_inset Newline newline
\end_inset

( which must be outside chip { 0000000F } { 0000000F } .
 ) }block
\begin_inset Newline newline
\end_inset

( 002EB800 ) D# 942 code{ 
\begin_inset Newline newline
\end_inset

( g18 simulator ) [ compile empty ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 1272 d# 11 loads ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 1256 d# 2 loads ] ( testbed ) { cr }
\begin_inset Newline newline
\end_inset

[ d# 1260 d# 4 loads ] ( memory instructions ) { cr }
\begin_inset Newline newline
\end_inset

[ d# 1270 load ] ( show pins ) { cr }
\begin_inset Newline newline
\end_inset

[ d# 1250 load ] ( 4x8 window on 8x18 ) { cr }
\begin_inset Newline newline
\end_inset

[ d# 1294 d# 3 loads ] ( display keyboard initialization ) { cr }
\begin_inset Newline newline
\end_inset

[ reset lefts rights downs ups ] ( /asynch ) { cr { 0000155F } { 0000582F
 } }
\begin_inset Newline newline
\end_inset

( boots { 0000155F } { 0000588F } boots { 0000000F } { 0000190F }
\begin_inset Newline newline
\end_inset

boots ) { cr { 0000000F } { 0000258F } }
\begin_inset Newline newline
\end_inset

( boots { 0000000F } { 000025CF } boots { 0000000F } { 000025EF }
\begin_inset Newline newline
\end_inset

boots ) [ d# 0 d# 0 boots ] { cr }
\begin_inset Newline newline
\end_inset

[ ok h ] }block
\begin_inset Newline newline
\end_inset

( 002EBC00 ) D# 943 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EC000 ) D# 944 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EC400 ) D# 945 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EC800 ) D# 946 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002ECC00 ) D# 947 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002ED000 ) D# 948 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002ED400 ) D# 949 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002ED800 ) D# 950 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EDC00 ) D# 951 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EE000 ) D# 952 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EE400 ) D# 953 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EE800 ) D# 954 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EEC00 ) D# 955 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EF000 ) D# 956 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EF400 ) D# 957 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EF800 ) D# 958 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002EFC00 ) D# 959 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F0000 ) D# 960 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F0400 ) D# 961 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F0800 ) D# 962 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F0C00 ) D# 963 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F1000 ) D# 964 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F1400 ) D# 965 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F1800 ) D# 966 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F1C00 ) D# 967 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F2000 ) D# 968 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F2400 ) D# 969 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F2800 ) D# 970 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F2C00 ) D# 971 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F3000 ) D# 972 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F3400 ) D# 973 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F3800 ) D# 974 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F3C00 ) D# 975 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F4000 ) D# 976 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F4400 ) D# 977 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F4800 ) D# 978 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F4C00 ) D# 979 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F5000 ) D# 980 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F5400 ) D# 981 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F5800 ) D# 982 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F5C00 ) D# 983 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F6000 ) D# 984 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F6400 ) D# 985 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F6800 ) D# 986 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F6C00 ) D# 987 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F7000 ) D# 988 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F7400 ) D# 989 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F7800 ) D# 990 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F7C00 ) D# 991 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F8000 ) D# 992 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F8400 ) D# 993 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F8800 ) D# 994 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F8C00 ) D# 995 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F9000 ) D# 996 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F9400 ) D# 997 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F9800 ) D# 998 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002F9C00 ) D# 999 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FA000 ) D# 1000 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FA400 ) D# 1001 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FA800 ) D# 1002 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FAC00 ) D# 1003 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FB000 ) D# 1004 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FB400 ) D# 1005 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FB800 ) D# 1006 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FBC00 ) D# 1007 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FC000 ) D# 1008 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FC400 ) D# 1009 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FC800 ) D# 1010 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FCC00 ) D# 1011 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FD000 ) D# 1012 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FD400 ) D# 1013 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FD800 ) D# 1014 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FDC00 ) D# 1015 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FE000 ) D# 1016 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FE400 ) D# 1017 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FE800 ) D# 1018 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FEC00 ) D# 1019 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FF000 ) D# 1020 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FF400 ) D# 1021 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FF800 ) D# 1022 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 002FFC00 ) D# 1023 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00300000 ) D# 1024 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00300400 ) D# 1025 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00300800 ) D# 1026 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00300C00 ) D# 1027 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00301000 ) D# 1028 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00301400 ) D# 1029 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00301800 ) D# 1030 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00301C00 ) D# 1031 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00302000 ) D# 1032 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00302400 ) D# 1033 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00302800 ) D# 1034 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00302C00 ) D# 1035 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00303000 ) D# 1036 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00303400 ) D# 1037 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00303800 ) D# 1038 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00303C00 ) D# 1039 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00304000 ) D# 1040 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00304400 ) D# 1041 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00304800 ) D# 1042 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00304C00 ) D# 1043 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00305000 ) D# 1044 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00305400 ) D# 1045 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00305800 ) D# 1046 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00305C00 ) D# 1047 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00306000 ) D# 1048 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00306400 ) D# 1049 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00306800 ) D# 1050 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00306C00 ) D# 1051 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00307000 ) D# 1052 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00307400 ) D# 1053 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00307800 ) D# 1054 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00307C00 ) D# 1055 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00308000 ) D# 1056 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00308400 ) D# 1057 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00308800 ) D# 1058 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00308C00 ) D# 1059 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00309000 ) D# 1060 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00309400 ) D# 1061 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00309800 ) D# 1062 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00309C00 ) D# 1063 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030A000 ) D# 1064 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030A400 ) D# 1065 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030A800 ) D# 1066 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030AC00 ) D# 1067 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030B000 ) D# 1068 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030B400 ) D# 1069 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030B800 ) D# 1070 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030BC00 ) D# 1071 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030C000 ) D# 1072 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030C400 ) D# 1073 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030C800 ) D# 1074 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030CC00 ) D# 1075 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030D000 ) D# 1076 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030D400 ) D# 1077 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030D800 ) D# 1078 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030DC00 ) D# 1079 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030E000 ) D# 1080 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030E400 ) D# 1081 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030E800 ) D# 1082 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030EC00 ) D# 1083 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030F000 ) D# 1084 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030F400 ) D# 1085 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030F800 ) D# 1086 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0030FC00 ) D# 1087 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00310000 ) D# 1088 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00310400 ) D# 1089 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00310800 ) D# 1090 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00310C00 ) D# 1091 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00311000 ) D# 1092 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00311400 ) D# 1093 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00311800 ) D# 1094 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00311C00 ) D# 1095 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00312000 ) D# 1096 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00312400 ) D# 1097 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00312800 ) D# 1098 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00312C00 ) D# 1099 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00313000 ) D# 1100 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00313400 ) D# 1101 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00313800 ) D# 1102 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00313C00 ) D# 1103 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00314000 ) D# 1104 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00314400 ) D# 1105 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00314800 ) D# 1106 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00314C00 ) D# 1107 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00315000 ) D# 1108 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00315400 ) D# 1109 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00315800 ) D# 1110 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00315C00 ) D# 1111 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00316000 ) D# 1112 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00316400 ) D# 1113 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00316800 ) D# 1114 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00316C00 ) D# 1115 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00317000 ) D# 1116 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00317400 ) D# 1117 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00317800 ) D# 1118 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00317C00 ) D# 1119 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00318000 ) D# 1120 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00318400 ) D# 1121 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00318800 ) D# 1122 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00318C00 ) D# 1123 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00319000 ) D# 1124 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00319400 ) D# 1125 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00319800 ) D# 1126 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00319C00 ) D# 1127 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031A000 ) D# 1128 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031A400 ) D# 1129 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031A800 ) D# 1130 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031AC00 ) D# 1131 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031B000 ) D# 1132 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031B400 ) D# 1133 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031B800 ) D# 1134 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031BC00 ) D# 1135 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031C000 ) D# 1136 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031C400 ) D# 1137 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031C800 ) D# 1138 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031CC00 ) D# 1139 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031D000 ) D# 1140 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031D400 ) D# 1141 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031D800 ) D# 1142 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031DC00 ) D# 1143 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031E000 ) D# 1144 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031E400 ) D# 1145 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031E800 ) D# 1146 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031EC00 ) D# 1147 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031F000 ) D# 1148 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031F400 ) D# 1149 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031F800 ) D# 1150 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0031FC00 ) D# 1151 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00320000 ) D# 1152 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00320400 ) D# 1153 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00320800 ) D# 1154 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00320C00 ) D# 1155 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00321000 ) D# 1156 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00321400 ) D# 1157 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00321800 ) D# 1158 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00321C00 ) D# 1159 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00322000 ) D# 1160 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00322400 ) D# 1161 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00322800 ) D# 1162 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00322C00 ) D# 1163 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00323000 ) D# 1164 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00323400 ) D# 1165 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00323800 ) D# 1166 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00323C00 ) D# 1167 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00324000 ) D# 1168 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00324400 ) D# 1169 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00324800 ) D# 1170 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00324C00 ) D# 1171 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00325000 ) D# 1172 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00325400 ) D# 1173 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00325800 ) D# 1174 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00325C00 ) D# 1175 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00326000 ) D# 1176 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00326400 ) D# 1177 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00326800 ) D# 1178 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00326C00 ) D# 1179 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00327000 ) D# 1180 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00327400 ) D# 1181 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00327800 ) D# 1182 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00327C00 ) D# 1183 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00328000 ) D# 1184 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00328400 ) D# 1185 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00328800 ) D# 1186 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00328C00 ) D# 1187 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00329000 ) D# 1188 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00329400 ) D# 1189 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00329800 ) D# 1190 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00329C00 ) D# 1191 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032A000 ) D# 1192 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032A400 ) D# 1193 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032A800 ) D# 1194 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032AC00 ) D# 1195 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032B000 ) D# 1196 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032B400 ) D# 1197 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032B800 ) D# 1198 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032BC00 ) D# 1199 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032C000 ) D# 1200 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032C400 ) D# 1201 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032C800 ) D# 1202 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032CC00 ) D# 1203 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032D000 ) D# 1204 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032D400 ) D# 1205 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032D800 ) D# 1206 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032DC00 ) D# 1207 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032E000 ) D# 1208 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032E400 ) D# 1209 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032E800 ) D# 1210 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032EC00 ) D# 1211 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032F000 ) D# 1212 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032F400 ) D# 1213 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032F800 ) D# 1214 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0032FC00 ) D# 1215 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00330000 ) D# 1216 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00330400 ) D# 1217 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00330800 ) D# 1218 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00330C00 ) D# 1219 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00331000 ) D# 1220 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00331400 ) D# 1221 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00331800 ) D# 1222 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00331C00 ) D# 1223 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00332000 ) D# 1224 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00332400 ) D# 1225 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00332800 ) D# 1226 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00332C00 ) D# 1227 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00333000 ) D# 1228 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00333400 ) D# 1229 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00333800 ) D# 1230 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00333C00 ) D# 1231 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00334000 ) D# 1232 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00334400 ) D# 1233 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00334800 ) D# 1234 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00334C00 ) D# 1235 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00335000 ) D# 1236 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00335400 ) D# 1237 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00335800 ) D# 1238 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00335C00 ) D# 1239 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00336000 ) D# 1240 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00336400 ) D# 1241 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00336800 ) D# 1242 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00336C00 ) D# 1243 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00337000 ) D# 1244 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00337400 ) D# 1245 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00337800 ) D# 1246 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00337C00 ) D# 1247 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00338000 ) D# 1248 code{ 
\begin_inset Newline newline
\end_inset

( smtm test ) [ h# 00000032 org ]
\begin_inset Newline newline
\end_inset

: go a! h# 0001557F !b h# 0001556A !b .
 pop @p+ { indent }
\begin_inset Newline newline
\end_inset

( ' ) @p+ dup 2/ .
 ( ' ) a ! ! h# 00000043 for { indent }
\begin_inset Newline newline
\end_inset

h# 0000003F !+ .
 unext { indent }
\begin_inset Newline newline
\end_inset

( ' ) 2* a! push .
 ( ' ' ) begin @p+ !+ .
 unext ( ' ) { indent }
\begin_inset Newline newline
\end_inset

( ' ) @p+ push ; ( ' ) ! warm ; { cr { 0000025F } }
\begin_inset Newline newline
\end_inset

[ h# 0000002A org ]
\begin_inset Newline newline
\end_inset

: r @p+ go ; r---
\begin_inset Newline newline
\end_inset

: d @p+ go ; -d--
\begin_inset Newline newline
\end_inset

: l @p+ go ; --l-
\begin_inset Newline newline
\end_inset

: u @p+ go ; ---u { cr }
\begin_inset Newline newline
\end_inset

[ d# 0 org ]
\begin_inset Newline newline
\end_inset

: path d u d u d u d r d u d u d u d l path ; }block
\begin_inset Newline newline
\end_inset

( 00338400 ) D# 1249 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00338800 ) D# 1250 code{ 
\begin_inset Newline newline
\end_inset

( show all nodes in miniature )
\begin_inset Newline newline
\end_inset

: window [ xorg ] @ d# 22 * d# 608 + [ yorg ] @ negate d# 4 + { indent }
\begin_inset Newline newline
\end_inset

d# 30 * d# 28 + over over at push [ d# 8 d# 22 * ] + { indent }
\begin_inset Newline newline
\end_inset

pop [ d# 4 d# 30 * ] + blue box ;
\begin_inset Newline newline
\end_inset

: .node ( n ) nn-n [ com ] ! ?red d# 48 emit ;
\begin_inset Newline newline
\end_inset

: line ( n ) cr d# 17 for dup .node d# 1 + -next drop ;
\begin_inset Newline newline
\end_inset

: .all window d# 610 d# 0 tab d# 7 for i d# 100 * line { indent }
\begin_inset Newline newline
\end_inset

-next ; { br }
\begin_inset Newline newline
\end_inset

[ exit ] ( help debugging multiport read/write )
\begin_inset Newline newline
\end_inset

: .pt ( a ) [ pt ] ! port @ h.
 cr pend @ h.
 cr ;
\begin_inset Newline newline
\end_inset

: .nd nn-n [ com ] ! { indent }
\begin_inset Newline newline
\end_inset

red right .pt green down .pt { indent }
\begin_inset Newline newline
\end_inset

red left .pt green up .pt cr { indent }
\begin_inset Newline newline
\end_inset

white es @ h.
 cr clu @ h.
 ;
\begin_inset Newline newline
\end_inset

: .all d# 610 d# 0 tab d# 705 .nd d# 800 d# 0 tab d# 708 .nd ; }block
\begin_inset Newline newline
\end_inset

( 00338C00 ) D# 1251 shadow{ 
\begin_inset Newline newline
\end_inset

: window ( paint a blue box behind the visible ) { indent }
\begin_inset Newline newline
\end_inset

( part of the array )
\begin_inset Newline newline
\end_inset

: .node ( pacman char for each node, ) { indent }
\begin_inset Newline newline
\end_inset

( red if active and silver if asleep )
\begin_inset Newline newline
\end_inset

: line ( draw one line of { 0000024F } nodes )
\begin_inset Newline newline
\end_inset

: .all ( move to upper right corner ) { indent }
\begin_inset Newline newline
\end_inset

( and draw all { 0000010F } lines of the array ) { br }
\begin_inset Newline newline
\end_inset

: .pt ( show port and pend for one direction )
\begin_inset Newline newline
\end_inset

: .nd ( show ports and pends for all four )
\begin_inset Newline newline
\end_inset

: .all ( alternate display for debugging ports ) }block
\begin_inset Newline newline
\end_inset

( 00339000 ) D# 1252 code{ 
\begin_inset Newline newline
\end_inset

[ html named ] ( softsim.html ) [ .hdr ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 1252 d# 1254 .blks ] ( this print screen ) { cr }
\begin_inset Newline newline
\end_inset

[ d# 942 d# 944 .blks ] ( load block ) { cr }
\begin_inset Newline newline
\end_inset

[ d# 1272 d# 1294 .blks ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 1256 d# 1260 .blks ] ( testbed ) { cr }
\begin_inset Newline newline
\end_inset

[ d# 1260 d# 1268 .blks ] ( memory instructions ) { cr }
\begin_inset Newline newline
\end_inset

[ d# 1270 d# 1272 .blks ] ( show pins ) { cr }
\begin_inset Newline newline
\end_inset

[ d# 1250 d# 1252 .blks ] ( 4x8 window on 8x18 ) { cr }
\begin_inset Newline newline
\end_inset

[ d# 1294 d# 1300 .blks ] ( screen/kbd initialization ) { cr }
\begin_inset Newline newline
\end_inset

[ .tlr ] ( blocks from softsim load screen in { 000075CF } ) }block
\begin_inset Newline newline
\end_inset

( 00339400 ) D# 1253 shadow{ 
\begin_inset Newline newline
\end_inset

[ d# 1252 load ] ( makes an html listing of ) { cr }
\begin_inset Newline newline
\end_inset

( the softsim application ) }block
\begin_inset Newline newline
\end_inset

( 00339800 ) D# 1254 code{ 
\begin_inset Newline newline
\end_inset

( testbed bootstream ) { br }
\begin_inset Newline newline
\end_inset

[ nns n-nn node d# 0 org ] ( test boot stream ) { cr { 003C07DF } }
\begin_inset Newline newline
\end_inset

[ h# 0000B56B , { 003C07DF } h# 0000B56B , { 0000005F } h# 00015557
\begin_inset Newline newline
\end_inset

, ] { cr { 002407FF } }
\begin_inset Newline newline
\end_inset

[ h# 0000756A , { 002407DF } h# 0000756B , ] ( comma uses pattern )
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00339C00 ) D# 1255 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0033A000 ) D# 1256 code{ 
\begin_inset Newline newline
\end_inset

( spi serial testbed ) { cr }
\begin_inset Newline newline
\end_inset

:# clk 0 :# spbit 1359544320 :# btcnt 33 [ d# 33 btcnt ! ] { cr }
\begin_inset Newline newline
\end_inset

[ nns com ! d# 0 me d# 18 * spbit ! d# 0 clk ! ] { cr }
\begin_inset Newline newline
\end_inset

: ?bit [ btcnt ] @ d# -1 + d# 0 max dup [ btcnt ] ! { indent }
\begin_inset Newline newline
\end_inset

dup and drop if pop drop ; then ;
\begin_inset Newline newline
\end_inset

: bitn ( n-nn ) dup @ swap over d# 1 + swap ! { indent }
\begin_inset Newline newline
\end_inset

d# 18 /mod @n swap ;
\begin_inset Newline newline
\end_inset

: bit17 [ spbit ] bitn for 2* -next
\begin_inset Newline newline
\end_inset

: io! ( n ) 2/ h# 00020000 and ios @n { indent }
\begin_inset Newline newline
\end_inset

h# 0001FFFF and or ios !n ;
\begin_inset Newline newline
\end_inset

: spi [ d# 705 nn-n ] nop [ com ] ! [ clk ] @ ioc @ { indent }
\begin_inset Newline newline
\end_inset

d# 1 and dup [ clk ] ! or drop { indent }
\begin_inset Newline newline
\end_inset

if [ clk ] @ dup and drop if ; then { indent }
\begin_inset Newline newline
\end_inset

?bit bit17 then ; }block
\begin_inset Newline newline
\end_inset

( 0033A400 ) D# 1257 shadow{ 
\begin_inset Newline newline
\end_inset

( spi testbed )
\begin_inset Newline newline
\end_inset

: clk ( state of clock pin last time )
\begin_inset Newline newline
\end_inset

: spbit ( 'bit' address of incoming data ) { cr }
\begin_inset Newline newline
\end_inset

( note stream code is at node { 0000000F } )
\begin_inset Newline newline
\end_inset

: btcnt ( count output bits at beginning )
\begin_inset Newline newline
\end_inset

: ?bit ( count down to zero but no further ) { cr }
\begin_inset Newline newline
\end_inset

( and pop out of calling word until zero reached )
\begin_inset Newline newline
\end_inset

: bitn ( change 'bit' address to word address and bit count ...
 increment
\begin_inset Newline newline
\end_inset

bit address ...
 ) { cr }
\begin_inset Newline newline
\end_inset

( @ from word address leaving bit count on top )
\begin_inset Newline newline
\end_inset

: bit17 ( shift current bit into ) [ almost ] ( bit 17 and )
\begin_inset Newline newline
\end_inset

: io! ( insert bit into ios )
\begin_inset Newline newline
\end_inset

: spi ( execute during each step for spi testbed ) }block
\begin_inset Newline newline
\end_inset

( 0033A800 ) D# 1258 code{ 
\begin_inset Newline newline
\end_inset

( async serial testbed )
\begin_inset Newline newline
\end_inset

: asport [ d# 708 nn-n ] nop [ com ] ! up [ pt ] ! ;
\begin_inset Newline newline
\end_inset

: table pop 2/ 2/ ;
\begin_inset Newline newline
\end_inset

: up708 align table [ d# 0 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 708 nn-n com ! up pt ! pend , ]
\begin_inset Newline newline
\end_inset

: /asynch asport [ up708 ] dest ! ;
\begin_inset Newline newline
\end_inset

: ?wake ios @ 2* h# 00040000 and { indent }
\begin_inset Newline newline
\end_inset

ioc @ d# 7 2*s h# 00040000 and or { indent }
\begin_inset Newline newline
\end_inset

asport dest @ ! ;
\begin_inset Newline newline
\end_inset

: sta h# 00040000 io! ;
\begin_inset Newline newline
\end_inset

: sto d# 0 io! ; { cr }
\begin_inset Newline newline
\end_inset

:# sbit 1360871424 :# ss -1 :# baud 200 { cr }
\begin_inset Newline newline
\end_inset

[ d# 200 baud ! d# -1 ss ! nns com ! d# 0 me d# 18 * sbit ! ]
\begin_inset Newline newline
\end_inset

: timing h# 0002D000 [ ss ] @ d# 30 mod for 2* next io! ; { cr }
\begin_inset Newline newline
\end_inset

: data [ sbit ] bitn d# -18 + - for 2* -next io! ;
\begin_inset Newline newline
\end_inset

: dat [ ss ] @ d# 30 mod d# -7 + drop { indent }
\begin_inset Newline newline
\end_inset

-if timing ; then data ;
\begin_inset Newline newline
\end_inset

: bit17 d# 1 [ ss ] +! [ ss ] @ d# 10 mod jump { indent }
\begin_inset Newline newline
\end_inset

sta dat dat dat dat dat dat dat dat sto
\begin_inset Newline newline
\end_inset

: asynch [ time ] @ [ baud ] @ or drop if ( clear wrq ) { indent }
\begin_inset Newline newline
\end_inset

asport d# 0 dest @ ! ; then { indent }
\begin_inset Newline newline
\end_inset

d# 4000 [ baud ] +! [ d# 708 nn-n ] nop [ com ] ! { indent }
\begin_inset Newline newline
\end_inset

bit17 ?wake ; }block
\begin_inset Newline newline
\end_inset

( 0033AC00 ) D# 1259 shadow{ 
\begin_inset Newline newline
\end_inset

( async serial testbed )
\begin_inset Newline newline
\end_inset

: table ( help to )
\begin_inset Newline newline
\end_inset

: up708 ( create an up port for node { 0000588F } )
\begin_inset Newline newline
\end_inset

: /asynch ( init up dest register for { 0000588F } )
\begin_inset Newline newline
\end_inset

: ?wake ( wake on pin )
\begin_inset Newline newline
\end_inset

: sta ( rt bit )
\begin_inset Newline newline
\end_inset

: sto ( p bit ) { cr }
\begin_inset Newline newline
\end_inset

sbit ( stream pointer node { 0000000F } ) { cr }
\begin_inset Newline newline
\end_inset

ss ( stream counter ) { cr }
\begin_inset Newline newline
\end_inset

baud ( bit timer )
\begin_inset Newline newline
\end_inset

: timing ( six bit preamble )
\begin_inset Newline newline
\end_inset

: data ( lsb first )
\begin_inset Newline newline
\end_inset

: dat ( time for data, not start or stop )
\begin_inset Newline newline
\end_inset

: bit17 ( insert next bit into io register )
\begin_inset Newline newline
\end_inset

: asynch ( execute during each step for testbed ) }block
\begin_inset Newline newline
\end_inset

( 0033B000 ) D# 1260 code{ 
\begin_inset Newline newline
\end_inset

( softsim memory access )
\begin_inset Newline newline
\end_inset

: rwb ( nai-n ) mem @ [ rrq wrq or ] and swap / or ;
\begin_inset Newline newline
\end_inset

: mkios ios @ h# 000201FF and h# 00000008 right rwb { indent }
\begin_inset Newline newline
\end_inset

h# 00000020 down rwb h# 00000080 left rwb h# 00000200 up rwb
\begin_inset Newline newline
\end_inset

{ indent }
\begin_inset Newline newline
\end_inset

ios ! ;
\begin_inset Newline newline
\end_inset

: /ios ios @ h# 0001FE00 and ioc @ { indent }
\begin_inset Newline newline
\end_inset

dup 2* and h# 0002002A and or ios ! ;
\begin_inset Newline newline
\end_inset

: ?ios dup h# 0000015D or drop if ; then { indent }
\begin_inset Newline newline
\end_inset

drop ios @ +t set pop drop ;
\begin_inset Newline newline
\end_inset

: ?ioc dup h# 0000015D or drop if ; then { indent }
\begin_inset Newline newline
\end_inset

drop -t ioc ! set /ios pop drop ; }block
\begin_inset Newline newline
\end_inset

( 0033B400 ) D# 1261 shadow{ 
\begin_inset Newline newline
\end_inset

( softsim memory access )
\begin_inset Newline newline
\end_inset

: rwb ( read write bits shifted from port to ios )
\begin_inset Newline newline
\end_inset

: mkios ( make ios using rwb )
\begin_inset Newline newline
\end_inset

: /ios ( set pins in ios to low unless ioc says ) { cr }
\begin_inset Newline newline
\end_inset

( output high.
 testbed can override this.
 )
\begin_inset Newline newline
\end_inset

: ?ios ( reads ios register as a special case, ) { cr }
\begin_inset Newline newline
\end_inset

( testbed should put appropriate pin data ) { cr }
\begin_inset Newline newline
\end_inset

( into ios.
 )
\begin_inset Newline newline
\end_inset

: ?ioc ( reads ioc then initializes ios with ) { cr }
\begin_inset Newline newline
\end_inset

( reasonable default values.
 testbed can plug ) { cr }
\begin_inset Newline newline
\end_inset

( in more appropriate values.
 ) }block
\begin_inset Newline newline
\end_inset

( 0033B800 ) D# 1262 code{ 
\begin_inset Newline newline
\end_inset

( softsim ports )
\begin_inset Newline newline
\end_inset

: rpt ( -m ) right [ pt ] ! h# 00000080 ;
\begin_inset Newline newline
\end_inset

: dpt ( -m ) down [ pt ] ! h# 00000040 ;
\begin_inset Newline newline
\end_inset

: lpt ( -m ) left [ pt ] ! h# 00000020 ;
\begin_inset Newline newline
\end_inset

: upt ( -m ) up [ pt ] ! h# 00000010 ;
\begin_inset Newline newline
\end_inset

: active ( m ) [ ad ] @ h# 00000050 or and drop ;
\begin_inset Newline newline
\end_inset

: @part ( pm-p ) active if port @ +or then ;
\begin_inset Newline newline
\end_inset

: get ( -p ) h# 00000000 rpt @part dpt @part lpt @part { indent }
\begin_inset Newline newline
\end_inset

upt @part h# 00000003 slp ! ;
\begin_inset Newline newline
\end_inset

: !part ( pm-p ) active if dup pend ! then ;
\begin_inset Newline newline
\end_inset

: put ( p ) rpt !part dpt !part lpt !part upt !part { indent }
\begin_inset Newline newline
\end_inset

drop ;
\begin_inset Newline newline
\end_inset

: -both ( p-p ) dup es ! [ ad ] @ clu ! { indent }
\begin_inset Newline newline
\end_inset

[ rrq wrq or ] over over and or drop ;
\begin_inset Newline newline
\end_inset

: -slot d# -1 slot +! d# 0 slp ! ; { br }
\begin_inset Newline newline
\end_inset

: @comm get -both if drop -slot [ rrq ] put ; then { indent }
\begin_inset Newline newline
\end_inset

h# 0003FFFF and +t h# 00000000 put ;
\begin_inset Newline newline
\end_inset

: !comm get -both if drop -slot t @ [ wrq ] or put { indent }
\begin_inset Newline newline
\end_inset

; then drop -t drop h# 00000000 put ;
\begin_inset Newline newline
\end_inset

: @inst get -both if drop h# 00000000 slp ! [ rrq ] put ; { indent }
\begin_inset Newline newline
\end_inset

then h# 0003FFFF and ir ! h# 00000000 slot ! h# 00000000 put
\begin_inset Newline newline
\end_inset

; }block
\begin_inset Newline newline
\end_inset

( 0033BC00 ) D# 1263 shadow{ 
\begin_inset Newline newline
\end_inset

( softsim ports )
\begin_inset Newline newline
\end_inset

: rpt { -cr } : dpt { -cr } : lpt { -cr } : upt { cr }
\begin_inset Newline newline
\end_inset

( set ) [ pt ] ( and leave mask )
\begin_inset Newline newline
\end_inset

: active ( mask off ) [ ad ] ( to see if port is active )
\begin_inset Newline newline
\end_inset

: @part
\begin_inset Newline newline
\end_inset

: get ( accumulate values of active ports )
\begin_inset Newline newline
\end_inset

: !part
\begin_inset Newline newline
\end_inset

: put ( store accumulated value into pend ) { cr }
\begin_inset Newline newline
\end_inset

( for each active port )
\begin_inset Newline newline
\end_inset

: -both ( save ) [ pt ] ( and ) [ ad ] ( for later display and ) { cr }
\begin_inset Newline newline
\end_inset

( set flag if not both read and write requested )
\begin_inset Newline newline
\end_inset

: -slot ( node is sleeping so arrange for ) { cr }
\begin_inset Newline newline
\end_inset

( instruction to be executed again next time ) { br }
\begin_inset Newline newline
\end_inset

: @comm ( multiport fetch )
\begin_inset Newline newline
\end_inset

: !comm ( multiport store )
\begin_inset Newline newline
\end_inset

: @inst ( multiport instruction fetch ) { cr }
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0033C000 ) D# 1264 code{ 
\begin_inset Newline newline
\end_inset

( softsim memory )
\begin_inset Newline newline
\end_inset

: bus? ( a ) dup [ ad ] ! h# 00000100 and drop { indent }
\begin_inset Newline newline
\end_inset

if [ ad ] @ h# 000000F0 and h# 00000050 or drop then ;
\begin_inset Newline newline
\end_inset

: !p pc @3 bus? if !comm ; then { indent }
\begin_inset Newline newline
\end_inset

d# 2 cnt [ ad ] @ p+
\begin_inset Newline newline
\end_inset

: !x ( a ) -t swap mem ! set ;
\begin_inset Newline newline
\end_inset

: @a ar @n ?ios
\begin_inset Newline newline
\end_inset

: @ab bus? if @comm ; then d# 2 cnt [ ad ] @
\begin_inset Newline newline
\end_inset

: @x ( a ) mem @ +t set ;
\begin_inset Newline newline
\end_inset

: @b b @3 ?ios @ab ;
\begin_inset Newline newline
\end_inset

: @+ ar @n ?ios bus? if @comm ; { indent }
\begin_inset Newline newline
\end_inset

then d# 2 cnt [ ad ] @ a+ @x ;
\begin_inset Newline newline
\end_inset

: !a ar @n ?ioc
\begin_inset Newline newline
\end_inset

: !ab bus? if !comm ; then d# 2 cnt [ ad ] @ !x ;
\begin_inset Newline newline
\end_inset

: !b b @3 ?ioc !ab ;
\begin_inset Newline newline
\end_inset

: !+ ar @n ?ioc bus? if !comm ; { indent }
\begin_inset Newline newline
\end_inset

then d# 2 cnt [ ad ] @ a+ !x ;
\begin_inset Newline newline
\end_inset

: @p pc @3 bus? if @comm ; then { indent }
\begin_inset Newline newline
\end_inset

d# 2 cnt [ ad ] @ p+ @x ; { br }
\begin_inset Newline newline
\end_inset

: +pc pc @3 bus? if @inst ; then { indent }
\begin_inset Newline newline
\end_inset

[ ad ] @ p+ mem @ ir ! d# 0 slot ! set ; { cr }
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0033C400 ) D# 1265 shadow{ 
\begin_inset Newline newline
\end_inset

( softsim memory )
\begin_inset Newline newline
\end_inset

: bus? ( is address a bus register ? )
\begin_inset Newline newline
\end_inset

: @x/!x a ( common to fetch/store ) { cr }
\begin_inset Newline newline
\end_inset

?ios ( in the fetches reads the ios register ) { cr }
\begin_inset Newline newline
\end_inset

( as a special case when appropriate ) { cr }
\begin_inset Newline newline
\end_inset

?ioc ( in the stores writes the ioc register ) { cr }
\begin_inset Newline newline
\end_inset

( as a special case when appropriate ) { br }
\begin_inset Newline newline
\end_inset

: @p ( fetching or storing memory or ports )
\begin_inset Newline newline
\end_inset

: @a
\begin_inset Newline newline
\end_inset

: @+
\begin_inset Newline newline
\end_inset

: !a
\begin_inset Newline newline
\end_inset

: !b
\begin_inset Newline newline
\end_inset

: !+
\begin_inset Newline newline
\end_inset

: @p { br }
\begin_inset Newline newline
\end_inset

: +pc ( fetch the next instruction word from ) { cr }
\begin_inset Newline newline
\end_inset

( memory or a port ) }block
\begin_inset Newline newline
\end_inset

( 0033C800 ) D# 1266 code{ 
\begin_inset Newline newline
\end_inset

( softsim execute ) :# fast 1000 :# gap 1000 [ d# 1 gap ! ] { cr }
\begin_inset Newline newline
\end_inset

( instruction jump table )
\begin_inset Newline newline
\end_inset

: inst ( n ) d# 1 slot +! h# 0000001F and jump ret ex jmp call ur+
\begin_inset Newline newline
\end_inset

jr+ jz jns @p @+ @b @a !p !+ !b !a +* 2*x 2/x -x +x andx orx t! t@
\begin_inset Newline newline
\end_inset

r@ s@ a@ nul r! b! a!x
\begin_inset Newline newline
\end_inset

: s0 ir @ d# 13 2/s inst ;
\begin_inset Newline newline
\end_inset

: s1 ir @ d# 8 2/s inst ;
\begin_inset Newline newline
\end_inset

: s2 ir @ d# 3 2/s inst ;
\begin_inset Newline newline
\end_inset

: s3 ir @ 2* 2* inst ;
\begin_inset Newline newline
\end_inset

: s4 cl @ dup and drop -if +pc ; then ;
\begin_inset Newline newline
\end_inset

: tick [ com ] ! d# -1 cl +! slot @ jump s0 s1 s2 s3 s4
\begin_inset Newline newline
\end_inset

: bus mem dup d# 1 or @ over h# 0000000F or @ @ +or swap ! ;
\begin_inset Newline newline
\end_inset

: buses right bus down bus left bus up bus ; { br }
\begin_inset Newline newline
\end_inset

: step d# 1 [ time ] +! [ nns d# -1 + ] for i tick -next { indent }
\begin_inset Newline newline
\end_inset

[ nns d# -1 + ] for i [ com ] ! buses mkios -next { indent }
\begin_inset Newline newline
\end_inset

( spi asynch ) ;
\begin_inset Newline newline
\end_inset

: quick [ gap ] @ for step next ;
\begin_inset Newline newline
\end_inset

: go quick pause key? go ;
\begin_inset Newline newline
\end_inset

: faster [ fast ] @ [ gap ] @ d# 1 or drop if { indent }
\begin_inset Newline newline
\end_inset

drop d# 1 then [ gap ] ! ; }block
\begin_inset Newline newline
\end_inset

( 0033CC00 ) D# 1267 shadow{ 
\begin_inset Newline newline
\end_inset

: fast ( number of quick steps in fast mode )
\begin_inset Newline newline
\end_inset

: gap ( number of steps in current mode )
\begin_inset Newline newline
\end_inset

: inst ( increment slot jump to 1 of ) { cr { 0000040F } }
\begin_inset Newline newline
\end_inset

( instructions )
\begin_inset Newline newline
\end_inset

: s0-s3 ( execute instruction from slot 0-3 )
\begin_inset Newline newline
\end_inset

: s4 ( fetch next instruction word )
\begin_inset Newline newline
\end_inset

: tick ( execute 1 clock cycle )
\begin_inset Newline newline
\end_inset

: bus ( merge pending and dest to bus register )
\begin_inset Newline newline
\end_inset

: buses ( bus on each of four ports )
\begin_inset Newline newline
\end_inset

: step tick ( for each computer )
\begin_inset Newline newline
\end_inset

: quick gap ( steps before stopping to display )
\begin_inset Newline newline
\end_inset

: go ( quick display until keypress )
\begin_inset Newline newline
\end_inset

: faster ( toggle fast and slow modes for go ) }block
\begin_inset Newline newline
\end_inset

( 0033D000 ) D# 1268 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0033D400 ) D# 1269 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0033D800 ) D# 1270 code{ 
\begin_inset Newline newline
\end_inset

( softsim pins )
\begin_inset Newline newline
\end_inset

: out silver ioc
\begin_inset Newline newline
\end_inset

: pn.
 @n swap / h# 00000001 and digit ;
\begin_inset Newline newline
\end_inset

: in blue ios pn.
 ;
\begin_inset Newline newline
\end_inset

: p17.
 ( n ) [ com ] ! d# -14 [ xy ] +! h# 00020000
\begin_inset Newline newline
\end_inset

: pin.
 ioc @ over and drop if 2/ out ; then in ;
\begin_inset Newline newline
\end_inset

: p5.
 h# 00000020 pin.
 ;
\begin_inset Newline newline
\end_inset

: p3.
 h# 00000008 pin.
 ;
\begin_inset Newline newline
\end_inset

: p1.
 h# 00000002 pin.
 ; { br }
\begin_inset Newline newline
\end_inset

: 1pin ( n ) nn-n loc p17.
 ;
\begin_inset Newline newline
\end_inset

: 2pins ( n ) nn-n loc p17.
 p1.
 ;
\begin_inset Newline newline
\end_inset

: 4pins ( n ) nn-n loc p17.
 p5.
 p3.
 p1.
 ;
\begin_inset Newline newline
\end_inset

: pins.
 [ d# 1 ] 2pins [ d# 701 ] 2pins [ d# 705 ] 4pins { indent }
\begin_inset Newline newline
\end_inset

[ d# 708 ] 2pins [ d# 715 ] 1pin [ d# 517 ] 1pin { indent }
\begin_inset Newline newline
\end_inset

[ d# 417 ] 1pin [ d# 317 ] 1pin [ d# 217 ] 1pin { indent }
\begin_inset Newline newline
\end_inset

[ d# 8 ] 4pins [ d# 100 ] 1pin [ d# 200 ] 1pin { indent }
\begin_inset Newline newline
\end_inset

[ d# 300 ] 2pins [ d# 500 ] 1pin [ d# 600 ] 1pin ; }block
\begin_inset Newline newline
\end_inset

( 0033DC00 ) D# 1271 shadow{ 
\begin_inset Newline newline
\end_inset

( softsim pins )
\begin_inset Newline newline
\end_inset

: out ( outputs are silver )
\begin_inset Newline newline
\end_inset

: pn.
 ( factored behavior )
\begin_inset Newline newline
\end_inset

: in ( inputs are blue )
\begin_inset Newline newline
\end_inset

: p17.
 ( sets com, moves cursor, always first )
\begin_inset Newline newline
\end_inset

: pin.
 ( factored behavior of each pin )
\begin_inset Newline newline
\end_inset

: p5.
 ( p17.
 has already set com )
\begin_inset Newline newline
\end_inset

: p3.
\begin_inset Newline newline
\end_inset

: p1.
 { br }
\begin_inset Newline newline
\end_inset

: 1pin ( some nodes have one pin )
\begin_inset Newline newline
\end_inset

: 2pins ( some have two )
\begin_inset Newline newline
\end_inset

: 4pins ( spi at least has four )
\begin_inset Newline newline
\end_inset

: pins.
 ( display io pins on all nodes ) { cr }
\begin_inset Newline newline
\end_inset

( used in ok ) { br }
\begin_inset Newline newline
\end_inset

( testbed must set ios ) }block
\begin_inset Newline newline
\end_inset

( 0033E000 ) D# 1272 code{ 
\begin_inset Newline newline
\end_inset

( softsim registers and memory ) { cr }
\begin_inset Newline newline
\end_inset

:# ad 405 :# com 54 :# pt 325 :# time 87000 [ d# 0 time ! macro ]
\begin_inset Newline newline
\end_inset

: 2/s ?lit h# 0000F8C1 2, 1, ;
\begin_inset Newline newline
\end_inset

: 2*s ?lit h# 0000E0C1 2, 1, ; [ forth ]
\begin_inset Newline newline
\end_inset

: +or ( nn ) over - and or ;
\begin_inset Newline newline
\end_inset

: me [ com ] @ 2* h# 00008000 + block + ;
\begin_inset Newline newline
\end_inset

: mem h# 000001FF and h# 00000100 ? if dup h# 0000015D or drop { indent
 }
\begin_inset Newline newline
\end_inset

if h# 00000155 or h# 00000010 / ( 8,4,2,1 ) h# 00000120 or { indent }
\begin_inset Newline newline
\end_inset

then then h# 000001BF and me ; ( 120-12e used )
\begin_inset Newline newline
\end_inset

: port [ pt ] @ mem ;
\begin_inset Newline newline
\end_inset

: pend port d# 1 or ;
\begin_inset Newline newline
\end_inset

: dest port h# 0000000F or ; { br }
\begin_inset Newline newline
\end_inset

: right h# 000001D5 ;
\begin_inset Newline newline
\end_inset

: down h# 00000115 ;
\begin_inset Newline newline
\end_inset

: left h# 00000175 ;
\begin_inset Newline newline
\end_inset

: up h# 00000145 ;
\begin_inset Newline newline
\end_inset

: rrq h# 00080000 ;
\begin_inset Newline newline
\end_inset

: wrq h# 00040000 ; }block
\begin_inset Newline newline
\end_inset

( 0033E400 ) D# 1273 shadow{ 
\begin_inset Newline newline
\end_inset

ad ( dress ) com ( puter ) pt ( port ) time
\begin_inset Newline newline
\end_inset

: 2/s n ( shift right n bits )
\begin_inset Newline newline
\end_inset

: 2*s n ( shift left n bits )
\begin_inset Newline newline
\end_inset

: +or ( inclusive or )
\begin_inset Newline newline
\end_inset

: me ( convert memory offset to pentium address )
\begin_inset Newline newline
\end_inset

: mem ( convert register address ) { br }
\begin_inset Newline newline
\end_inset

: port ( return port address for current ) [ pt ]
\begin_inset Newline newline
\end_inset

: pend ( convert port to 'pending' address )
\begin_inset Newline newline
\end_inset

: dest ( convert port to 'destination' which ) { cr }
\begin_inset Newline newline
\end_inset

( points to neighbor with shared port ) { br }
\begin_inset Newline newline
\end_inset

: right ( unconverted port addresses )
\begin_inset Newline newline
\end_inset

: down
\begin_inset Newline newline
\end_inset

: left
\begin_inset Newline newline
\end_inset

: up { br }
\begin_inset Newline newline
\end_inset

: rrq ( read request bit )
\begin_inset Newline newline
\end_inset

: wrq ( write request bit ) }block
\begin_inset Newline newline
\end_inset

( 0033E800 ) D# 1274 code{ 
\begin_inset Newline newline
\end_inset

( softsim registers and memory )
\begin_inset Newline newline
\end_inset

: r h# 00000100 me ;
\begin_inset Newline newline
\end_inset

: ar h# 00000101 me ; ( a register )
\begin_inset Newline newline
\end_inset

: b h# 00000102 me ;
\begin_inset Newline newline
\end_inset

: pc h# 00000103 me ;
\begin_inset Newline newline
\end_inset

: ir h# 00000104 me ;
\begin_inset Newline newline
\end_inset

: t h# 00000105 me ;
\begin_inset Newline newline
\end_inset

: s h# 00000106 me ;
\begin_inset Newline newline
\end_inset

: ss d# 7 and h# 00000107 me + ;
\begin_inset Newline newline
\end_inset

: rs d# 7 and h# 0000010F me + ;
\begin_inset Newline newline
\end_inset

: slot h# 00000117 me ;
\begin_inset Newline newline
\end_inset

: rp h# 00000118 me ;
\begin_inset Newline newline
\end_inset

: sp h# 00000119 me ;
\begin_inset Newline newline
\end_inset

: cl h# 0000011A me ;
\begin_inset Newline newline
\end_inset

: ph h# 0000011B me ;
\begin_inset Newline newline
\end_inset

: es h# 0000011C me ;
\begin_inset Newline newline
\end_inset

: clu h# 0000011D me ;
\begin_inset Newline newline
\end_inset

: slp h# 0000011E me ;
\begin_inset Newline newline
\end_inset

: ioc h# 00000130 me ; ( write only )
\begin_inset Newline newline
\end_inset

: ios h# 00000131 me ; ( read only ) }block
\begin_inset Newline newline
\end_inset

( 0033EC00 ) D# 1275 shadow{ 
\begin_inset Newline newline
\end_inset

( registers and 'node variables' )
\begin_inset Newline newline
\end_inset

: ar ( a register.
 cannot be named a because ) { cr }
\begin_inset Newline newline
\end_inset

( pentium macro takes precedence )
\begin_inset Newline newline
\end_inset

: slot ( current instruction slot 0-4 )
\begin_inset Newline newline
\end_inset

: rp,sp ( stack pointers )
\begin_inset Newline newline
\end_inset

: ss ( 8 stack registers )
\begin_inset Newline newline
\end_inset

: rs ( 8 stack registers )
\begin_inset Newline newline
\end_inset

: cl ( clock counted down to time memory access )
\begin_inset Newline newline
\end_inset

: ph ( clock counted up to time instruction )
\begin_inset Newline newline
\end_inset

: es ( used in debugging )
\begin_inset Newline newline
\end_inset

: clu ( used in debugging )
\begin_inset Newline newline
\end_inset

: slp ( mark a node as asleep )
\begin_inset Newline newline
\end_inset

: ioc ( write only, use with testbed )
\begin_inset Newline newline
\end_inset

: ios ( read only, also used with testbed ) }block
\begin_inset Newline newline
\end_inset

( 0033F000 ) D# 1276 code{ 
\begin_inset Newline newline
\end_inset

( softsim display ) :# 'e/2 270075789
\begin_inset Newline newline
\end_inset

: cr/2 cr d# -14 [ xy ] +! ;
\begin_inset Newline newline
\end_inset

: emit/2 ( c ) [ 'e/2 ] xqt ;
\begin_inset Newline newline
\end_inset

: +e/2 [ 'e/2 ] assign [ d# 48 ] + [ xy ] @ swap emit { indent }
\begin_inset Newline newline
\end_inset

h# 000B0000 + [ xy ] ! ; [ +e/2 ]
\begin_inset Newline newline
\end_inset

: -e/2 [ 'e/2 ] assign drop ;
\begin_inset Newline newline
\end_inset

: ?adr ( a ) [ d# -8 ] + -if -e/2 then { indent }
\begin_inset Newline newline
\end_inset

[ d# 4 ] + drop if ; then +e/2 ;
\begin_inset Newline newline
\end_inset

: 'ops align strings ( ; ex jmp cal unx nxt if -if @p @+ @b @ !p !+
\begin_inset Newline newline
\end_inset

!b ! +* 2* 2/ - + and or drp dup pop ovr a .
 psh b! a! fet )
\begin_inset Newline newline
\end_inset

: op@ ( i ) 'ops @ [ d# -16 ] and { indent }
\begin_inset Newline newline
\end_inset

begin dup and while unpack emit/2 { indent }
\begin_inset Newline newline
\end_inset

end then drop sp/2 ;
\begin_inset Newline newline
\end_inset

: opc.
 ( i ) slot @ [ d# 4 ] and drop if drop d# 32 then op@ ;
\begin_inset Newline newline
\end_inset

: ops.
 ( n ) [ d# 4 ] * [ d# 3 ] for [ d# 32 ] /mod next { indent }
\begin_inset Newline newline
\end_inset

[ d# 4 ] for dup op@ ?adr next +e/2 ; }block
\begin_inset Newline newline
\end_inset

( 0033F400 ) D# 1277 shadow{ 
\begin_inset Newline newline
\end_inset

( softsim display )
\begin_inset Newline newline
\end_inset

: cr/2 ( half carriage return )
\begin_inset Newline newline
\end_inset

: emit/2 ( half space emit )
\begin_inset Newline newline
\end_inset

: +e/2 ( set emit/2 to perform half emit )
\begin_inset Newline newline
\end_inset

: -e/2 ( set emit/2 to drop the character )
\begin_inset Newline newline
\end_inset

: ?adr ( used to avoid displaying an address ) { cr }
\begin_inset Newline newline
\end_inset

( field as random opcodes )
\begin_inset Newline newline
\end_inset

: 'ops ( a string of opcode names for decompiler )
\begin_inset Newline newline
\end_inset

: op@ ( lookup and type an opcode string )
\begin_inset Newline newline
\end_inset

: opc.
 ( when slot is 4 display 'fet' )
\begin_inset Newline newline
\end_inset

: ops.
 ( given an instruction word, display the ) { cr }
\begin_inset Newline newline
\end_inset

( opcodes ) }block
\begin_inset Newline newline
\end_inset

( 0033F800 ) D# 1278 code{ 
\begin_inset Newline newline
\end_inset

( softsim display ) :# base 16
\begin_inset Newline newline
\end_inset

: digits ( i-n ) align tbl [ d# 24 , d# 25 , d# 26 , d# 27 , d# 28
\begin_inset Newline newline
\end_inset

, d# 29 , d# 30 , d# 31 , d# 32 , d# 33 , ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 5 , d# 19 , d# 10 , d# 16 , d# 4 , d# 14 , ]
\begin_inset Newline newline
\end_inset

: digit ( i ) digits emit/2 ;
\begin_inset Newline newline
\end_inset

: .n ( nc ) dup push d# -1 + { indent }
\begin_inset Newline newline
\end_inset

for [ base ] @ /mod next pop for digit next ;
\begin_inset Newline newline
\end_inset

: hex d# 16 [ base ] ! ;
\begin_inset Newline newline
\end_inset

: dec d# 10 [ base ] ! ; { br }
\begin_inset Newline newline
\end_inset

:# nod 56 :# nod2 57
\begin_inset Newline newline
\end_inset

: switch [ nod ] @ [ nod2 ] @ [ nod ] ! [ nod2 ] ! ;
\begin_inset Newline newline
\end_inset

: wake? silver slp @ d# 3 and drop ;
\begin_inset Newline newline
\end_inset

: blue h# 004040FF color ;
\begin_inset Newline newline
\end_inset

: ?white wake? if white then ;
\begin_inset Newline newline
\end_inset

: ?green wake? if green then ;
\begin_inset Newline newline
\end_inset

: ?blue wake? if blue then ;
\begin_inset Newline newline
\end_inset

: ?red wake? if red then ;
\begin_inset Newline newline
\end_inset

: me? [ com ] @ [ nod ] @ or drop { indent }
\begin_inset Newline newline
\end_inset

if [ h# 00808080 ] color ; then ?red ; }block
\begin_inset Newline newline
\end_inset

( 0033FC00 ) D# 1279 shadow{ 
\begin_inset Newline newline
\end_inset

( softsim display )
\begin_inset Newline newline
\end_inset

: base ( radix for small character number display )
\begin_inset Newline newline
\end_inset

: digits ( table of character values )
\begin_inset Newline newline
\end_inset

: digit ( display digit as small character )
\begin_inset Newline newline
\end_inset

: .n ( display ) c ( digits of ) n ( in the current ) [ base ]
\begin_inset Newline newline
\end_inset

: hex ( change ) [ base ] ( to hex )
\begin_inset Newline newline
\end_inset

: dec ( change ) [ base ] ( to decimal )
\begin_inset Newline newline
\end_inset

: nod nod2 ( focus on two nodes )
\begin_inset Newline newline
\end_inset

: switch ( swap focus nodes )
\begin_inset Newline newline
\end_inset

: wake? ( a node is awake if ) slp ( is { 0000006F } )
\begin_inset Newline newline
\end_inset

: ?white
\begin_inset Newline newline
\end_inset

: ?green
\begin_inset Newline newline
\end_inset

: ?blue
\begin_inset Newline newline
\end_inset

: ?red ( change to named color if awake )
\begin_inset Newline newline
\end_inset

: me? ( red if this node number has focus ) }block
\begin_inset Newline newline
\end_inset

( 00340000 ) D# 1280 code{ 
\begin_inset Newline newline
\end_inset

( softsim display ) :# xorg 3 :# yorg 4 { cr }
\begin_inset Newline newline
\end_inset

: out? ( xy ) over over +or push over d# -8 + { indent }
\begin_inset Newline newline
\end_inset

over d# -4 + and - pop +or drop ;
\begin_inset Newline newline
\end_inset

: loc ( n-n ) dup [ nnx ] /mod [ xorg ] @ negate { indent }
\begin_inset Newline newline
\end_inset

[ yorg ] @ negate v+ out? { indent }
\begin_inset Newline newline
\end_inset

-if drop drop drop pop drop ; then { indent }
\begin_inset Newline newline
\end_inset

- d# 4 + d# 176 * swap d# 72 * swap { indent }
\begin_inset Newline newline
\end_inset

d# 22 dup v+ over lm at ;
\begin_inset Newline newline
\end_inset

: tab ( xy ) over lm at ; { br }
\begin_inset Newline newline
\end_inset

: @n @ h# 00015555 or ;
\begin_inset Newline newline
\end_inset

: !n swap h# 00015555 or swap ! ;
\begin_inset Newline newline
\end_inset

: @3 @ h# 000003FF and h# 00000155 or ;
\begin_inset Newline newline
\end_inset

: !3 swap h# 00000155 or swap ! ;
\begin_inset Newline newline
\end_inset

: 10bit [ h# 000003FF ] and ;
\begin_inset Newline newline
\end_inset

: 8bit [ h# 000000FF ] and ;
\begin_inset Newline newline
\end_inset

: 3bit [ d# 7 ] and pc ( @ ) @3 [ d# 7 - ] and or ;
\begin_inset Newline newline
\end_inset

: adr slot @ jump 10bit 10bit 8bit 3bit nul }block
\begin_inset Newline newline
\end_inset

( 00340400 ) D# 1281 shadow{ 
\begin_inset Newline newline
\end_inset

( softsim display )
\begin_inset Newline newline
\end_inset

: xorg { -cr } : yorg ( upper left corner of display ) { br }
\begin_inset Newline newline
\end_inset

: out? ( decide whether node is off screen )
\begin_inset Newline newline
\end_inset

: loc [ n ] ( calculate screen position of node )
\begin_inset Newline newline
\end_inset

: tab [ xy ] ( move cursor and set left margin ) { br }
\begin_inset Newline newline
\end_inset

: @n { -cr } : !n { -cr } : @3 { -cr } : !3 { cr }
\begin_inset Newline newline
\end_inset

( fetch and store from memory, changing ) { cr }
\begin_inset Newline newline
\end_inset

( from pattern to number ) { br }
\begin_inset Newline newline
\end_inset

: 10bit { -cr } : 8bit { -cr } : 3bit
\begin_inset Newline newline
\end_inset

: adr ( isolate the address field in an inst ) }block
\begin_inset Newline newline
\end_inset

( 00340800 ) D# 1282 code{ 
\begin_inset Newline newline
\end_inset

( softsim display ) :# off 64
\begin_inset Newline newline
\end_inset

: u d# 16
\begin_inset Newline newline
\end_inset

: ud [ off ] @ + h# 000000FF and [ off ] ! ;
\begin_inset Newline newline
\end_inset

: d d# -16 ud ;
\begin_inset Newline newline
\end_inset

: the [ nod ] @ [ com ] ! ; { br }
\begin_inset Newline newline
\end_inset

: array pop 2/ 2/ + @ ;
\begin_inset Newline newline
\end_inset

: div align array [ h# 00100000 , h# 00008000 , h# 00000400 , h# 00000020
\begin_inset Newline newline
\end_inset

, d# 1 , ]
\begin_inset Newline newline
\end_inset

: cin ir @ h# 00000080 * d# 1 + slot @ div / h# 0000001F and ; { br }
\begin_inset Newline newline
\end_inset

: ar.
 ar @n d# 5 .n cr/2 ;
\begin_inset Newline newline
\end_inset

: br.
 b @3 d# 3 .n ;
\begin_inset Newline newline
\end_inset

: rqs.
 ios @ d# 9 2/s h# 000000FF and h# 00000002 .n ;
\begin_inset Newline newline
\end_inset

: ioc.
 ioc @n d# 5 .n cr/2 ;
\begin_inset Newline newline
\end_inset

: ios.
 ios @n d# 5 .n cr/2 ;
\begin_inset Newline newline
\end_inset

: ir.
 ir @n d# 5 .n cr/2 ;
\begin_inset Newline newline
\end_inset

: tr.
 t @n d# 5 .n cr/2 ;
\begin_inset Newline newline
\end_inset

: sr.
 s @n d# 5 .n cr/2 ;
\begin_inset Newline newline
\end_inset

: rr.
 r @n d# 5 .n cr/2 ;
\begin_inset Newline newline
\end_inset

: pc.
 pc @3 hex d# 3 .n cr/2 ;
\begin_inset Newline newline
\end_inset

: sl.
 slot @ digit ;
\begin_inset Newline newline
\end_inset

: op.
 cin opc.
 cr/2 ;
\begin_inset Newline newline
\end_inset

: cl.
 cl @ d# 0 max d# 3 min digit ; }block
\begin_inset Newline newline
\end_inset

( 00340C00 ) D# 1283 shadow{ 
\begin_inset Newline newline
\end_inset

( softsim display )
\begin_inset Newline newline
\end_inset

: u
\begin_inset Newline newline
\end_inset

: ud
\begin_inset Newline newline
\end_inset

: d ( manipulate the memory dump offset )
\begin_inset Newline newline
\end_inset

: the ( make focus node the current node ) { br }
\begin_inset Newline newline
\end_inset

: array { -cr } : div { -cr } : cin { cr }
\begin_inset Newline newline
\end_inset

( isolate current opcode from inst word ) { br }
\begin_inset Newline newline
\end_inset

: ar.
 { -cr } : br.
 { -cr } : ioc.
 { -cr } : ios.
\begin_inset Newline newline
\end_inset

: ir.
 { -cr } : tr.
 { -cr } : sr.
 { -cr } : rr.
\begin_inset Newline newline
\end_inset

: pc.
 { -cr } : sl.
 { -cr } : op.
 { -cr } : cl.
 { cr }
\begin_inset Newline newline
\end_inset

( building blocks for the 2d display, com.
 ) }block
\begin_inset Newline newline
\end_inset

( 00341000 ) D# 1284 code{ 
\begin_inset Newline newline
\end_inset

( softsim display )
\begin_inset Newline newline
\end_inset

: -sp/2 [ h# 000B0000 negate ] nop [ xy ] +! ;
\begin_inset Newline newline
\end_inset

: place dup [ com ] ! n-nn me? dec -sp/2 d# 3 .n ; { br }
\begin_inset Newline newline
\end_inset

: com.
 ( n ) loc place ?white pc.
 ?blue cl.
 { indent }
\begin_inset Newline newline
\end_inset

?white sl.
 ?green op.
 ?white ir.
 { indent }
\begin_inset Newline newline
\end_inset

?blue ioc.
 ios.
 ?red rr.
 ?green { indent }
\begin_inset Newline newline
\end_inset

tr.
 sr.
 ?white ar.
 blue rqs.
 ?white br.
 ; { br }
\begin_inset Newline newline
\end_inset

: mem.
 ( xy ) tab hex d# 15 for i [ off ] @ h# 000000BF and + { indent }
\begin_inset Newline newline
\end_inset

dup white d# 2 .n sp/2 mem @ dup { indent }
\begin_inset Newline newline
\end_inset

h# 00015555 or green d# 5 .n sp/2 { indent }
\begin_inset Newline newline
\end_inset

white ops.
 cr/2 -next ; { br }
\begin_inset Newline newline
\end_inset

: stack sp @ d# 8 for dup ss @n d# 5 .n cr/2 { indent }
\begin_inset Newline newline
\end_inset

d# -1 + next drop ;
\begin_inset Newline newline
\end_inset

: return rp @ d# 8 for d# 1 + dup rs @n d# 5 .n { indent }
\begin_inset Newline newline
\end_inset

cr/2 next drop ;
\begin_inset Newline newline
\end_inset

: stacks ( xy ) tab hex white return { indent }
\begin_inset Newline newline
\end_inset

red rr.
 green tr.
 sr.
 white stack ; }block
\begin_inset Newline newline
\end_inset

( 00341400 ) D# 1285 shadow{ 
\begin_inset Newline newline
\end_inset

( softsim display )
\begin_inset Newline newline
\end_inset

: -sp/2 ( half backspace )
\begin_inset Newline newline
\end_inset

: place ( identify current computer on 2d display )
\begin_inset Newline newline
\end_inset

: com.
 [ n ] ( display computer n )
\begin_inset Newline newline
\end_inset

: mem.
 [ xy ] ( memory dump of focus ) [ nod ] ( at xy )
\begin_inset Newline newline
\end_inset

: stack
\begin_inset Newline newline
\end_inset

: return
\begin_inset Newline newline
\end_inset

: stacks ( full stack dump of focus ) [ nod ] ( at xy ) }block
\begin_inset Newline newline
\end_inset

( 00341800 ) D# 1286 code{ 
\begin_inset Newline newline
\end_inset

( softsim execute ) { cr }
\begin_inset Newline newline
\end_inset

: cnt ( n ) ph @ or drop if d# 1 ph +! { indent }
\begin_inset Newline newline
\end_inset

d# -1 slot +! pop drop ; then d# 0 ph ! ;
\begin_inset Newline newline
\end_inset

: set4 h# 00000004 slot !
\begin_inset Newline newline
\end_inset

: set d# 2 cl ! ; { br }
\begin_inset Newline newline
\end_inset

: /+/ ( nim-n ) push over + over or pop and or ;
\begin_inset Newline newline
\end_inset

: inc ( n-n ) [ ad ] @ h# 00000100 and drop if ; then d# 1 h# 0000003F
\begin_inset Newline newline
\end_inset

/+/ ;
\begin_inset Newline newline
\end_inset

: a+ ar @n inc ar !n ;
\begin_inset Newline newline
\end_inset

: p+ pc @3 inc pc !3 ; }block
\begin_inset Newline newline
\end_inset

( 00341C00 ) D# 1287 shadow{ 
\begin_inset Newline newline
\end_inset

( softsim execute )
\begin_inset Newline newline
\end_inset

: cnt ( count down for memory access )
\begin_inset Newline newline
\end_inset

: set4 ( go to slot { 0000008F } and )
\begin_inset Newline newline
\end_inset

: set ( set ) [ cl ] ( to time memory prefetch ) { br }
\begin_inset Newline newline
\end_inset

: /+/ [ nim-n ] ( add ) i ( to ) n ( affecting only bits ) { cr }
\begin_inset Newline newline
\end_inset

( within ) m
\begin_inset Newline newline
\end_inset

: inc ( increment current address if not ) { cr }
\begin_inset Newline newline
\end_inset

( a port address )
\begin_inset Newline newline
\end_inset

: a+ ( increment the a register )
\begin_inset Newline newline
\end_inset

: p+ ( increment the p register ) }block
\begin_inset Newline newline
\end_inset

( 00342000 ) D# 1288 code{ 
\begin_inset Newline newline
\end_inset

( softsim execute )
\begin_inset Newline newline
\end_inset

: +t ( n ) t @ s @ sp @ d# 1 + dup sp ! ss ! s ! t ! ;
\begin_inset Newline newline
\end_inset

: -t ( -n ) t @ s @ t ! sp @ dup ss @ s ! { indent }
\begin_inset Newline newline
\end_inset

d# -1 + sp ! ;
\begin_inset Newline newline
\end_inset

: +r ( n ) r @ rp @ d# 1 + dup rp ! rs ! r ! ;
\begin_inset Newline newline
\end_inset

: -r ( -n ) r @ rp @ dup rs @ r ! d# -1 + rp ! ;
\begin_inset Newline newline
\end_inset

: t@ t @n ;
\begin_inset Newline newline
\end_inset

: t! t !n ;
\begin_inset Newline newline
\end_inset

: bin -t h# 00015555 or t@ ; { br }
\begin_inset Newline newline
\end_inset

: -x t @ h# 0003FFFF or t ! ;
\begin_inset Newline newline
\end_inset

: 2*x t@ 2* h# 0003FFFF and t! ;
\begin_inset Newline newline
\end_inset

: sx dup h# 00020000 and 2* or ;
\begin_inset Newline newline
\end_inset

: +* t@ sx ar @n { indent }
\begin_inset Newline newline
\end_inset

d# 1 ? if push s @n + pop { indent }
\begin_inset Newline newline
\end_inset

then 2/ over d# 1 and drop { indent }
\begin_inset Newline newline
\end_inset

if h# 00020000 or then ar !n 2/ t! ; }block
\begin_inset Newline newline
\end_inset

( 00342400 ) D# 1289 shadow{ 
\begin_inset Newline newline
\end_inset

( softsim execute )
\begin_inset Newline newline
\end_inset

: +t n ( push onto data stack )
\begin_inset Newline newline
\end_inset

: -t -n ( pop from data stack )
\begin_inset Newline newline
\end_inset

: +r n ( push onto return stack )
\begin_inset Newline newline
\end_inset

: -r -n ( pop from return stack )
\begin_inset Newline newline
\end_inset

: t! ( write t as number )
\begin_inset Newline newline
\end_inset

: t@ ( read t as number )
\begin_inset Newline newline
\end_inset

: bin ( prepare for a binary operation ) { br }
\begin_inset Newline newline
\end_inset

( some instructions named with terminal ) { cr }
\begin_inset Newline newline
\end_inset

( x to avoid pentium conflict ) { br }
\begin_inset Newline newline
\end_inset

: -x ( - )
\begin_inset Newline newline
\end_inset

: 2*x ( 2* )
\begin_inset Newline newline
\end_inset

: sx ( sign extend )
\begin_inset Newline newline
\end_inset

: +* ( multiply step ) }block
\begin_inset Newline newline
\end_inset

( 00342800 ) D# 1290 code{ 
\begin_inset Newline newline
\end_inset

( softsim execute ) :# cy 8192
\begin_inset Newline newline
\end_inset

: 2/x t@ sx 2/ t! ;
\begin_inset Newline newline
\end_inset

: orx bin or t! ;
\begin_inset Newline newline
\end_inset

: andx bin and t! ;
\begin_inset Newline newline
\end_inset

: +x bin + pc @ h# 00000200 and drop { indent }
\begin_inset Newline newline
\end_inset

if d# 0 [ cy ] @ h# 00040000 and drop { indent }
\begin_inset Newline newline
\end_inset

if d# 1 or then + dup [ cy ] ! then { indent }
\begin_inset Newline newline
\end_inset

h# 0003FFFF and t! ;
\begin_inset Newline newline
\end_inset

: t! -t drop ;
\begin_inset Newline newline
\end_inset

: r@ -r +t ;
\begin_inset Newline newline
\end_inset

: a@ ar @ +t ;
\begin_inset Newline newline
\end_inset

: t@ t @ +t ;
\begin_inset Newline newline
\end_inset

: s@ s @ +t ;
\begin_inset Newline newline
\end_inset

: b! -t h# 000003FF and b ! ;
\begin_inset Newline newline
\end_inset

: r! -t +r ;
\begin_inset Newline newline
\end_inset

: a!x d# 0 cnt -t ar ! ; }block
\begin_inset Newline newline
\end_inset

( 00342C00 ) D# 1291 shadow{ 
\begin_inset Newline newline
\end_inset

( softsim execute )
\begin_inset Newline newline
\end_inset

: 2/x ( 2/ )
\begin_inset Newline newline
\end_inset

: orx ( or )
\begin_inset Newline newline
\end_inset

: andx ( and )
\begin_inset Newline newline
\end_inset

: +x ( + )
\begin_inset Newline newline
\end_inset

: t! ( drop )
\begin_inset Newline newline
\end_inset

: r@ ( pop )
\begin_inset Newline newline
\end_inset

: a@ ( a )
\begin_inset Newline newline
\end_inset

: t@ ( dup )
\begin_inset Newline newline
\end_inset

: s@ ( over )
\begin_inset Newline newline
\end_inset

: b!
\begin_inset Newline newline
\end_inset

: r! ( push )
\begin_inset Newline newline
\end_inset

: a!x ( a! ) }block
\begin_inset Newline newline
\end_inset

( 00343000 ) D# 1292 code{ 
\begin_inset Newline newline
\end_inset

( softsim execute )
\begin_inset Newline newline
\end_inset

: call pc @ +r
\begin_inset Newline newline
\end_inset

: jmp ir @n adr dup pc !3 set4 h# 00000100 and { indent }
\begin_inset Newline newline
\end_inset

drop if d# 0 cl ! then ;
\begin_inset Newline newline
\end_inset

: jz h# 0003FFFF
\begin_inset Newline newline
\end_inset

: jc t @n and drop if set4 ; then jmp ;
\begin_inset Newline newline
\end_inset

: jns h# 00020000 jc ;
\begin_inset Newline newline
\end_inset

: ret -r h# 000003FF and pc ! set4 ;
\begin_inset Newline newline
\end_inset

: jr+ r @n d# -1 + dup r !n dup and drop { indent }
\begin_inset Newline newline
\end_inset

-if -r drop set4 ; then jmp ;
\begin_inset Newline newline
\end_inset

: ur+ r @n d# -1 + dup r !n dup and drop { indent }
\begin_inset Newline newline
\end_inset

-if -r drop ; then d# 0 slot ! ;
\begin_inset Newline newline
\end_inset

: ex pc @ -r pc ! +r set4 ; }block
\begin_inset Newline newline
\end_inset

( 00343400 ) D# 1293 shadow{ 
\begin_inset Newline newline
\end_inset

( softsim execute )
\begin_inset Newline newline
\end_inset

: call ( call through i )
\begin_inset Newline newline
\end_inset

: jmp ( jump through i )
\begin_inset Newline newline
\end_inset

: jz ( if )
\begin_inset Newline newline
\end_inset

: jc
\begin_inset Newline newline
\end_inset

: jns ( -if )
\begin_inset Newline newline
\end_inset

: ret ( ; jump through r )
\begin_inset Newline newline
\end_inset

: jr+ ( next )
\begin_inset Newline newline
\end_inset

: ur+ ( unext )
\begin_inset Newline newline
\end_inset

: ex ( call through r ) }block
\begin_inset Newline newline
\end_inset

( 00343800 ) D# 1294 code{ 
\begin_inset Newline newline
\end_inset

( softsim display ) :# wind? -1
\begin_inset Newline newline
\end_inset

: nod.
 ( xy ) tab dec [ nod ] @ n-nn red d# 3 .n ;
\begin_inset Newline newline
\end_inset

: ofst d# 320 ;
\begin_inset Newline newline
\end_inset

: .wind [ wind? ] @ dup and drop if .all ; then { indent }
\begin_inset Newline newline
\end_inset

switch d# 610 d# 22 the stacks { indent }
\begin_inset Newline newline
\end_inset

d# 690 d# 22 nod.
 d# 690 d# 52 the mem.
 { indent }
\begin_inset Newline newline
\end_inset

switch ; { br }
\begin_inset Newline newline
\end_inset

: ok show black screen text { indent }
\begin_inset Newline newline
\end_inset

[ nns d# -1 + ] for i com.
 -next .wind { indent }
\begin_inset Newline newline
\end_inset

d# 610 [ d# 22 ofst + ] the stacks { indent }
\begin_inset Newline newline
\end_inset

d# 690 [ d# 22 ofst + ] nod.
 { indent }
\begin_inset Newline newline
\end_inset

d# 690 [ d# 52 ofst + ] the mem.
 { indent }
\begin_inset Newline newline
\end_inset

d# 610 d# 680 tab [ time ] @ .
 cr [ gap ] @ .
 { indent }
\begin_inset Newline newline
\end_inset

pins.
 ( debug ) keyboard ; { br }
\begin_inset Newline newline
\end_inset

: lw d# -1
\begin_inset Newline newline
\end_inset

: +xorg ( n ) [ xorg ] @ + d# 0 max [ nnx d# -8 + ] min [ xorg ] !
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset

: rw d# 1 +xorg ;
\begin_inset Newline newline
\end_inset

: uw d# 1
\begin_inset Newline newline
\end_inset

: +yorg ( n ) [ yorg ] @ + d# 0 max [ nny d# -4 + ] min [ yorg ] !
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset

: dw d# -1 +yorg ;
\begin_inset Newline newline
\end_inset

: wtog [ wind? ] @ dup and if dup or [ wind? ] ! ; then { indent }
\begin_inset Newline newline
\end_inset

- [ wind? ] ! ; }block
\begin_inset Newline newline
\end_inset

( 00343C00 ) D# 1295 shadow{ 
\begin_inset Newline newline
\end_inset

( softsim display )
\begin_inset Newline newline
\end_inset

: nod.
 ( show current node in red at ) [ xy ]
\begin_inset Newline newline
\end_inset

: ofst ( offset to second focus node )
\begin_inset Newline newline
\end_inset

: .wind ( show 4*8 window in 8*18 ) { cr }
\begin_inset Newline newline
\end_inset

( or extra focus node ) { br }
\begin_inset Newline newline
\end_inset

: ok ( the default 2d display ) { br }
\begin_inset Newline newline
\end_inset

: lw ( move display window left )
\begin_inset Newline newline
\end_inset

: +xorg ( factored move in x axis )
\begin_inset Newline newline
\end_inset

: rw ( move display window right )
\begin_inset Newline newline
\end_inset

: uw ( move display window up )
\begin_inset Newline newline
\end_inset

: +yorg ( factored move in y axis )
\begin_inset Newline newline
\end_inset

: dw ( move display window down )
\begin_inset Newline newline
\end_inset

: wtog ( toggle window display ) }block
\begin_inset Newline newline
\end_inset

( 00344000 ) D# 1296 code{ 
\begin_inset Newline newline
\end_inset

( softsim keyboard handler )
\begin_inset Newline newline
\end_inset

: n! ( n ) nn-n d# 0 max [ nns { FFFFFFEF } ] ( + ) min [ nod ] ! ;
\begin_inset Newline newline
\end_inset

: fr d# 1
\begin_inset Newline newline
\end_inset

: +nod [ nod ] @ + n-nn n! ;
\begin_inset Newline newline
\end_inset

: fl d# -1 +nod ;
\begin_inset Newline newline
\end_inset

: fu [ nnx ] nop
\begin_inset Newline newline
\end_inset

: ++nod [ nod ] @ over +nod swap over + { indent }
\begin_inset Newline newline
\end_inset

[ nod ] @ or drop if [ nod ] ! ; then drop ;
\begin_inset Newline newline
\end_inset

: fd [ nnx negate ] ++nod ;
\begin_inset Newline newline
\end_inset

: +gap d# 1
\begin_inset Newline newline
\end_inset

: +g ( n ) [ fast ] @ + d# 0 max dup [ fast ] ! [ gap ] ! ;
\begin_inset Newline newline
\end_inset

: ++gap d# 100 +g ;
\begin_inset Newline newline
\end_inset

: -gap d# -1 +g ;
\begin_inset Newline newline
\end_inset

: --gap d# -100 +g ; { br }
\begin_inset Newline newline
\end_inset

: h pad nul nul accept nul { cr }
\begin_inset Newline newline
\end_inset

lw uw dw rw fl fu fd fr switch u d wtog { cr }
\begin_inset Newline newline
\end_inset

++gap +gap nul nul nul faster go quick { cr }
\begin_inset Newline newline
\end_inset

--gap -gap nul nul { indent }
\begin_inset Newline newline
\end_inset

[ h# 00002500 , h# 0110160C , h# 0110160C , ] { indent }
\begin_inset Newline newline
\end_inset

[ H# 0F101603 , h# 00002B2B , H# 080D0E00 , h# 00002323 , ] }block
\begin_inset Newline newline
\end_inset

( 00344400 ) D# 1297 shadow{ 
\begin_inset Newline newline
\end_inset

( softsim display )
\begin_inset Newline newline
\end_inset

: n! ( change focus node ) [ nod ]
\begin_inset Newline newline
\end_inset

: fr ( focus right )
\begin_inset Newline newline
\end_inset

: +nod ( factored horizontal move )
\begin_inset Newline newline
\end_inset

: fl ( focus left )
\begin_inset Newline newline
\end_inset

: fu ( focus up )
\begin_inset Newline newline
\end_inset

: ++nod ( factored vertical move )
\begin_inset Newline newline
\end_inset

: fd ( focus down )
\begin_inset Newline newline
\end_inset

: +gap ( add { 0000002F } to gap and fast )
\begin_inset Newline newline
\end_inset

: +g ( factored add to gap and fast )
\begin_inset Newline newline
\end_inset

: ++gap ( add { 00000C8F } to gap and fast )
\begin_inset Newline newline
\end_inset

: -gap ( add { FFFFFFEF } to gap and fast )
\begin_inset Newline newline
\end_inset

: --gap ( add { FFFFF38F } to gap and fast )
\begin_inset Newline newline
\end_inset

: h ( keyboard handler ) { indent }
\begin_inset Newline newline
\end_inset

[ ++ ] ( fastest faster ) { indent }
\begin_inset Newline newline
\end_inset

[ fgs ] ( fast go step ) { indent }
\begin_inset Newline newline
\end_inset

[ -- ] ( slowest slower ) { cr indent }
\begin_inset Newline newline
\end_inset

[ ludr ] ( left up down right ) [ window ] { indent }
\begin_inset Newline newline
\end_inset

[ ludr ] ( left up down right ) [ focus ] { indent }
\begin_inset Newline newline
\end_inset

[ oudw ] ( other up down window ) [ memory dump ] { cr indent }
\begin_inset Newline newline
\end_inset

[ .
 ] ( quit ) }block
\begin_inset Newline newline
\end_inset

( 00344800 ) D# 1298 code{ 
\begin_inset Newline newline
\end_inset

( softsim reset ) :# limbo 0 [ h# 00000000 limbo ! ]
\begin_inset Newline newline
\end_inset

: unp ( n-a ) d# 10 /mod nn-n [ com ] ! { indent }
\begin_inset Newline newline
\end_inset

h# 00000010 * h# 00000010 or h# 00000155 or mem ;
\begin_inset Newline newline
\end_inset

: , unp swap unp over over h# 0000000E or ! swap h# 0000000E or ! ;
\begin_inset Newline newline
\end_inset

: row ( n ) [ nnx ] for dup dup [ d# 100 d# 10 * ] + , d# 10 + { indent
 }
\begin_inset Newline newline
\end_inset

next drop ;
\begin_inset Newline newline
\end_inset

: ups d# 1001 row d# 3001 row d# 5001 row ;
\begin_inset Newline newline
\end_inset

: downs d# 4 row d# 2004 row d# 4004 row d# 6004 row ;
\begin_inset Newline newline
\end_inset

: col ( n ) [ nny ] for dup dup d# 10 + , [ d# 100 d# 10 * ] + { indent
 }
\begin_inset Newline newline
\end_inset

next drop ;
\begin_inset Newline newline
\end_inset

: lefts d# 12 col d# 32 col d# 52 col d# 72 col { indent }
\begin_inset Newline newline
\end_inset

d# 92 col d# 112 col d# 132 col d# 152 col ;
\begin_inset Newline newline
\end_inset

: rights d# 8 col d# 28 col d# 48 col d# 68 col { indent }
\begin_inset Newline newline
\end_inset

d# 88 col d# 108 col d# 128 col d# 148 col d# 168 col ;
\begin_inset Newline newline
\end_inset

: boots ( an ) nn-n [ com ] ! h# 00000155 or pc ! ;
\begin_inset Newline newline
\end_inset

: un! for d# 0 over ! d# 1 + next drop ;
\begin_inset Newline newline
\end_inset

: /dest ( a { FFFFFFEF } ) [ limbo ] swap [ pt ] ! dest ! { indent }
\begin_inset Newline newline
\end_inset

d# 0 dup port ! pend ! ;
\begin_inset Newline newline
\end_inset

: rese r h# 00000031 un! [ h# 000000A9 h# 00000155 or ] pc ! d# 4 slot
\begin_inset Newline newline
\end_inset

! { indent }
\begin_inset Newline newline
\end_inset

0 dup cl ! ph ! d# -1 es ! { indent }
\begin_inset Newline newline
\end_inset

d# 0 dup ioc ! ios ! h# 00000003 slp ! { indent }
\begin_inset Newline newline
\end_inset

left /dest up /dest right /dest { indent }
\begin_inset Newline newline
\end_inset

down /dest [ h# 0000015D h# 00000155 or ] b ! ;
\begin_inset Newline newline
\end_inset

: reset drop d# 0 [ nns d# -1 + ] for i [ com ] ! rese -next ; }block
\begin_inset Newline newline
\end_inset

( 00344C00 ) D# 1299 shadow{ 
\begin_inset Newline newline
\end_inset

( co-ordinate shared register ports )
\begin_inset Newline newline
\end_inset

: unp ( unpacks a number with computer in hundreds digits and bus in
\begin_inset Newline newline
\end_inset

units digit.
 returns address of pending bus content, which becomes
\begin_inset Newline newline
\end_inset

bus content on next clock tick.
 )
\begin_inset Newline newline
\end_inset

: , ( given a pair of numbers describing endpoints of a bus.
 stores
\begin_inset Newline newline
\end_inset

address of each in memory of other computer.
 writing to bus register
\begin_inset Newline newline
\end_inset

updates register at other end.
 )
\begin_inset Newline newline
\end_inset

: 127 ( f or' destination )
\begin_inset Newline newline
\end_inset

: 12b
\begin_inset Newline newline
\end_inset

: 12d
\begin_inset Newline newline
\end_inset

: 12e
\begin_inset Newline newline
\end_inset

: 129 ( 1 or' pending )
\begin_inset Newline newline
\end_inset

: 125
\begin_inset Newline newline
\end_inset

: 123
\begin_inset Newline newline
\end_inset

: 120
\begin_inset Newline newline
\end_inset

: 128 ( bus 8 right )
\begin_inset Newline newline
\end_inset

: 124 ( bus 4 down )
\begin_inset Newline newline
\end_inset

: 122 ( bus 2 left )
\begin_inset Newline newline
\end_inset

: 121 ( bus 1 up )
\begin_inset Newline newline
\end_inset

: boots ( change execution address )
\begin_inset Newline newline
\end_inset

: reset ( initialize some registers , ) { cr }
\begin_inset Newline newline
\end_inset

( execute from idle ) }block
\begin_inset Newline newline
\end_inset

( 00345000 ) D# 1300 code{ 
\begin_inset Newline newline
\end_inset

( test code for chip ) { br }
\begin_inset Newline newline
\end_inset

( custom code ) [ d# 1302 load ] ( exit ) { br }
\begin_inset Newline newline
\end_inset

( ide serial ) [ d# 708 node d# 1372 load ] { indent }
\begin_inset Newline newline
\end_inset

( sync ) [ d# 300 node d# 1374 load ] { indent }
\begin_inset Newline newline
\end_inset

( wire ) [ d# 17 node d# 1376 load ] { indent }
\begin_inset Newline newline
\end_inset

( end ) [ d# 16 node d# 1378 load ] { br }
\begin_inset Newline newline
\end_inset

( smtm test ) [ d# 0 node d# 1248 load exit ] { br }
\begin_inset Newline newline
\end_inset

( */ exerciser ) [ d# 402 node d# 1354 load ] { indent }
\begin_inset Newline newline
\end_inset

[ d# 401 node d# 1356 load d# 400 node d# 1358 load ] { cr }
\begin_inset Newline newline
\end_inset

( serdes ) [ d# 1 node d# 1360 load d# 701 node d# 1362 load ] { cr }
\begin_inset Newline newline
\end_inset

( spi flash write ) [ d# 702 node d# 1364 load ] { cr }
\begin_inset Newline newline
\end_inset

( ana ) [ d# 715 node d# 1366 load d# 717 node d# 1368 load ] { cr }
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00345400 ) D# 1301 shadow{ 
\begin_inset Newline newline
\end_inset

( this block is loaded to compile test code for any desired nodes.
\begin_inset Newline newline
\end_inset

write *nnn node* either here before loading a node's source, or in
\begin_inset Newline newline
\end_inset

the source itself.
 the *node* phrase compiles the appropriate rom
\begin_inset Newline newline
\end_inset

for the given node so that test code may reference the rom.
 ) { br }
\begin_inset Newline newline
\end_inset

( things like ide and common tests are loaded here, and this base
\begin_inset Newline newline
\end_inset

code is presently assigned up at the top of this area just below 1380.
\begin_inset Newline newline
\end_inset

to simplify base maintenance, please use { 0000A2CF } for your own
\begin_inset Newline newline
\end_inset

testing and load it from here.
 when we begin using personal space
\begin_inset Newline newline
\end_inset

above { 0000B40F } your own tests can go there.
 ) }block
\begin_inset Newline newline
\end_inset

( 00345800 ) D# 1302 code{ 
\begin_inset Newline newline
\end_inset

( custom test code ) }block
\begin_inset Newline newline
\end_inset

( 00345C00 ) D# 1303 shadow{ 
\begin_inset Newline newline
\end_inset

( this load block, and the following { 0000032F } source/shadow pairs,
\begin_inset Newline newline
\end_inset

are yours to do with as you please! ) }block
\begin_inset Newline newline
\end_inset

( 00346000 ) D# 1304 code{ 
\begin_inset Newline newline
\end_inset

( eforth rom code ) { br }
\begin_inset Newline newline
\end_inset

( sdram addr ) [ d# 9 node d# 1320 load ] { indent }
\begin_inset Newline newline
\end_inset

( ctrl ) [ d# 8 node d# 1322 load ] ( ram ) { indent }
\begin_inset Newline newline
\end_inset

( data ) [ d# 7 node d# 1324 load ] { indent }
\begin_inset Newline newline
\end_inset

( idle ) [ d# 108 node d# 1326 load ] { indent }
\begin_inset Newline newline
\end_inset

( user ) [ d# 107 node d# 1328 load ] { br }
\begin_inset Newline newline
\end_inset

( eforth stack ) [ d# 106 node d# 1310 d# 2 loads ] { indent }
\begin_inset Newline newline
\end_inset

( bitsy ) [ d# 105 node d# 1306 d# 2 loads ] { br }
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00346400 ) D# 1305 shadow{ 
\begin_inset Newline newline
\end_inset

( load block for rom resident sdram and eforth in the ga144.
 loaded
\begin_inset Newline newline
\end_inset

by { 0000758F } even for tapeout.
 ) }block
\begin_inset Newline newline
\end_inset

( 00346800 ) D# 1306 code{ 
\begin_inset Newline newline
\end_inset

( e4 bitsy 1of2 ) { cr }
\begin_inset Newline newline
\end_inset

[ h# 000000AA org ]
\begin_inset Newline newline
\end_inset

: rp-- ( a-a' ) { 0000155D } d# -1 .
 + ;
\begin_inset Newline newline
\end_inset

: bs@ { -cr } : 'else ( a-w ) { 0000159D } { indent }
\begin_inset Newline newline
\end_inset

@p+ !b !b .
 ( ' ) @p+ x@ ( ' ) { indent }
\begin_inset Newline newline
\end_inset

@p+ !b @b ; ( ' ) .
 .
 .
 !p+ ( ' )
\begin_inset Newline newline
\end_inset

: rp@ ( ri-ri ) { 0000161D } over rp--
\begin_inset Newline newline
\end_inset

: pshbs ( w- ) { 0000163D } @p+ !b !b ; ( ' ) @p+ pshw ( ' )
\begin_inset Newline newline
\end_inset

: 'r@ ( ri-ri ) { 0000167D } over rp--
\begin_inset Newline newline
\end_inset

: @w ( a- ) { 0000169D } bs@ pshbs ;
\begin_inset Newline newline
\end_inset

: rfrom ( ri-r'i ) { 000016DD } over rp-- over over @w ;
\begin_inset Newline newline
\end_inset

: popbs ( -w ) { 0000173D } @p+ !b @b ; ( ' ) !p+ pops ( ' )
\begin_inset Newline newline
\end_inset

: pshr ( aw-a ) { 0000177D } { indent }
\begin_inset Newline newline
\end_inset

@p+ !b !b dup ( ' ) @p+ .
 .
 @p+ ( ' ) { indent }
\begin_inset Newline newline
\end_inset

!b @p+ !b .
 ( ' ) x! ( ' )
\begin_inset Newline newline
\end_inset

: rp++ { -cr } : ip++ ( a-a' ) { 000017FD } d# 1 .
 + ;
\begin_inset Newline newline
\end_inset

: tor ( ri-r'i ) { 0000183D } push popbs pshr pop ;
\begin_inset Newline newline
\end_inset

: rp! ( i-ri ) { 0000189D } push popbs rp++ pop ; { br }
\begin_inset Newline newline
\end_inset

: 'con ( ra-r'i ) { 000018FD } bs@
\begin_inset Newline newline
\end_inset

: 'var ( ra-r'i ) { 0000191D } dup pshbs
\begin_inset Newline newline
\end_inset

: 'exit ( rx-r'i ) { 0000193D } drop rp-- dup bs@ ; }block
\begin_inset Newline newline
\end_inset

( 00346C00 ) D# 1307 shadow{ 
\begin_inset Newline newline
\end_inset

( e4 bitsy shadow 1of2 )
\begin_inset Newline newline
\end_inset

: rp-- ( internal )
\begin_inset Newline newline
\end_inset

: x@ ( internal ) { -cr } : 'else ( eforth microcode )
\begin_inset Newline newline
\end_inset

: rp@ ( eforth microcode )
\begin_inset Newline newline
\end_inset

: pshw ( internal )
\begin_inset Newline newline
\end_inset

: 'r@ ( eforth microcode )
\begin_inset Newline newline
\end_inset

: @w ( internal )
\begin_inset Newline newline
\end_inset

: rfrom ( eforth microcode )
\begin_inset Newline newline
\end_inset

: popw ( internal )
\begin_inset Newline newline
\end_inset

: pshr ( internal )
\begin_inset Newline newline
\end_inset

: rp++ ( internal ) { -cr } : ip++ ( internal )
\begin_inset Newline newline
\end_inset

: tor ( eforth microcode )
\begin_inset Newline newline
\end_inset

: rp! ( internal )
\begin_inset Newline newline
\end_inset

: 'con ( eforth microcode )
\begin_inset Newline newline
\end_inset

: 'var ( eforth microcode )
\begin_inset Newline newline
\end_inset

: 'exit ( eforth microcode ) }block
\begin_inset Newline newline
\end_inset

( 00347000 ) D# 1308 code{ 
\begin_inset Newline newline
\end_inset

( e4 bitsy 2of2 ) { br }
\begin_inset Newline newline
\end_inset

{ 0000197D } begin dup 2* -if { indent }
\begin_inset Newline newline
\end_inset

( code.s-xt ) drop !b ahead [ swap ] then { indent }
\begin_inset Newline newline
\end_inset

( code.r-xt ) drop push ;' { cr }
\begin_inset Newline newline
\end_inset

: bitsy { 000019DD } then dup bs@ push ip++
\begin_inset Newline newline
\end_inset

: xxt { 00001A1D } pop -until { indent }
\begin_inset Newline newline
\end_inset

( list-xt ) push pshr pop bitsy ; { br }
\begin_inset Newline newline
\end_inset

( execute )
\begin_inset Newline newline
\end_inset

: 'ex { 00001A7D } ( xt-- ) popbs push xxt ;
\begin_inset Newline newline
\end_inset

: 'lit { 00001ABD } ( --w ) dup bs@ push ip++ pop pshbs ;
\begin_inset Newline newline
\end_inset

: 'if { 00001B1D } ( f-- ) popbs if { indent }
\begin_inset Newline newline
\end_inset

drop ip++ ; then drop 'else ; { br }
\begin_inset Newline newline
\end_inset

{ 00001B9D } [ exit ] ( start is run in ide )
\begin_inset Newline newline
\end_inset

: start right a! ( terminal ) left b! ( stack ) { indent }
\begin_inset Newline newline
\end_inset

d# -32 d# 0 ( rp.ip ) bitsy ; }block
\begin_inset Newline newline
\end_inset

( 00347400 ) D# 1309 shadow{ 
\begin_inset Newline newline
\end_inset

( e4 bitsy 2of2 shadow )
\begin_inset Newline newline
\end_inset

: 'con ( runtime constant )
\begin_inset Newline newline
\end_inset

: 'var ( runtime variable )
\begin_inset Newline newline
\end_inset

: 'exit ( runtime end call ) { br }
\begin_inset Newline newline
\end_inset

: btc ( label e4 interpreter ) { cr }
\begin_inset Newline newline
\end_inset

( bitsy main interpreter entry )
\begin_inset Newline newline
\end_inset

: xxt ( internal ) { br }
\begin_inset Newline newline
\end_inset

: 'ex ( runtime execute )
\begin_inset Newline newline
\end_inset

: 'lit ( runtime literal )
\begin_inset Newline newline
\end_inset

: 'if ( runtime conditional branch ) { cr }
\begin_inset Newline newline
\end_inset

: @io ( return the serial bit delay )
\begin_inset Newline newline
\end_inset

: !io ( init serial 0-autobps n-fixedbps )
\begin_inset Newline newline
\end_inset

: t!io ( internal )
\begin_inset Newline newline
\end_inset

: tx! ( transmit one character )
\begin_inset Newline newline
\end_inset

: ttx! ( internal )
\begin_inset Newline newline
\end_inset

: trx? ( internal )
\begin_inset Newline newline
\end_inset

: rx? ( test recieved char - 0 if no char else 18bit inverted char )
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00347800 ) D# 1310 code{ 
\begin_inset Newline newline
\end_inset

( e4 stack 1of2 ) { cr }
\begin_inset Newline newline
\end_inset

[ h# 0000003C org ]
\begin_inset Newline newline
\end_inset

: xa@ ( a- ) { 0000079D } @p+ !b !b ; ( ' ) @p+ sd@ ( ' )
\begin_inset Newline newline
\end_inset

: xa! ( a- ) { 000007DD } @p+ !b !b ; ( ' ) @p+ sd! ( ' ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000081D } [ h# 000000AA org ]
\begin_inset Newline newline
\end_inset

: 'c@ { -cr } : '@ { -cr } : x@ ( a-w ) { 0000155D } xa@ @b ;
\begin_inset Newline newline
\end_inset

: sp++ { -cr } : char+ { -cr } : cell+
\begin_inset Newline newline
\end_inset

: 1+ ( w-w' ) { 0000159D } d# 1 .
 + ;
\begin_inset Newline newline
\end_inset

: popt ( p-xp't ) { 000015DD } dup sp++ over x@ ;
\begin_inset Newline newline
\end_inset

: sp-- { -cr } : char- { -cr } : cell-
\begin_inset Newline newline
\end_inset

: 1- ( w-w' ) { 0000161D } d# -1 .
 + ;
\begin_inset Newline newline
\end_inset

: psht ( pt-p' ) { 0000165D } push sp-- pop over
\begin_inset Newline newline
\end_inset

: x! ( wa- ) { 0000169D } xa! !b ;
\begin_inset Newline newline
\end_inset

: 'c! { -cr } : '! ( pwa-p'st ) { 000016DD } x!
\begin_inset Newline newline
\end_inset

: popts ( p-p'st ) { 000016FD } popt
\begin_inset Newline newline
\end_inset

: pops ( pt-p'st ) { 0000171D } push popt pop ;
\begin_inset Newline newline
\end_inset

: pshs ( pst-p't ) { 0000175D } push psht pop ;
\begin_inset Newline newline
\end_inset

: page@ ( pst-p'tw ) { 0000179D } @p+ !b @b .
 ( ' ) dup !p+ ; ( ' )
\begin_inset Newline newline
\end_inset

: pshw ( pstw-p'tw ) { 000017DD } push pshs pop ;
\begin_inset Newline newline
\end_inset

: page! ( ptw-p'st ) { 0000181D } @p+ !b !b .
 ( ' ) drop @p+ ; ( ' )
\begin_inset Newline newline
\end_inset

pops ;
\begin_inset Newline newline
\end_inset

: sp@ { 0000187D } ( -a ) pshs psht dup pops ;
\begin_inset Newline newline
\end_inset

: sp! { 000018DD } ( a- ) pshs popts ; }block
\begin_inset Newline newline
\end_inset

( 00347C00 ) D# 1311 shadow{ 
\begin_inset Newline newline
\end_inset

( e4 stack 1of2 shadow )
\begin_inset Newline newline
\end_inset

: 'c@ ( runtime c@ )
\begin_inset Newline newline
\end_inset

: '@ ( runtime @ )
\begin_inset Newline newline
\end_inset

: x@ ( inline external ram )
\begin_inset Newline newline
\end_inset

: sp++ ( increment data stack pointer )
\begin_inset Newline newline
\end_inset

: char+ ( increment address by char size )
\begin_inset Newline newline
\end_inset

: cell+ ( increment address by cell size )
\begin_inset Newline newline
\end_inset

: 1+ ( increment by one )
\begin_inset Newline newline
\end_inset

: popt ( internal )
\begin_inset Newline newline
\end_inset

: sp-- ( decrement data stack pointer )
\begin_inset Newline newline
\end_inset

: char- ( decrement address by char size )
\begin_inset Newline newline
\end_inset

: cell- ( decrement address by cell size )
\begin_inset Newline newline
\end_inset

: 1- ( decrement by one )
\begin_inset Newline newline
\end_inset

: psht ( internal )
\begin_inset Newline newline
\end_inset

: x!
\begin_inset Newline newline
\end_inset

: 'c! ( runtime c! )
\begin_inset Newline newline
\end_inset

: '! ( runtime ! )
\begin_inset Newline newline
\end_inset

: popts ( internal )
\begin_inset Newline newline
\end_inset

: pops ( internal )
\begin_inset Newline newline
\end_inset

: pshs ( internal )
\begin_inset Newline newline
\end_inset

: page@ ( inline external ram )
\begin_inset Newline newline
\end_inset

: pshw ( inline external ram )
\begin_inset Newline newline
\end_inset

: page! ( inline external ram ) }block
\begin_inset Newline newline
\end_inset

( 00348000 ) D# 1312 code{ 
\begin_inset Newline newline
\end_inset

( e4 stack 2of2 )
\begin_inset Newline newline
\end_inset

: 'drop { 0000191D } ( w- ) drop pops ;
\begin_inset Newline newline
\end_inset

: 'over { 0000193D } ( ww-www ) over pshw ;
\begin_inset Newline newline
\end_inset

: 'dup { 0000195D } ( w-ww ) dup pshw ;
\begin_inset Newline newline
\end_inset

: 'swap { 0000197D } ( ab-ba ) over push push drop pop pop ;
\begin_inset Newline newline
\end_inset

: '2/ { 000019BD } ( w-w ) 2/ ; { -cr } : '2* { 000019DD } ( w-w )
\begin_inset Newline newline
\end_inset

2* ;
\begin_inset Newline newline
\end_inset

: um+ { 000019FD } ( uu-uc ) over or -if { indent }
\begin_inset Newline newline
\end_inset

{ 00001A1D } over or .
 + -if
\begin_inset Newline newline
\end_inset

: 'nc { 00001A5D } ( -0 ) dup dup or ;
\begin_inset Newline newline
\end_inset

: 'cy { 00001A7D } ( -1 ) then d# 1 ; { indent }
\begin_inset Newline newline
\end_inset

{ 00001ABD } then over or -if + 'cy ; then + 'nc ;
\begin_inset Newline newline
\end_inset

: zless { 00001B1D } ( n-f ) -if dup or - ; then dup or ;
\begin_inset Newline newline
\end_inset

: 'or { 00001B7D } ( ww-w ) over - and
\begin_inset Newline newline
\end_inset

: 'xor { 00001B9D } ( ww-w ) or pops ;
\begin_inset Newline newline
\end_inset

: 'and { 00001BBD } ( ww-w ) and pops ;
\begin_inset Newline newline
\end_inset

: negate { 00001BDD } ( w-w ) 1-
\begin_inset Newline newline
\end_inset

: invert ( w-w' ) { 00001BFD } begin ( .
 ) - ;
\begin_inset Newline newline
\end_inset

: zeq ( w-f ) { 00001C1D } until dup or ;
\begin_inset Newline newline
\end_inset

: '+ ( pww-p'sw' ) { 00001C5D } + pops ; { 00001C7D } ( exit )
\begin_inset Newline newline
\end_inset

: swap- { 00001C7D } ( ww-w ) - .
 + - pops ; { 00001CBD } { br }
\begin_inset Newline newline
\end_inset

{ 00001CBD } [ exit ] ( start is run in ide )
\begin_inset Newline newline
\end_inset

: start right b! ( sdram ) { cr }
\begin_inset Newline newline
\end_inset

d# 0 dup dup ( sp.s.t ) --l- ; ( bitsy ) }block
\begin_inset Newline newline
\end_inset

( 00348400 ) D# 1313 shadow{ 
\begin_inset Newline newline
\end_inset

( e4 stack 2of2 shadow )
\begin_inset Newline newline
\end_inset

: pshw ( internal )
\begin_inset Newline newline
\end_inset

: sp@ ( get data stack pointer )
\begin_inset Newline newline
\end_inset

: sp! ( set data stack pointer )
\begin_inset Newline newline
\end_inset

: 'drop ( runtime drop )
\begin_inset Newline newline
\end_inset

: 'over ( runtime over )
\begin_inset Newline newline
\end_inset

: 'dup ( runtime dup )
\begin_inset Newline newline
\end_inset

: 'swap ( runtime swap )
\begin_inset Newline newline
\end_inset

: zless ( runtime zero less )
\begin_inset Newline newline
\end_inset

: um+ ( add with carry )
\begin_inset Newline newline
\end_inset

: 'nc ( no carry is 0 )
\begin_inset Newline newline
\end_inset

: 'cy ( carry set is 1 )
\begin_inset Newline newline
\end_inset

: 'xor ( runtime exclusive or )
\begin_inset Newline newline
\end_inset

: 'and ( runtime and )
\begin_inset Newline newline
\end_inset

: 'or ( runtime inclusive or )
\begin_inset Newline newline
\end_inset

: negate ( runtime negate )
\begin_inset Newline newline
\end_inset

: invert ( runtime invert )
\begin_inset Newline newline
\end_inset

: zeq ( runtime zero equals )
\begin_inset Newline newline
\end_inset

: '+ ( runtime + )
\begin_inset Newline newline
\end_inset

: '2/ ( runtime 2/ )
\begin_inset Newline newline
\end_inset

: '2* ( runtime 2* ) }block
\begin_inset Newline newline
\end_inset

( 00348800 ) D# 1314 code{ 
\begin_inset Newline newline
\end_inset

( e4th bitsy ) { br }
\begin_inset Newline newline
\end_inset

: @io { 0000063D } ( --u ) @p+ ! @ .
 ( ' ) push t'@io ( ' ) pshw ;
\begin_inset Newline newline
\end_inset

{ cr }
\begin_inset Newline newline
\end_inset

( init io device 0-autobps n-fixedbps )
\begin_inset Newline newline
\end_inset

: !io { 0000069D } ( u-- ) popw
\begin_inset Newline newline
\end_inset

: t!io { 000006BD } ( u- ) @p+ ! ! ; ( ' ) @p+ t'!io ; ( ' )
\begin_inset Newline newline
\end_inset

: tx! { 000006FD } ( c-- ) popw
\begin_inset Newline newline
\end_inset

: ttx! { 0000071D } ( c- ) @p+ ! ! ; ( ' ) @p+ - ; ( ' )
\begin_inset Newline newline
\end_inset

: trx? { 0000075D } ( -c'0 ) @p+ ! @ ; ( ' ) !p+ t'rx? ; ( ' )
\begin_inset Newline newline
\end_inset

: rx? { 0000079D } ( --c'0 ) trx? pshw ; }block
\begin_inset Newline newline
\end_inset

( 00348C00 ) D# 1315 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00349000 ) D# 1316 code{ 
\begin_inset Newline newline
\end_inset

( e4 terminal 1of2 - serial i/o ) { br }
\begin_inset Newline newline
\end_inset

: getchar { 0000001D } ( delay in'0 f - delay -char f ) push over 2/
\begin_inset Newline newline
\end_inset

for .
 unext ..
 ( middle of start-bit ) { cr }
\begin_inset Newline newline
\end_inset

d# 7 for ( 8-data bits ) { indent }
\begin_inset Newline newline
\end_inset

over for .
 unext ..
 { indent }
\begin_inset Newline newline
\end_inset

h# 0001FFFF @b ( middle +/- ) { indent }
\begin_inset Newline newline
\end_inset

over - and push and pop or { cr }
\begin_inset Newline newline
\end_inset

2/ next { cr }
\begin_inset Newline newline
\end_inset

2/ 2/ 2/ 2/ 2/ 2/ 2/ 2/ 2/ ..
 h# 000000FF and - dup { cr }
\begin_inset Newline newline
\end_inset

begin drop @b -until drop pop ; { br }
\begin_inset Newline newline
\end_inset

: putchar { 0000027D } ( delay in'0 c - delay in'0 ) { cr }
\begin_inset Newline newline
\end_inset

push over pop { cr }
\begin_inset Newline newline
\end_inset

2* h# 0003FE00 dup push - and pop or { cr }
\begin_inset Newline newline
\end_inset

d# 10 for ( 1-start, 8-data, 2-stop bits ) { indent }
\begin_inset Newline newline
\end_inset

d# 2 over over 2/ and or !b { indent }
\begin_inset Newline newline
\end_inset

over for .
 unext ..
 { cr }
\begin_inset Newline newline
\end_inset

2/ next drop drop ; { 0000043D } }block
\begin_inset Newline newline
\end_inset

( 00349400 ) D# 1317 shadow{ 
\begin_inset Newline newline
\end_inset

( note.
 both tx and rx are completely in stock rs232 polarity, i.e.
\begin_inset Newline newline
\end_inset

mark lo space hi, data low start low.
 ultimately we need to invert
\begin_inset Newline newline
\end_inset

the whole thing for compatibility with s40 boot node conventions but
\begin_inset Newline newline
\end_inset

for testing purposes we will leave it as is and invert the rs232 board.
 )
\begin_inset Newline newline
\end_inset

{ br }
\begin_inset Newline newline
\end_inset

: getchar ( called after seeing leading edge of start bit.
 returns
\begin_inset Newline newline
\end_inset

clean inverted character.
 ) { br }
\begin_inset Newline newline
\end_inset

: putchar ( takes a dirty octet of data and transmits it as startbit,
\begin_inset Newline newline
\end_inset

eight data bits no parity one stop bit.
 ) }block
\begin_inset Newline newline
\end_inset

( 00349800 ) D# 1318 code{ 
\begin_inset Newline newline
\end_inset

( e4 terminal 2of2 - bitsy commands ) { br }
\begin_inset Newline newline
\end_inset

: baud { 0000043D } ( 0-d ) - push ( space is 0'0000.0100'1 ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000045D } begin @b - -until ( at start-bit ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000047D } begin @b -until ( at 1-bit ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000049D } begin @b zif then - .
 -until ( at 0-bits ) { cr }
\begin_inset Newline newline
\end_inset

{ 000004DD } begin @b zif then .
 -until ( at stop-bit ) { cr }
\begin_inset Newline newline
\end_inset

pop - ( n ) dup 2/ .
 + ( 1.5n ) ; { br }
\begin_inset Newline newline
\end_inset

: @io { 0000055D } ( delay - delay in'0 0 ) { indent }
\begin_inset Newline newline
\end_inset

pop a! push dup or baud ! { indent }
\begin_inset Newline newline
\end_inset

pop pop dup dup or ; { indent }
\begin_inset Newline newline
\end_inset

begin baud
\begin_inset Newline newline
\end_inset

: !io { 000005FD } ( delay in'0 u - delay 0 0 ) { indent }
\begin_inset Newline newline
\end_inset

until ( abandon old values )
\begin_inset Newline newline
\end_inset

: rx? { 0000061D } ( delay - delay 0 0 ) d# 0 dup ; { br }
\begin_inset Newline newline
\end_inset

: terminal { 0000065D } ( delay in'0 x ) { cr }
\begin_inset Newline newline
\end_inset

begin drop @b - -if getchar then { indent }
\begin_inset Newline newline
\end_inset

- 2* 2* -if drop ..
 r--- ( bitsy ) then { cr }
\begin_inset Newline newline
\end_inset

-until ( delay in'0 -c ) - putchar dup terminal ; { 0000079D } }block
\begin_inset Newline newline
\end_inset

( 00349C00 ) D# 1319 shadow{ 
\begin_inset Newline newline
\end_inset

: @io ( return the serial bit delay ) { br }
\begin_inset Newline newline
\end_inset

: !io ( sets nonzero baud rate delay over garbage.
 if zero, waits for
\begin_inset Newline newline
\end_inset

a space character to autobaud with.
 ) { br }
\begin_inset Newline newline
\end_inset

: rx? ( test for received char ) { br }
\begin_inset Newline newline
\end_inset

: tx! ( send one character ) { br }
\begin_inset Newline newline
\end_inset

: terminal ( polling loop for character receive or send ) }block
\begin_inset Newline newline
\end_inset

( 0034A000 ) D# 1320 code{ 
\begin_inset Newline newline
\end_inset

( sdram address-bus ) { cr }
\begin_inset Newline newline
\end_inset

( copy command to address bus ) { br }
\begin_inset Newline newline
\end_inset

[ h# 000000AA org ]
\begin_inset Newline newline
\end_inset

: cmd ( c- ) { 0000155D } h# 0003D555 ( nop.xxx ) !b ..
 { indent }
\begin_inset Newline newline
\end_inset

@ ( sleeps ) !b cmd ; { br }
\begin_inset Newline newline
\end_inset

{ 000015BD } [ exit ] ( start is run in ide )
\begin_inset Newline newline
\end_inset

: start right a! data b! cmd ; }block
\begin_inset Newline newline
\end_inset

( 0034A400 ) D# 1321 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034A800 ) D# 1322 code{ 
\begin_inset Newline newline
\end_inset

( sdram control-pins ) { cr }
\begin_inset Newline newline
\end_inset

( each word runs the requested rise..fall cycle 12+11 ticks per cycle
\begin_inset Newline newline
\end_inset

is a 42ns period ) { cr }
\begin_inset Newline newline
\end_inset

[ h# 00000000 org ]
\begin_inset Newline newline
\end_inset

: nooop ( rfr-rfr ) { 0000001D } ( 'nooop' ) .
 ..
 !b { indent }
\begin_inset Newline newline
\end_inset

..
 over over ..
 .
 .
 !b ;
\begin_inset Newline newline
\end_inset

: rcol1 ( rf-rfrf ) { 0000009D } .
 .
 !b { indent }
\begin_inset Newline newline
\end_inset

..
 h# 0000002B ..
 !b ( transfer ) { indent }
\begin_inset Newline newline
\end_inset

.
 h# 0000022E ..
 .
 .
 !b ; { cr }
\begin_inset Newline newline
\end_inset

{ 0000015D } [ h# 00000010 org ] ( 8-word page accessible to down
\begin_inset Newline newline
\end_inset

port )
\begin_inset Newline newline
\end_inset

: cmmd ( rfr-rfr ) { 0000021D } ( '@p+ ! cmmd' ) !b { indent }
\begin_inset Newline newline
\end_inset

..
 over over ..
 .
 .
 !b ;
\begin_inset Newline newline
\end_inset

: rcol ( rfr-rfr ) { 0000027D } ( '@p+ ! rcol' ) !b { indent }
\begin_inset Newline newline
\end_inset

over over ..
 rcol1 ;
\begin_inset Newline newline
\end_inset

: wcol ( rfr-rfr ) { 000002BD } ( '@p+ ! wcol' ) !b { indent }
\begin_inset Newline newline
\end_inset

h# 0002003E h# 0002002E ..
 !b { indent }
\begin_inset Newline newline
\end_inset

..
 h# 0003022B ..
 !b ( transfer ) { indent }
\begin_inset Newline newline
\end_inset

h# 0003023B !b ..
 .
 .
 !b { indent }
\begin_inset Newline newline
\end_inset

h# 0002002E ..
 !b h# 0000002B !b ( recover ) { indent }
\begin_inset Newline newline
\end_inset

..
 over over ..
 .
 .
 !b ; { br }
\begin_inset Newline newline
\end_inset

{ 0000047D } [ exit ] ( start is run in ide )
\begin_inset Newline newline
\end_inset

: start right a! io b! h# 0000002E ( cmd-fall ) -d-- ; }block
\begin_inset Newline newline
\end_inset

( 0034AC00 ) D# 1323 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034B000 ) D# 1324 code{ 
\begin_inset Newline newline
\end_inset

( sdram data-bus ) { br }
\begin_inset Newline newline
\end_inset

( db@ isn't used with 7j chip! ) { cr }
\begin_inset Newline newline
\end_inset

[ h# 000000AA org ] ( called with 'db@' '...!p+' )
\begin_inset Newline newline
\end_inset

: db@ ( -w ) { 0000155D } @ ; ( wakeup when data ready ) { br }
\begin_inset Newline newline
\end_inset

( db! called with '@p+ db!' )
\begin_inset Newline newline
\end_inset

: db! ( w- ) { 0000157D } h# 00015555 !b ( ..
 set output state ) { indent }
\begin_inset Newline newline
\end_inset

! ( wakeup when data taken )
\begin_inset Newline newline
\end_inset

: inpt { 000015BD } h# 00014555 !b ; ( restore input state ) { br }
\begin_inset Newline newline
\end_inset

{ 000015FD } [ exit ] ( start is run in ide )
\begin_inset Newline newline
\end_inset

: start up a! io b! down push inpt ; }block
\begin_inset Newline newline
\end_inset

( 0034B400 ) D# 1325 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034B800 ) D# 1326 code{ 
\begin_inset Newline newline
\end_inset

( sdram idle-loop ) { cr }
\begin_inset Newline newline
\end_inset

[ h# 000000AA org ]
\begin_inset Newline newline
\end_inset

: noop ( - ) { 0000155D } @p+ ! ; ( ' ) nooop ( ' )
\begin_inset Newline newline
\end_inset

: cmd ( c- ) { 0000159D } h# 00005A48 ! ! ; ( '@p+ ! cmmd' ) { cr }
\begin_inset Newline newline
\end_inset

: idle ( m-m ) { 000015DD } @p+ ! ..
 ( ' ) nooop ( ' ) h# 00008003
\begin_inset Newline newline
\end_inset

cmd noop d# 120 for ( 7.8us 42ns/ 5- is 181 ) { indent }
\begin_inset Newline newline
\end_inset

@p+ ! ..
 ( ' ) nooop ( ' ) { indent }
\begin_inset Newline newline
\end_inset

begin { 000016FD } @b and if { indent }
\begin_inset Newline newline
\end_inset

( ...
 ) @ ..
 @ ! ! ( user to ctrl ) { indent }
\begin_inset Newline newline
\end_inset

( ...
 ) *next idle ; { 0000179D } { indent }
\begin_inset Newline newline
\end_inset

then drop { cr }
\begin_inset Newline newline
\end_inset

next @p+ ! ..
 ( ' ) nooop ( ' ) idle ; { cr }
\begin_inset Newline newline
\end_inset

: init ( m-m ) { 0000181D } ( run only at power-up/reset ) { indent }
\begin_inset Newline newline
\end_inset

d# 4761 for ( 200us 42ns/ 1- ) noop next { indent }
\begin_inset Newline newline
\end_inset

noop h# 00010400 ( pre.all ) cmd noop { indent }
\begin_inset Newline newline
\end_inset

h# 00008001 ( rfr.123 ) cmd noop noop { indent }
\begin_inset Newline newline
\end_inset

h# 00008002 ( rfr.123 ) cmd noop noop { indent }
\begin_inset Newline newline
\end_inset

h# 00000021 ( std.mode ) cmd noop noop { indent }
\begin_inset Newline newline
\end_inset

h# 00004000 ( ext.mode ) cmd noop idle ; { br }
\begin_inset Newline newline
\end_inset

{ 00001B1D } [ exit ] ( start is run in ide )
\begin_inset Newline newline
\end_inset

: start h# 00000135 ( '-dl- ) a! io b! { cr }
\begin_inset Newline newline
\end_inset

h# 00000800 ( n13w? ) dup dup dup dup dup dup { cr }
\begin_inset Newline newline
\end_inset

dup dup dup init ; }block
\begin_inset Newline newline
\end_inset

( 0034BC00 ) D# 1327 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034C000 ) D# 1328 code{ 
\begin_inset Newline newline
\end_inset

( sdram user interface ) { cr }
\begin_inset Newline newline
\end_inset

[ h# 000000AA org ] ( user cmds+data from/to up or right )
\begin_inset Newline newline
\end_inset

: a2rc ( pa-pbc ) { 0000155D } dup ( 2* 16mw ) push 2/ ( 32mw ) { cr }
\begin_inset Newline newline
\end_inset

2/ 2/ 2/ 2/ 2/ 2/ 2/ 2/ 2/ -if
\begin_inset Newline newline
\end_inset

: row! ( pr-pbc ) { 000015FD } h# 00007FFF ( row.mask ) and dup ..
\begin_inset Newline newline
\end_inset

{ cr }
\begin_inset Newline newline
\end_inset

h# 00018000 ( activate ) or ..
 ! h# 00005A48 ! ..
 ( '@p+ ! cmmd' )
\begin_inset Newline newline
\end_inset

h# 00006000 ( bank.mask ) and pop ..
 h# 000003FF ( col.mask ) and
\begin_inset Newline newline
\end_inset

; then over + row! ;
\begin_inset Newline newline
\end_inset

: sd@ ( pa-p ) { 0000177D } a2rc h# 00028400 ( read+pre ) or or { cr }
\begin_inset Newline newline
\end_inset

! h# 00005A4B ! ..
 ( '@p+ ! rcol' ) down b! ..
 { cr }
\begin_inset Newline newline
\end_inset

@p+ !b @b ( ' ) @ !p+ ..
 ( ' ) pop b! !b ;
\begin_inset Newline newline
\end_inset

: sd! ( pa-p ) { 000018BD } a2rc h# 00020400 ( write+pre ) or or { cr }
\begin_inset Newline newline
\end_inset

! h# 00005A4D ! ..
 ( '@p+ ! wcol' ) pop b! @b ..
 { cr }
\begin_inset Newline newline
\end_inset

down b! ..
 @p+ !b !b ; ( ' ) @p+ db! ( ' )
\begin_inset Newline newline
\end_inset

: poll ( ru-ru ) { 000019FD } io b! @b { cr }
\begin_inset Newline newline
\end_inset

2* 2* -if push over ..
 r--- over pop then { cr }
\begin_inset Newline newline
\end_inset

h# 00000800 and .
 if push ..
 ---u pop then { cr }
\begin_inset Newline newline
\end_inset

drop poll ; { br }
\begin_inset Newline newline
\end_inset

{ 00001B9D } [ exit ] ( start is run in ide )
\begin_inset Newline newline
\end_inset

: start left ! d# 0 d# 0 ( r.u ) poll ; }block
\begin_inset Newline newline
\end_inset

( 0034C400 ) D# 1329 shadow{ 
\begin_inset Newline newline
\end_inset

( configure for sdram wiring as follows ) { cr }
\begin_inset Newline newline
\end_inset

2* ( 16mw ) push ( 2/ 32mw ) [ for d# 16 mw wiring ] { cr }
\begin_inset Newline newline
\end_inset

( 2* 16mw push ) 2/ ( 32mw ) [ for 32.
 ] }block
\begin_inset Newline newline
\end_inset

( 0034C800 ) D# 1330 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034CC00 ) D# 1331 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034D000 ) D# 1332 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034D400 ) D# 1333 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034D800 ) D# 1334 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034DC00 ) D# 1335 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034E000 ) D# 1336 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034E400 ) D# 1337 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034E800 ) D# 1338 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034EC00 ) D# 1339 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034F000 ) D# 1340 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034F400 ) D# 1341 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034F800 ) D# 1342 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0034FC00 ) D# 1343 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00350000 ) D# 1344 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00350400 ) D# 1345 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00350800 ) D# 1346 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00350C00 ) D# 1347 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00351000 ) D# 1348 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00351400 ) D# 1349 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00351800 ) D# 1350 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00351C00 ) D# 1351 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00352000 ) D# 1352 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00352400 ) D# 1353 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00352800 ) D# 1354 code{ 
\begin_inset Newline newline
\end_inset

( hardware multiply test ) [ d# 0 org +cy ]
\begin_inset Newline newline
\end_inset

: clc { 0000401D } dup dup or dup .
 + drop ;
\begin_inset Newline newline
\end_inset

: d2* ( hl-hl ) { 0000405D } dup .
 + push dup .
 + pop ;
\begin_inset Newline newline
\end_inset

: um+ ( hln-hl ) { 000040BD } .
 + push dup dup or .
 + pop ; { 0000411D }
\begin_inset Newline newline
\end_inset

[ -cy ]
\begin_inset Newline newline
\end_inset

: h* ( nu-hl ) { 0000011D } dup a! dup or d# 17 for +* unext a ;
\begin_inset Newline newline
\end_inset

: abs ( n-n ) { 0000019D } -if
\begin_inset Newline newline
\end_inset

: neg ( n-n ) { 000001BD } - d# 1 .
 + then ; { 0000021D } [ +cy ]
\begin_inset Newline newline
\end_inset

: u/mod ( hld-rq ) { 0000421D } clc neg
\begin_inset Newline newline
\end_inset

: -u/mod { 0000425D } a! d# 17 push begin begin dup .
 + push dup .
\begin_inset Newline newline
\end_inset

+ dup a .
 + -if drop pop *next dup .
 + ; then over or or pop next
\begin_inset Newline newline
\end_inset

dup .
 + ; { 000043DD } [ -cy ]
\begin_inset Newline newline
\end_inset

: try { 000043DD } right b! ( ba ) @b @b h* ( r ) @b um+ ( a ) @b u/mod
\begin_inset Newline newline
\end_inset

( b ) !b ( r ) !b try ; { 000044DD } }block
\begin_inset Newline newline
\end_inset

( 00352C00 ) D# 1355 shadow{ 
\begin_inset Newline newline
\end_inset

: h* ( is simplest multiply; first arg is a signed number and second,
\begin_inset Newline newline
\end_inset

the multiplier, is a full { 0000024F } bit unsigned number.
 )
\begin_inset Newline newline
\end_inset

: try ( slaves this node to another by the port given.
 it expects to
\begin_inset Newline newline
\end_inset

receive numbers b a r and calculates b*a+r then receives a and returns
\begin_inset Newline newline
\end_inset

b and r.
 the multiply is done using the h* here which is why b is
\begin_inset Newline newline
\end_inset

signed and a is unsigned.
 ) }block
\begin_inset Newline newline
\end_inset

( 00353000 ) D# 1356 code{ 
\begin_inset Newline newline
\end_inset

( soft multiply test ) [ d# 0 org +cy ]
\begin_inset Newline newline
\end_inset

: clc { 0000401D } dup dup or dup .
 + drop ;
\begin_inset Newline newline
\end_inset

: d2* ( hl-hl ) { 0000405D } dup .
 + push dup .
 + pop ;
\begin_inset Newline newline
\end_inset

: um+ ( hln-hl ) { 000040BD } .
 + push dup dup or .
 + pop ;
\begin_inset Newline newline
\end_inset

: u* ( nn-hl ) { 0000411D } a! clc dup push dup or dup pop d# 17 for
\begin_inset Newline newline
\end_inset

begin push d2* a -if 2* a! pop dup push .
 + push d# 0 .
 + pop pop
\begin_inset Newline newline
\end_inset

*next drop ; then 2* a! pop next drop ; { 0000433D } [ -cy ]
\begin_inset Newline newline
\end_inset

: abs ( n-n ) { 0000033D } -if
\begin_inset Newline newline
\end_inset

: neg ( n-n ) { 0000035D } - d# 1 .
 + then ;
\begin_inset Newline newline
\end_inset

: *.
 ( ff-f ) { 000003BD } over over or push abs swap abs u* d2* d2*
\begin_inset Newline newline
\end_inset

drop pop -if drop neg ; then drop ; { 000004DD } [ +cy ]
\begin_inset Newline newline
\end_inset

: u/mod ( hld-rq ) { 000044DD } clc neg
\begin_inset Newline newline
\end_inset

: -u/mod { 0000451D } a! d# 17 push begin begin dup .
 + push dup .
\begin_inset Newline newline
\end_inset

+ dup a .
 + -if drop pop *next dup .
 + ; then over or or pop next
\begin_inset Newline newline
\end_inset

dup .
 + ; { 0000467D } ( -cy )
\begin_inset Newline newline
\end_inset

: try { 0000467D } right b! @b @b u* @b um+ @b u/mod !b !b try ; { 0000475D
 }
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00353400 ) D# 1357 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00353800 ) D# 1358 code{ 
\begin_inset Newline newline
\end_inset

( multiply exerciser ) [ h# 00000000 org ]
\begin_inset Newline newline
\end_inset

: dec ( n-n ) d# -1 .
 + ;
\begin_inset Newline newline
\end_inset

: +or ( nn-n ) over - and or ;
\begin_inset Newline newline
\end_inset

: try ( abr-ab bad ) { 0000009D } right a! ( 12033 ! ) push dup ! over
\begin_inset Newline newline
\end_inset

! pop dup ! push over ! dup @ or @ pop or +or ;
\begin_inset Newline newline
\end_inset

: test ( abr-abr ) dup push try if pop ; then drop pop
\begin_inset Newline newline
\end_inset

: poll @b h# 00000200 and if up b! @b push ;' io b! then drop
\begin_inset Newline newline
\end_inset

: run ( abr-abr ) { 0000035D } if dec test ; then drop if dec over
\begin_inset Newline newline
\end_inset

dec test ; then drop dec if ( -1 ) h# 0001FFFF over dec test ; then
\begin_inset Newline newline
\end_inset

drop h# 0000600D ; { 0000053D }
\begin_inset Newline newline
\end_inset

: go { 0000053D } io b! ( 20000 ) h# 0001FFFF ( -1 ) h# 0001FFFF over
\begin_inset Newline newline
\end_inset

dec run ; { br }
\begin_inset Newline newline
\end_inset

: -u/mod ( old ) { 000005FD } a! d# 17 push dup .
 begin begin { cr }
\begin_inset Newline newline
\end_inset

+ push dup .
 + dup a .
 + -if drop pop dup *next + ; then over or or
\begin_inset Newline newline
\end_inset

pop dup next + ; { 0000079D } }block
\begin_inset Newline newline
\end_inset

( 00353C00 ) D# 1359 shadow{ 
\begin_inset Newline newline
\end_inset

: try ( exercises slave node given a test vector.
 for the hardware
\begin_inset Newline newline
\end_inset

version a is unsigned and b is signed.
 but the divide is unsigned
\begin_inset Newline newline
\end_inset

so b is limited to the largest positive number.
 ) }block
\begin_inset Newline newline
\end_inset

( 00354000 ) D# 1360 code{ 
\begin_inset Newline newline
\end_inset

( serdes test ) [ h# 000000AA org ] data a! h# 0003FFFE dup ! up a!
\begin_inset Newline newline
\end_inset

begin @ drop unext ( rdlu ) [ d# 0 org ]
\begin_inset Newline newline
\end_inset

: try io b! h# 00020000 !b h# 00000147 a! d# 0 d# 10000 for d# 1 +
\begin_inset Newline newline
\end_inset

dup a! next ;
\begin_inset Newline newline
\end_inset

: start @ io b!
\begin_inset Newline newline
\end_inset

: test h# 0002AAAA @b or ! test .
 .
 .
 .
 down a! .
 .
 start }block
\begin_inset Newline newline
\end_inset

( 00354400 ) D# 1361 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00354800 ) D# 1362 code{ 
\begin_inset Newline newline
\end_inset

( serdes test { 0000004F } ) [ h# 000000AA org ] data a! h# 00033333
\begin_inset Newline newline
\end_inset

dup ! up a! h# 00020000 !b begin dup .
 .
 .
 .
 .
 .
 .
 .
 .
 .
 .
 .
 .
 .
 .
\begin_inset Newline newline
\end_inset

.
 .
 .
 .
 .
 .
 ! unext .
 .
 .
 .
 .
 .
 .
 }block
\begin_inset Newline newline
\end_inset

( 00354C00 ) D# 1363 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00355000 ) D# 1364 code{ 
\begin_inset Newline newline
\end_inset

( spi flash writer michael + greg 2.1 ) [ d# 0 org ]
\begin_inset Newline newline
\end_inset

: 2o ( dw-dw' ) { 0000001D } obit 2* obit ;
\begin_inset Newline newline
\end_inset

: wait ( dw-dw ) { 0000005D } select dup begin drop @b -until drop
\begin_inset Newline newline
\end_inset

select ;
\begin_inset Newline newline
\end_inset

: 2cmd ( dw-d ) { 000000DD } select 8obits
\begin_inset Newline newline
\end_inset

: cmd ( dw-d ) select
\begin_inset Newline newline
\end_inset

: !8 ( dw-d ) 8obits drop ;
\begin_inset Newline newline
\end_inset

: set ( -d ) { 0000017D } io b! ( fast ) d# 5 ;
\begin_inset Newline newline
\end_inset

: fet ( ah al-d ) { 000001DD } push push set ( read ) h# 00000C00 cmd
\begin_inset Newline newline
\end_inset

pop !8 pop 8obits !8 ;
\begin_inset Newline newline
\end_inset

: +wr ( -d ) { 0000029D } set ( wren+wrsr ) h# 00001804 2cmd { indent }
\begin_inset Newline newline
\end_inset

( hi8 zero ) dup !8 ( ebsy ) h# 0001C000 cmd ;
\begin_inset Newline newline
\end_inset

: aaip ( d-d ) { 0000035D } h# 0002B400 wait !8 ;
\begin_inset Newline newline
\end_inset

: x8p ( hln-d asrc ) { 000003BD } +wr ( wren+aaip ) h# 00001AB4 2cmd
\begin_inset Newline newline
\end_inset

{ cr }
\begin_inset Newline newline
\end_inset

drop push push push set pop !8 pop 8obits { cr }
\begin_inset Newline newline
\end_inset

!8 ahead begin aaip [ swap ] then d# 7 for { indent }
\begin_inset Newline newline
\end_inset

pop dup push push @+ { indent }
\begin_inset Newline newline
\end_inset

begin 2o 2* next push aaip pop { indent }
\begin_inset Newline newline
\end_inset

d# 7 pop dup push or push { indent }
\begin_inset Newline newline
\end_inset

begin 2o 2* next drop next next { cr }
\begin_inset Newline newline
\end_inset

( wrdi+dbsy ) h# 00001200 wait 2cmd rdl- ; { 0000073D }
\begin_inset Newline newline
\end_inset

: ers { 0000073D } +wr ( wren+eras ) h# 00001980 2cmd dup select ;
\begin_inset Newline newline
\end_inset

{ 000007BD } }block
\begin_inset Newline newline
\end_inset

( 00355400 ) D# 1365 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00355800 ) D# 1366 code{ 
\begin_inset Newline newline
\end_inset

( take adc data ) [ d# 0 org ]
\begin_inset Newline newline
\end_inset

: sam+ ( -n ) { 0000001D { 00002ABF } } h# 00002155 { 000C2ABF }
\begin_inset Newline newline
\end_inset

: s+- ( k-n ) io b! !b up b! !b @b ;
\begin_inset Newline newline
\end_inset

: sam- ( -n ) { 000000DD { 00012ABF } } h# 00002955 { 000D2ABF } s+-
\begin_inset Newline newline
\end_inset

; { br }
\begin_inset Newline newline
\end_inset

: sam { 0000011D } h# 00000020 a! sam+ sam- d# 11 2* for { cr }
\begin_inset Newline newline
\end_inset

push sam+ dup - pop .
 + ( !+ ) push { cr }
\begin_inset Newline newline
\end_inset

push sam- dup - pop .
 + pop + !+ next ; { 000002DD } { br }
\begin_inset Newline newline
\end_inset

[ exit ] sam+ drop }block
\begin_inset Newline newline
\end_inset

( 00355C00 ) D# 1367 shadow{ 
\begin_inset Newline newline
\end_inset

( this block supports taking of data manually for a/d transfer function.
\begin_inset Newline newline
\end_inset

to use it, put a/d in the desired mode by editing the constants in
\begin_inset Newline newline
\end_inset

sam+ and - then set desired voltage and execute sam.
 you will find
\begin_inset Newline newline
\end_inset

a sequence of samples stored in ram at { 0000040F } ) { br }
\begin_inset Newline newline
\end_inset

( original version sampled each half cycle of the incoming clock.
 )
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00356000 ) D# 1368 code{ 
\begin_inset Newline newline
\end_inset

( generate dac waves ) [ d# 0 org ]
\begin_inset Newline newline
\end_inset

: dly { 0000001D } d# 100 for unext ;
\begin_inset Newline newline
\end_inset

: sano ( n-n ) h# 0003FFDF and ; h# 00000010 or ;
\begin_inset Newline newline
\end_inset

: tri ( n ) { 000000FD } push h# 00000155 d# 0 begin { cr }
\begin_inset Newline newline
\end_inset

d# 510 for over or dup sano !b { indent }
\begin_inset Newline newline
\end_inset

dly over or d# 1 .
 + next { cr }
\begin_inset Newline newline
\end_inset

d# 510 for over or dup sano !b { indent }
\begin_inset Newline newline
\end_inset

dly over or d# -1 .
 + next next drop drop ;
\begin_inset Newline newline
\end_inset

: try { 0000039D } io b!
\begin_inset Newline newline
\end_inset

: sing { 000003DD } d# 1000 tri
\begin_inset Newline newline
\end_inset

: poll { 0000041D } @b h# 00002000 and if down b! @b push ;' io b!
\begin_inset Newline newline
\end_inset

then drop sing ;
\begin_inset Newline newline
\end_inset

: haul { 0000053D } io b! d# -1 dup push dup push dup push dup push
\begin_inset Newline newline
\end_inset

dup push dup push dup push dup push push h# 00000155 h# 000000AA over
\begin_inset Newline newline
\end_inset

over over over over over ( / ) dup dup
\begin_inset Newline newline
\end_inset

: spin { 000006DD } begin !b ( .
 .
 ) unext ( !b !b !b !b !b !b !b !b )
\begin_inset Newline newline
\end_inset

spin ; { 000006FD } [ exit ] { cr }
\begin_inset Newline newline
\end_inset

h# 00000155 h# 000001D5 h# 00000055 h# 000000D5 h# 000000AA h# 000000D5
\begin_inset Newline newline
\end_inset

h# 00000055 h# 000001D5 ( / ) }block
\begin_inset Newline newline
\end_inset

( 00356400 ) D# 1369 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00356800 ) D# 1370 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00356C00 ) D# 1371 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00357000 ) D# 1372 code{ 
\begin_inset Newline newline
\end_inset

( ide via async boot ) [ d# 0 org ]
\begin_inset Newline newline
\end_inset

: obit ( dwn-dw ) { 0000001D } !b over push delay ;
\begin_inset Newline newline
\end_inset

: word ( dw-d ) { 0000005D } leap drop leap drop leap drop drop ;
\begin_inset Newline newline
\end_inset

: obyt ( dw-dwx ) { 000000DD } then then then d# 3 obit drop d# 7 for
\begin_inset Newline newline
\end_inset

dup d# 1 and d# 3 or obit drop 2/ next d# 2 obit ;
\begin_inset Newline newline
\end_inset

: -out { 0000023D } ser-exec ( rdl- ) ; { 0000025D } { br }
\begin_inset Newline newline
\end_inset

: ok { 0000025D } h# 00031416 word -out ;
\begin_inset Newline newline
\end_inset

: fet { 000002BD } d# 0
\begin_inset Newline newline
\end_inset

: pump ( n ) for @+ word next -out ;
\begin_inset Newline newline
\end_inset

: stat { 0000037D } d# 9 pump ;
\begin_inset Newline newline
\end_inset

: bstk { 000003BD } @ push ..
 @ word pop dup push word ..
 ( @p+.push )
\begin_inset Newline newline
\end_inset

h# 000049BA ! d# 7 ..
 dup push ! ..
 @p+ ! ..
 ( /+ ) begin !p+ .
 .
\begin_inset Newline newline
\end_inset

unext ..
 begin @ word ..
 next ..
 @p+ ! pop ..
 ( /+ ) pop @p+ ; ..
\begin_inset Newline newline
\end_inset

! -out ; { 0000059D } }block
\begin_inset Newline newline
\end_inset

( 00357400 ) D# 1373 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00357800 ) D# 1374 code{ 
\begin_inset Newline newline
\end_inset

( ide via sync boot ) [ d# 0 org ]
\begin_inset Newline newline
\end_inset

: 1bit ( wx-w'x ) drop -if d# 3 ahead [ swap ] then d# 2 { cr }
\begin_inset Newline newline
\end_inset

then !b 2* dup ;
\begin_inset Newline newline
\end_inset

: word ( w ) { 000000DD } d# 8 dup for begin drop @b -until 1bit begin
\begin_inset Newline newline
\end_inset

drop @b - -until 1bit next drop drop ;
\begin_inset Newline newline
\end_inset

: +out ( x ) { 000001FD } begin drop @b - -until drop d# 3 !b ;
\begin_inset Newline newline
\end_inset

: -out ( x ) { 0000027D } begin drop @b -until { cr }
\begin_inset Newline newline
\end_inset

drop d# 2 !b d# 1 !b ser-exec ; { br }
\begin_inset Newline newline
\end_inset

: ok { 0000031D } dup +out h# 00031416 word dup -out ;
\begin_inset Newline newline
\end_inset

: fet { 0000039D } d# 0
\begin_inset Newline newline
\end_inset

: pump ( n ) dup +out for @+ word next dup -out ;
\begin_inset Newline newline
\end_inset

: stat { 0000047D } d# 9 pump ;
\begin_inset Newline newline
\end_inset

: bstk { 000004BD } +out @ dup push .
 @ word word ( / @p+.push ) h# 000049BA
\begin_inset Newline newline
\end_inset

! d# 7 .
 ( / ) dup push ! .
 ( / ) @p+ ! .
 .
 ( /+ ) begin !p+ .
 .
 unext
\begin_inset Newline newline
\end_inset

( / ) begin @ word ( / ) next ( / ) @p+ ! pop .
 ( /+ ) pop @p+ ; ( / )
\begin_inset Newline newline
\end_inset

! -out ; { 0000069D } }block
\begin_inset Newline newline
\end_inset

( 00357C00 ) D# 1375 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00358000 ) D# 1376 code{ 
\begin_inset Newline newline
\end_inset

( ide wire node ) [ d# 0 org ]
\begin_inset Newline newline
\end_inset

: fet { 0000001D } @p+ !b @ .
 fet !b @b ! ; { 0000007D } [ d# 5 org ]
\begin_inset Newline newline
\end_inset

: sto { 000000BD } @p+ !b @ .
 sto !b @ !b ; { 0000011D } [ h# 0000000A
\begin_inset Newline newline
\end_inset

org ]
\begin_inset Newline newline
\end_inset

: ins { 0000015D } @p+ !b @ .
 ins !b ; { 000001BD } [ h# 0000000D org ]
\begin_inset Newline newline
\end_inset

: psh { 000001BD } @p+ !b @ .
 psh !b ; { 0000021D } [ h# 00000010 org ]
\begin_inset Newline newline
\end_inset

: stk { 0000021D } @p+ !b .
 .
 stk d# 9 for @b ! unext ; { cr }
\begin_inset Newline newline
\end_inset

{ 000002BD } }block
\begin_inset Newline newline
\end_inset

( 00358400 ) D# 1377 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00358800 ) D# 1378 code{ 
\begin_inset Newline newline
\end_inset

( ide last guy ) [ h# 0000001E org ]
\begin_inset Newline newline
\end_inset

: focus ( i0 ) { 000003DD } @p+ !b !b ; ( / ) focus ; [ d# 0 org ]
\begin_inset Newline newline
\end_inset

: fet { 0000001D } @p+ focus ( /+ ) @p+ a! @ !p+ ( / ) @ !b @b @p+
\begin_inset Newline newline
\end_inset

( /+ ) ; ( / ) !b ! ;
\begin_inset Newline newline
\end_inset

: sto { 000000BD } @p+ focus ( /+ ) @p+ a! .
 @p+ ( / ) @ !b @ .
 ( / )
\begin_inset Newline newline
\end_inset

!b @p+ !b ; ( /+ ) ! ;
\begin_inset Newline newline
\end_inset

: ins { 0000015D } @ focus ; ( / ) ins ins
\begin_inset Newline newline
\end_inset

: psh { 000001BD } @p+ focus ( /+ ) @p+ ; ( / ) @ !b ;
\begin_inset Newline newline
\end_inset

: stk { 0000021D } @p+ focus ( /+ ) !p+ dup push !p+ ( / ) @b @b !
\begin_inset Newline newline
\end_inset

dup ( / ) ! ( @p+.push ) h# 000049BA !b d# 7 ( / ) dup push !b .
 ( / )
\begin_inset Newline newline
\end_inset

@p+ !b ( /+ ) begin !p+ .
 .
 unext ( / ) begin @b ! unext .
 ( / ) @p+
\begin_inset Newline newline
\end_inset

!b !b ; ( /+ ) pop @p+ ; { cr }
\begin_inset Newline newline
\end_inset

( if past size-2 not ok- ) { 0000039D } }block
\begin_inset Newline newline
\end_inset

( 00358C00 ) D# 1379 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00359000 ) D# 1380 code{ 
\begin_inset Newline newline
\end_inset

( common ) { cr }
\begin_inset Newline newline
\end_inset

[ h# 000001D5 org ] { -cr } : r--- { cr }
\begin_inset Newline newline
\end_inset

[ h# 00000115 org ] { -cr } : -d-- { cr }
\begin_inset Newline newline
\end_inset

[ h# 00000175 org ] { -cr } : --l- { cr }
\begin_inset Newline newline
\end_inset

[ h# 00000145 org ] { -cr } : ---u { cr }
\begin_inset Newline newline
\end_inset

[ h# 000001A5 org ] { -cr } : rdlu ( right down left up ) { cr }
\begin_inset Newline newline
\end_inset

[ h# 000001B5 org ] { -cr } : rdl- ( right down left ) { cr }
\begin_inset Newline newline
\end_inset

[ h# 00000185 org ] { -cr } : rd-u ( right down up ) { cr }
\begin_inset Newline newline
\end_inset

[ h# 00000195 org ] { -cr } : rd-- ( right down ) }block
\begin_inset Newline newline
\end_inset

( 00359400 ) D# 1381 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00359800 ) D# 1382 code{ 
\begin_inset Newline newline
\end_inset

( polynomial approximation )
\begin_inset Newline newline
\end_inset

: poly ( xn-xy ) pop a! push @+ a begin { indent }
\begin_inset Newline newline
\end_inset

push *.
 pop a! @+ + a next push ; }block
\begin_inset Newline newline
\end_inset

( 00359C00 ) D# 1383 shadow{ 
\begin_inset Newline newline
\end_inset

: poly ( xn-xy ) { cr }
\begin_inset Newline newline
\end_inset

( evaluation of chebyshev polynomials using ) { cr }
\begin_inset Newline newline
\end_inset

( the horner scheme.
 ) { br }
\begin_inset Newline newline
\end_inset

( x is the input value.
 n is the length of ) { cr }
\begin_inset Newline newline
\end_inset

( the coefficient table minus 2.
 coefficient ) { cr }
\begin_inset Newline newline
\end_inset

( table follows inline, and execution ) { cr }
\begin_inset Newline newline
\end_inset

( continues after the final table entry.
 x is ) { cr }
\begin_inset Newline newline
\end_inset

( left on the stack under the result, y.
 ) { br }
\begin_inset Newline newline
\end_inset

( for example...
 )
\begin_inset Newline newline
\end_inset

: cos ( f-f' ) { cr }
\begin_inset Newline newline
\end_inset

( hart 3300 ) { cr }
\begin_inset Newline newline
\end_inset

( -0.0043 0.0794 -0.6459 0.5708 ) { indent }
\begin_inset Newline newline
\end_inset

2* 2* .
 triangle dup *.
 d# 2 poly { indent }
\begin_inset Newline newline
\end_inset

[ d# -281 , d# 5203 , d# -42329 , d# 37407 , ] { indent }
\begin_inset Newline newline
\end_inset

push drop pop *.
 + ; }block
\begin_inset Newline newline
\end_inset

( 0035A000 ) D# 1384 code{ 
\begin_inset Newline newline
\end_inset

( interpolate )
\begin_inset Newline newline
\end_inset

: interp ( ims-v ) dup push push over { indent }
\begin_inset Newline newline
\end_inset

begin 2/ unext a! { indent }
\begin_inset Newline newline
\end_inset

and push @+ dup @+ - .
 + - { indent }
\begin_inset Newline newline
\end_inset

pop a! dup dup or { indent }
\begin_inset Newline newline
\end_inset

begin +* unext push drop pop .
 + ; }block
\begin_inset Newline newline
\end_inset

( 0035A400 ) D# 1385 shadow{ 
\begin_inset Newline newline
\end_inset

: interp ( ims-v ) { cr }
\begin_inset Newline newline
\end_inset

( to determine values for m and s ...
 ) { cr }
\begin_inset Newline newline
\end_inset

( let l be number of meaningful input bits.
 ) { cr }
\begin_inset Newline newline
\end_inset

( let n be power of 2 where 2**n + 1 is the ) { cr }
\begin_inset Newline newline
\end_inset

( number of table entries.
 ) { br }
\begin_inset Newline newline
\end_inset

( s equals l-n-1 ) { cr }
\begin_inset Newline newline
\end_inset

( m equals 2** l-n - 1 ) { br }
\begin_inset Newline newline
\end_inset

( so for example if you have an 8 bit adc, ) { cr }
\begin_inset Newline newline
\end_inset

( l equals 8.
 let n equal 2 for a 5 entry table.
 the table is expected
\begin_inset Newline newline
\end_inset

to be at address 0, ) { cr }
\begin_inset Newline newline
\end_inset

( so to represent 0 to 1800 millivolts...
 ) { br }
\begin_inset Newline newline
\end_inset

[ 0 org 0 , 450 , 900 , 1350 , 1800 , ] { cr }
\begin_inset Newline newline
\end_inset

: mv ( i-n ) h# 0000003F 5 interp ; { br }
\begin_inset Newline newline
\end_inset

[ d# 0 mv ] ( gives ) [ d# 0 ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 128 mv ] ( gives ) [ d# 900 ] { cr }
\begin_inset Newline newline
\end_inset

[ d# 256 mv ] ( gives ) [ d# 1800 ] { cr }
\begin_inset Newline newline
\end_inset

( and intermediate values are interpolated.
 ) }block
\begin_inset Newline newline
\end_inset

( 0035A800 ) D# 1386 code{ 
\begin_inset Newline newline
\end_inset

( fir or iir filter )
\begin_inset Newline newline
\end_inset

: taps ( yxc-y'x' ) pop a! push begin { indent }
\begin_inset Newline newline
\end_inset

@+ @ push a push *.17 pop a! { indent }
\begin_inset Newline newline
\end_inset

push !+ pop .
 + pop next @ a! ; }block
\begin_inset Newline newline
\end_inset

( 0035AC00 ) D# 1387 shadow{ 
\begin_inset Newline newline
\end_inset

: taps ( yxc-y'x' ) { cr }
\begin_inset Newline newline
\end_inset

( for example...
 ) { br }
\begin_inset Newline newline
\end_inset

: fir ( yx-y'x' ) d# 15 taps [ d# -53 , d# 0 , d# 2276 , d# 0 , d# 382
\begin_inset Newline newline
\end_inset

, d# 0 , d# -1706 , d# 0 , d# -1158 , d# 0 , d# 2014 , d# 0 , d# 2406
\begin_inset Newline newline
\end_inset

, d# 0 , d# -1977 , d# 0 , d# -4206 , d# 0 , d# 1289 , d# 0 , d# 6801
\begin_inset Newline newline
\end_inset

, d# 0 , d# 678 , d# 0 , d# -11109 , d# 0 , d# -6250 , d# 0 , d# 23531
\begin_inset Newline newline
\end_inset

, d# 0 , d# 54145 , d# 0 , ] { br }
\begin_inset Newline newline
\end_inset

( 16 taps, 16 coefficients with intermediate ) { cr }
\begin_inset Newline newline
\end_inset

( storage interleaved.
 ) }block
\begin_inset Newline newline
\end_inset

( 0035B000 ) D# 1388 code{ 
\begin_inset Newline newline
\end_inset

( routing; called with 'a relay' )
\begin_inset Newline newline
\end_inset

: relay ( a ) pop a! @+ push @+ zif { indent }
\begin_inset Newline newline
\end_inset

drop ahead ( done ) [ swap ] then { indent }
\begin_inset Newline newline
\end_inset

pop over push @p+ ( ' ) a relay ( ' ) { indent }
\begin_inset Newline newline
\end_inset

!b !b !b begin @+ !b unext
\begin_inset Newline newline
\end_inset

: done then a push a! ; }block
\begin_inset Newline newline
\end_inset

( 0035B400 ) D# 1389 shadow{ 
\begin_inset Newline newline
\end_inset

( relay moves a port executable packet down ) { cr }
\begin_inset Newline newline
\end_inset

( a sequence of nodes linked by their b ) { cr }
\begin_inset Newline newline
\end_inset

( registers.
 the packet consists of a 1-cell ) { cr }
\begin_inset Newline newline
\end_inset

( index, a 1-cell count ) [ less one ] ( of body ) { cr }
\begin_inset Newline newline
\end_inset

( size, and the body cells.
 ) { br }
\begin_inset Newline newline
\end_inset

( a packet ) [ may ] ( be started from memory within ) { cr }
\begin_inset Newline newline
\end_inset

( a node, or it may simply be fed to a port.
 ) { br }
\begin_inset Newline newline
\end_inset

( relay assumes that b points to the next ) { cr }
\begin_inset Newline newline
\end_inset

( node in the chain.
 uses one return stack ) { cr }
\begin_inset Newline newline
\end_inset

( location and four data stack locations.
 ) { cr }
\begin_inset Newline newline
\end_inset

( it must be at the same location in every ) { cr }
\begin_inset Newline newline
\end_inset

( node.
 ) }block
\begin_inset Newline newline
\end_inset

( 0035B800 ) D# 1390 code{ 
\begin_inset Newline newline
\end_inset

( multiply )
\begin_inset Newline newline
\end_inset

: *.17 ( a b - a a*b ) a! d# 16 push dup dup or { indent }
\begin_inset Newline newline
\end_inset

begin +* unext - +* a -if { indent }
\begin_inset Newline newline
\end_inset

drop - 2* ; then drop 2* - ; }block
\begin_inset Newline newline
\end_inset

( 0035BC00 ) D# 1391 shadow{ 
\begin_inset Newline newline
\end_inset

: *.17 ( multiplies a fraction by a fraction, ) { cr }
\begin_inset Newline newline
\end_inset

( giving a fraction, or an integer by a ) { cr }
\begin_inset Newline newline
\end_inset

( fraction, giving an integer.
 note that f1 ) { cr }
\begin_inset Newline newline
\end_inset

( is left in s to be ignored, dropped, or ) { cr }
\begin_inset Newline newline
\end_inset

( reused.
 note that the definition of ) *.
 { cr }
\begin_inset Newline newline
\end_inset

( contains a call to this word.
 ) { br }
\begin_inset Newline newline
\end_inset

( 17 bit fractions --- s.i ffff ffff ffff ffff ) }block
\begin_inset Newline newline
\end_inset

( 0035C000 ) D# 1392 code{ 
\begin_inset Newline newline
\end_inset

( lshift rshift )
\begin_inset Newline newline
\end_inset

: lsh push begin 2* unext ;
\begin_inset Newline newline
\end_inset

: rsh push begin 2/ unext ; }block
\begin_inset Newline newline
\end_inset

( 0035C400 ) D# 1393 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 0035C800 ) D# 1394 code{ 
\begin_inset Newline newline
\end_inset

( triangle )
\begin_inset Newline newline
\end_inset

: triangle ( x-y call with; 2* 2* triangle ) { indent }
\begin_inset Newline newline
\end_inset

h# 00010000 over -if drop .
 + ; then { indent }
\begin_inset Newline newline
\end_inset

drop - .
 + - ; }block
\begin_inset Newline newline
\end_inset

( 0035CC00 ) D# 1395 shadow{ 
\begin_inset Newline newline
\end_inset

: triangle ( assuming an angle expressed as a ) { cr }
\begin_inset Newline newline
\end_inset

( 16 bit fraction of a revolution, ) { cr }
\begin_inset Newline newline
\end_inset

[ 2* 2* triangle ] ( produces a triangle wave ) { cr }
\begin_inset Newline newline
\end_inset

( approximation to the cosine of that angle.
 ) }block
\begin_inset Newline newline
\end_inset

( 0035D000 ) D# 1396 code{ 
\begin_inset Newline newline
\end_inset

( fractional multiply )
\begin_inset Newline newline
\end_inset

: *.
 { 000016FD } ( f1 f2 - f1 f1*f2 ) *.17 { indent }
\begin_inset Newline newline
\end_inset

a 2* -if drop - 2* - ; then { indent }
\begin_inset Newline newline
\end_inset

drop 2* ; }block
\begin_inset Newline newline
\end_inset

( 0035D400 ) D# 1397 shadow{ 
\begin_inset Newline newline
\end_inset

: *.
 ( multiplies a fraction by a fraction, ) { cr }
\begin_inset Newline newline
\end_inset

( giving a fraction, or an integer by a ) { cr }
\begin_inset Newline newline
\end_inset

( fraction, giving an integer.
 note that f1 ) { cr }
\begin_inset Newline newline
\end_inset

( is left in s to be ignored, dropped, or ) { cr }
\begin_inset Newline newline
\end_inset

( reused.
 ) { br }
\begin_inset Newline newline
\end_inset

( 16 bit fractions --- si.
 ffff ffff ffff ffff ) }block
\begin_inset Newline newline
\end_inset

( 0035D800 ) D# 1398 code{ 
\begin_inset Newline newline
\end_inset

( divide ) { cr }
\begin_inset Newline newline
\end_inset

[ +cy ] { 00005A7D } ( enter ea mode )
\begin_inset Newline newline
\end_inset

: clc dup dup or dup .
 + drop ;
\begin_inset Newline newline
\end_inset

: --u/mod clc
\begin_inset Newline newline
\end_inset

: -u/mod ( hld-rq ) a! d# 17 push begin begin { indent }
\begin_inset Newline newline
\end_inset

dup .
 + .
 push dup .
 + { indent }
\begin_inset Newline newline
\end_inset

dup a .
 + -if { indent }
\begin_inset Newline newline
\end_inset

drop pop *next dup .
 + ; then { indent }
\begin_inset Newline newline
\end_inset

over or or .
 pop next dup .
 + ; { cr }
\begin_inset Newline newline
\end_inset

[ -cy ] { 00001C3D } ( exit ea mode ) }block
\begin_inset Newline newline
\end_inset

( 0035DC00 ) D# 1399 shadow{ 
\begin_inset Newline newline
\end_inset

: clc ( clears the carry bit for addition in ) { cr }
\begin_inset Newline newline
\end_inset

( ea mode.
 ) { br }
\begin_inset Newline newline
\end_inset

( the following defines u/mod in ram ...
 ) { cr }
\begin_inset Newline newline
\end_inset

: u/mod ( hld-rq ) - d# 1 .
 + --u/mod ; { br }
\begin_inset Newline newline
\end_inset

( if the divisor is a constant, just negate ) { cr }
\begin_inset Newline newline
\end_inset

( it at edit or compile time.
 ) }block
\begin_inset Newline newline
\end_inset

( 0035E000 ) D# 1400 code{ 
\begin_inset Newline newline
\end_inset

( g18 compiler ) :# h 28 :# ip 27 :# slot 4 :# call? 0 :# cal 270080062
\begin_inset Newline newline
\end_inset

:# com 16 [ macro ]
\begin_inset Newline newline
\end_inset

: !7 h# 00BD0489 3, h# FFFFFFFC , < drop > ;
\begin_inset Newline newline
\end_inset

: 2*s ?lit h# 0000E0C1 2, 1, ;
\begin_inset Newline newline
\end_inset

: call ( nn ) < ?dup > h# 000000B8 1, , h# 000000E9 1, [ cal ] @ here
\begin_inset Newline newline
\end_inset

d# 3 + - + , ; [ forth ]
\begin_inset Newline newline
\end_inset

: swap swap ;
\begin_inset Newline newline
\end_inset

: eras ( an ) push h# 000061FC ( call a9 ) swap block pop blks fill
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset

: memory ( n-a ) [ h# 00000240 - ] and [ com ] @ 2* h# 00008000 + block
\begin_inset Newline newline
\end_inset

+ ; [ h# 00008000 nnc d# 2 * eras ]
\begin_inset Newline newline
\end_inset

: org ( n ) dup [ h ] ! [ ip ] !
\begin_inset Newline newline
\end_inset

: break d# 4 [ slot ] ! ;
\begin_inset Newline newline
\end_inset

: o ( n ) d# 6 for d# 10 /mod next d# 6 for d# 8 * + next
\begin_inset Newline newline
\end_inset

: p, ( n ) [ h ] @ memory ! [ h ] @ d# 1 over + over or h# 0000007F
\begin_inset Newline newline
\end_inset

and or [ h ] ! ;
\begin_inset Newline newline
\end_inset

: s4 [ h ] @ [ ip ] ! d# 13 2*s dup [ call? ] ! p, d# 1 [ slot ] !
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset

: s0 d# 13 2*s
\begin_inset Newline newline
\end_inset

: sn dup [ call? ] ! [ ip ] @ memory +! d# 1 [ slot ] +! ;
\begin_inset Newline newline
\end_inset

: s1 d# 8 2*s sn ;
\begin_inset Newline newline
\end_inset

: s2 d# 3 2*s sn ;
\begin_inset Newline newline
\end_inset

: s3 dup d# 3 and drop if d# 7 sn s4 ; then d# 4 / sn ;
\begin_inset Newline newline
\end_inset

: i, [ slot ] @ jump s0 s1 s2 s3 s4 }block
\begin_inset Newline newline
\end_inset

( 0035E400 ) D# 1401 shadow{ 
\begin_inset Newline newline
\end_inset

( g18 target compiler ) [ includes support for g18 addressing see
\begin_inset Newline newline
\end_inset

d# 1404 ]
\begin_inset Newline newline
\end_inset

: h ( address of next available word in target memory here )
\begin_inset Newline newline
\end_inset

: ip ( address of current instruction word )
\begin_inset Newline newline
\end_inset

: slot ( next available instruction slot )
\begin_inset Newline newline
\end_inset

: call? ( was last instruction a call ? )
\begin_inset Newline newline
\end_inset

: call a ( compile a call )
\begin_inset Newline newline
\end_inset

: eras ( fills g18 memory with call 155 number )
\begin_inset Newline newline
\end_inset

: 2*s n ( shift left n bits )
\begin_inset Newline newline
\end_inset

: memory n-a ( host address for target memory )
\begin_inset Newline newline
\end_inset

: org n ( set current target memory location )
\begin_inset Newline newline
\end_inset

: break ( break in emulator only )
\begin_inset Newline newline
\end_inset

: p, n ( compile pattern into target memory )
\begin_inset Newline newline
\end_inset

: s0-s4 ( assemble opcode into slot 0-3 )
\begin_inset Newline newline
\end_inset

: i, ( assemble opcode into next slot *note** simple code jump table
\begin_inset Newline newline
\end_inset

using ) [ jump ] }block
\begin_inset Newline newline
\end_inset

( 0035E800 ) D# 1402 code{ 
\begin_inset Newline newline
\end_inset

( target )
\begin_inset Newline newline
\end_inset

: cnt 2/ d# -1 + ;
\begin_inset Newline newline
\end_inset

: defer ( -b ) pop ;
\begin_inset Newline newline
\end_inset

: execute ( b ) push ;
\begin_inset Newline newline
\end_inset

: f! ( bn ) [ sp ] + ! ;
\begin_inset Newline newline
\end_inset

: f@ ( n-b ) [ sp ] + @ ;
\begin_inset Newline newline
\end_inset

: class ( b ) [ last d# 1 + ] ! ;
\begin_inset Newline newline
\end_inset

: empty empt
\begin_inset Newline newline
\end_inset

: host d# 0 class [ d# 6 f@ ] nop [ d# 4 f@ ] nop [ d# 13 f@ ] nop
\begin_inset Newline newline
\end_inset

: functions ( bbb ) d# 13 f! d# 4 f! d# 6 f! ;
\begin_inset Newline newline
\end_inset

: .
 h# 0000001C i, ; ( nop )
\begin_inset Newline newline
\end_inset

: hhere here ;
\begin_inset Newline newline
\end_inset

: ..
 [ slot ] @ d# 4 or drop if .
 ..
 ; then d# 0 [ call? ] ! ;
\begin_inset Newline newline
\end_inset

: here ..
 [ h ] @ h# 000003FF and ; [ hhere ]
\begin_inset Newline newline
\end_inset

: report here d# 32 * [ d# 13 d# 16 + ] + !7 ;
\begin_inset Newline newline
\end_inset

: c18 ( b ) d# 1 f@ [ d# 0 + ] functions ;
\begin_inset Newline newline
\end_inset

: +cy here h# 00000200 over - and or org ;
\begin_inset Newline newline
\end_inset

: -cy here [ h# 00000200 - ] and org ;
\begin_inset Newline newline
\end_inset

: await [ com ] @ idle [ cal ] @ execute ; }block
\begin_inset Newline newline
\end_inset

( 0035EC00 ) D# 1403 shadow{ 
\begin_inset Newline newline
\end_inset

: defer -a ( byte address of the compiled code that follows -- used
\begin_inset Newline newline
\end_inset

for forward referencing )
\begin_inset Newline newline
\end_inset

: execute a ( code at this address )
\begin_inset Newline newline
\end_inset

: f! an ( store address of code executed when a word with this function
\begin_inset Newline newline
\end_inset

is interpreted )
\begin_inset Newline newline
\end_inset

: f@ n-a ( fetch address of function code )
\begin_inset Newline newline
\end_inset

: class a ( store address of code to be executed for each word subsequently
\begin_inset Newline newline
\end_inset

defined )
\begin_inset Newline newline
\end_inset

: empty ( redefine empty to restore altered functions )
\begin_inset Newline newline
\end_inset

: host ( change context back to colorforth )
\begin_inset Newline newline
\end_inset

: functions aa ( store functions in kernel specific way )
\begin_inset Newline newline
\end_inset

: c18 ( save green word and number functions.
 set green short-number
\begin_inset Newline newline
\end_inset

to n, compile to call.
 target words are executed to assemble instructions )
\begin_inset Newline newline
\end_inset

: .
 ( nop used to fill instruction words )
\begin_inset Newline newline
\end_inset

: nops ( fills rest of word with nops )
\begin_inset Newline newline
\end_inset

: here -a ( starts new instruction word.
 leaves target address as number )
\begin_inset Newline newline
\end_inset

: await ( generates call to node's idle ports.
 ) }block
\begin_inset Newline newline
\end_inset

( 0035F000 ) D# 1404 code{ 
\begin_inset Newline newline
\end_inset

( g18 jump instructions )
\begin_inset Newline newline
\end_inset

: 9same ( axa-ax ) push over pop - or [ h# 00000200 ] and drop ;
\begin_inset Newline newline
\end_inset

: j3 .
\begin_inset Newline newline
\end_inset

: j0 i, [ ip ] @ memory +! break ;
\begin_inset Newline newline
\end_inset

: j1 [ h ] @ 9same if over h# 00000100 and drop if swap h# 000000FF
\begin_inset Newline newline
\end_inset

and swap j0 ; then then .
 .
 j3 ;
\begin_inset Newline newline
\end_inset

: j2 over h# 00000155 or [ h ] @ or h# 000003F8 and drop if .
 j3 ;
\begin_inset Newline newline
\end_inset

then swap d# 7 and swap j0 ;
\begin_inset Newline newline
\end_inset

: -adr ( an ) swap h# 00000155 or swap [ slot ] @ jump j0 j1 j2 j3
\begin_inset Newline newline
\end_inset

j0
\begin_inset Newline newline
\end_inset

: adr ( n-n ) [ slot ] @ d# 3 or drop if i, [ ip ] @ d# 8 * [ h ] @
\begin_inset Newline newline
\end_inset

[ ip ] @ negate + + d# 8 * [ slot ] @ + break ; then .
 adr ;
\begin_inset Newline newline
\end_inset

: @h ( n-a ) d# 8 /mod + ;
\begin_inset Newline newline
\end_inset

: f3 ( an ) over h# 00000155 or over @h or h# 000002F8 and drop if
\begin_inset Newline newline
\end_inset

abort ; then swap d# 7 and swap d# 8 / memory +! ;
\begin_inset Newline newline
\end_inset

: f2 dup @h 9same if over h# 00000100 and drop if swap h# 000000FF
\begin_inset Newline newline
\end_inset

and swap
\begin_inset Newline newline
\end_inset

: f1 d# 8 / memory +! ; then then abort ;
\begin_inset Newline newline
\end_inset

: then ( n ) here h# 00000155 or swap d# 8 /mod swap jump f1 f1 f2
\begin_inset Newline newline
\end_inset

f3 }block
\begin_inset Newline newline
\end_inset

( 0035F400 ) D# 1405 shadow{ 
\begin_inset Newline newline
\end_inset

[ the g18 uses adr bit d# 9 for mode; d# 8 for i/o; d# 7 for rom.
\begin_inset Newline newline
\end_inset

incrementer maintains bits 0-6, rest are left alone except for return
\begin_inset Newline newline
\end_inset

and slot d# 0 jumps.
 ] { br }
\begin_inset Newline newline
\end_inset

: 9same ( is true if the two addresses match in bit 9 - the extended
\begin_inset Newline newline
\end_inset

arithmetic mode bit.
 )
\begin_inset Newline newline
\end_inset

: -adr an ( assembles jump to known address )
\begin_inset Newline newline
\end_inset

: adr n-a ( assembles forward jump in slot 0,1,2.
 value left on stack
\begin_inset Newline newline
\end_inset

is instr addr * 64 + here-ip + slot.
 )
\begin_inset Newline newline
\end_inset

: @h ( given that vlue value / 8 returns p at time the jump executes.
 )
\begin_inset Newline newline
\end_inset

: then a ( insert address for forward jump ) }block
\begin_inset Newline newline
\end_inset

( 0035F800 ) D# 1406 code{ 
\begin_inset Newline newline
\end_inset

( complex instructions )
\begin_inset Newline newline
\end_inset

: def defer here < call > ;
\begin_inset Newline newline
\end_inset

: call defer ( a ) d# 3 -adr ; [ call cal ! ]
\begin_inset Newline newline
\end_inset

: ; [ call? ] @ dup h# 00006000 or drop if dup h# 00000300 or drop
\begin_inset Newline newline
\end_inset

if dup h# 00000018 or drop if d# 0 and i, break ; then then then dup
\begin_inset Newline newline
\end_inset

2/ and negate [ ip ] @ memory +! ;
\begin_inset Newline newline
\end_inset

: -if ( -a ) d# 7 adr ;
\begin_inset Newline newline
\end_inset

: if ( -a ) d# 6 adr ;
\begin_inset Newline newline
\end_inset

: -until ( a ) d# 7 -adr ;
\begin_inset Newline newline
\end_inset

: until ( a ) d# 6 -adr ;
\begin_inset Newline newline
\end_inset

: -while ( a-aa ) d# 7 adr swap ;
\begin_inset Newline newline
\end_inset

: while ( a-aa ) d# 6 adr swap ;
\begin_inset Newline newline
\end_inset

: zif ( -a ) d# 5 adr ;
\begin_inset Newline newline
\end_inset

: *next ( aa-a ) swap
\begin_inset Newline newline
\end_inset

: next ( a ) d# 5 -adr ;
\begin_inset Newline newline
\end_inset

: unext ( a ) d# 4 i, drop ;
\begin_inset Newline newline
\end_inset

: n defer d# 8 f@ execute
\begin_inset Newline newline
\end_inset

: lit d# 8 i, h# 0003FFFF and ( ok in slot 3 )
\begin_inset Newline newline
\end_inset

: , ( n ) h# 00015555 or p, ;
\begin_inset Newline newline
\end_inset

: for h# 0000001D i,
\begin_inset Newline newline
\end_inset

: begin here ;
\begin_inset Newline newline
\end_inset

: ahead ( -a ) d# 2 adr ;
\begin_inset Newline newline
\end_inset

: end ( a ) d# 2 -adr ;
\begin_inset Newline newline
\end_inset

: leap ( -a ) d# 3 adr ; }block
\begin_inset Newline newline
\end_inset

( 0035FC00 ) D# 1407 shadow{ 
\begin_inset Newline newline
\end_inset

: def -a ( deferred to class.
 executed for every target definition
\begin_inset Newline newline
\end_inset

to compile host code that compiles target call )
\begin_inset Newline newline
\end_inset

: call a ( compile target call )
\begin_inset Newline newline
\end_inset

: ; ( will be executed as a target word.
 the pentium macro has precedence
\begin_inset Newline newline
\end_inset

while compiling )
\begin_inset Newline newline
\end_inset

: if/-if ( leaves address of jump on stack )
\begin_inset Newline newline
\end_inset

: -until a ( jump if positive to ) begin
\begin_inset Newline newline
\end_inset

: zif ( forward ) next ( decrements r and jumps if r! else pops and
\begin_inset Newline newline
\end_inset

falls thru )
\begin_inset Newline newline
\end_inset

: next/for
\begin_inset Newline newline
\end_inset

: n ( executed for green short-numbers.
 all 18-bit target numbers are
\begin_inset Newline newline
\end_inset

short.
 executes white short-number to put interpreted number on stack.
\begin_inset Newline newline
\end_inset

then assembles literal instruction with number in next location.
 inverted
\begin_inset Newline newline
\end_inset

for rom )
\begin_inset Newline newline
\end_inset

: , n ( compile number into target memory )
\begin_inset Newline newline
\end_inset

: ?lit -n ( retrieve previously compiled number )
\begin_inset Newline newline
\end_inset

: begin -a ( starts new instruction word.
 leaves properly formatted
\begin_inset Newline newline
\end_inset

target address )
\begin_inset Newline newline
\end_inset

: ahead ( compiles fwd ref jump resolve w/then )
\begin_inset Newline newline
\end_inset

: leap ( like ahead but compiles a call ) }block
\begin_inset Newline newline
\end_inset

( 00360000 ) D# 1408 code{ 
\begin_inset Newline newline
\end_inset

( instructions )
\begin_inset Newline newline
\end_inset

: target n c18 def class ;
\begin_inset Newline newline
\end_inset

: ex { -cr } : ;' d# 1 i, break ;
\begin_inset Newline newline
\end_inset

: rx
\begin_inset Newline newline
\end_inset

: @p { -cr } : @p+ d# 8 i, ;
\begin_inset Newline newline
\end_inset

: @+ d# 9 i, ;
\begin_inset Newline newline
\end_inset

: @b h# 0000000A i, ;
\begin_inset Newline newline
\end_inset

: @ h# 0000000B i, ;
\begin_inset Newline newline
\end_inset

: !p { -cr } : !p+ h# 0000000C i, ;
\begin_inset Newline newline
\end_inset

: !+ h# 0000000D i, ;
\begin_inset Newline newline
\end_inset

: !b h# 0000000E i, ;
\begin_inset Newline newline
\end_inset

: ! h# 0000000F i, ; }block
\begin_inset Newline newline
\end_inset

( 00360400 ) D# 1409 shadow{ 
\begin_inset Newline newline
\end_inset

( words being redefined for the target computer.
 these host words
\begin_inset Newline newline
\end_inset

can no longer be executed.
 although pentium macros take precedence
\begin_inset Newline newline
\end_inset

during compilation, they will no longer be used.
 )
\begin_inset Newline newline
\end_inset

: g18 ( instructions )
\begin_inset Newline newline
\end_inset

: 0 ( ; ) ....8 ( n ) ..10 ( +* ) ..18 ( dup )
\begin_inset Newline newline
\end_inset

: 1 ( ;' ) ...9 ( @+ ) .11 ( 2* ) ..19 ( pop )
\begin_inset Newline newline
\end_inset

: 2 ( j ) ....a ( @b ) .12 ( 2/ ) ..1a ( over )
\begin_inset Newline newline
\end_inset

: 3 ( call ) .b ( @ ) ..13 ( - ) ...1b ( a )
\begin_inset Newline newline
\end_inset

: 4 ( unext ) c ( !p+ ) 14 ( + ) ...1c ( .
 )
\begin_inset Newline newline
\end_inset

: 5 ( next ) .d ( !+ ) .15 ( and ) .1d ( push )
\begin_inset Newline newline
\end_inset

: 6 ( if ) ...e ( !b ) .16 ( or ) ..1e ( b! )
\begin_inset Newline newline
\end_inset

: 7 ( -if ) ..f ( ! ) ..17 ( drop ) 1f ( a! ) }block
\begin_inset Newline newline
\end_inset

( 00360800 ) D# 1410 code{ 
\begin_inset Newline newline
\end_inset

( port literals and constants )
\begin_inset Newline newline
\end_inset

: right [ h# 000001D5 ] lit ; ( 0101111111 register bits )
\begin_inset Newline newline
\end_inset

: down [ h# 00000115 ] lit ; ( 0110111111 )
\begin_inset Newline newline
\end_inset

: left [ h# 00000175 ] lit ; ( 0111011111 )
\begin_inset Newline newline
\end_inset

: up [ h# 00000145 ] lit ; ( 0111101111 )
\begin_inset Newline newline
\end_inset

: warp [ h# 00000157 ] lit ; ( 0101010111 )
\begin_inset Newline newline
\end_inset

: io h# 0000015D lit ; ( 0111110111 )
\begin_inset Newline newline
\end_inset

: data h# 00000141 lit ; ( 0111101011 port calls )
\begin_inset Newline newline
\end_inset

: center h# 000001A5 lit ;
\begin_inset Newline newline
\end_inset

: top h# 000001B5 lit ;
\begin_inset Newline newline
\end_inset

: side h# 00000185 lit ;
\begin_inset Newline newline
\end_inset

: corner h# 00000195 lit ;
\begin_inset Newline newline
\end_inset

: /mod /mod ;
\begin_inset Newline newline
\end_inset

: spispeed d# 497 ( 0 ) lit ; [ h# 00000000 ] ( 24-bit adrs ) [ d# 4
\begin_inset Newline newline
\end_inset

* d# 262144 /mod ] ( al ah ) [ h# 00000003 ] ( read cmd ) [ d# 256
\begin_inset Newline newline
\end_inset

* + d# 4 * ]
\begin_inset Newline newline
\end_inset

: spicmd ( c.ah ) [ d# 0 + ] lit ;
\begin_inset Newline newline
\end_inset

: spiadr ( al ) [ d# 0 + ] lit ; }block
\begin_inset Newline newline
\end_inset

( 00360C00 ) D# 1411 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00361000 ) D# 1412 code{ 
\begin_inset Newline newline
\end_inset

( more instructions )
\begin_inset Newline newline
\end_inset

: +* h# 00000010 i, ; ( slot 3 ok )
\begin_inset Newline newline
\end_inset

: 2* h# 00000011 i, ;
\begin_inset Newline newline
\end_inset

: 2/ h# 00000012 i, ;
\begin_inset Newline newline
\end_inset

: - h# 00000013 i, ;
\begin_inset Newline newline
\end_inset

: + h# 00000014 i, ; ( slot 3 ok )
\begin_inset Newline newline
\end_inset

: and h# 00000015 i, ;
\begin_inset Newline newline
\end_inset

: or h# 00000016 i, ; ( exclusive-or )
\begin_inset Newline newline
\end_inset

: drop h# 00000017 i, ;
\begin_inset Newline newline
\end_inset

: dup h# 00000018 i, ; ( slot 3 ok )
\begin_inset Newline newline
\end_inset

: pop h# 00000019 i, ;
\begin_inset Newline newline
\end_inset

: over h# 0000001A i, ;
\begin_inset Newline newline
\end_inset

: a h# 0000001B i, ;
\begin_inset Newline newline
\end_inset

: push h# 0000001D i, ;
\begin_inset Newline newline
\end_inset

: b! h# 0000001E i, ;
\begin_inset Newline newline
\end_inset

: a! h# 0000001F i, ; }block
\begin_inset Newline newline
\end_inset

( 00361400 ) D# 1413 shadow{ 
\begin_inset Newline newline
\end_inset

: o ( replaces top-of-stack with 0.
 g18 instructions can't be used
\begin_inset Newline newline
\end_inset

in macros - forth macros take precedence ) }block
\begin_inset Newline newline
\end_inset

( 00361800 ) D# 1414 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00361C00 ) D# 1415 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00362000 ) D# 1416 code{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00362400 ) D# 1417 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00362800 ) D# 1418 code{ 
\begin_inset Newline newline
\end_inset

( math rom anywhere ) [ d# 0 kind ] { br }
\begin_inset Newline newline
\end_inset

[ h# 000000A1 org ] { cr }
\begin_inset Newline newline
\end_inset

{ 0000143D } [ d# 1388 load ] ( relay ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000153D } { -cr } : warm await ; { br }
\begin_inset Newline newline
\end_inset

[ h# 000000B0 org ] { cr }
\begin_inset Newline newline
\end_inset

{ 0000161D } [ d# 1390 load ] ( multiply ) { cr }
\begin_inset Newline newline
\end_inset

{ 000016FD } [ d# 1396 load ] ( fractional multiply ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000179D } [ d# 1386 load ] ( taps ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000189D } [ d# 1384 load ] ( interpolate ) { cr }
\begin_inset Newline newline
\end_inset

{ 000019DD } [ d# 1394 load ] ( triangle ) { cr }
\begin_inset Newline newline
\end_inset

{ 00001A7D } [ d# 1398 load ] ( -u/mod ) { br }
\begin_inset Newline newline
\end_inset

[ h# 000000AA org ] { cr }
\begin_inset Newline newline
\end_inset

{ 0000155D } [ d# 1382 load ] ( polynomial approximation ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000161D } }block
\begin_inset Newline newline
\end_inset

( 00362C00 ) D# 1419 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00363000 ) D# 1420 code{ 
\begin_inset Newline newline
\end_inset

( serdes boot top/bot ) [ d# 6 kind h# 000000AA reset ] { br }
\begin_inset Newline newline
\end_inset

[ h# 000000A1 org ] { cr }
\begin_inset Newline newline
\end_inset

{ 0000143D } [ d# 1388 load ] ( relay ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000153D } { -cr } : warm await ; { cr }
\begin_inset Newline newline
\end_inset

: cold { 0000155D } h# 00003141 a! h# 0003FFFE dup ! rdlu cold ; { br }
\begin_inset Newline newline
\end_inset

{ 0000161D } [ d# 1390 load ] ( multiply ) { cr }
\begin_inset Newline newline
\end_inset

{ 000016FD } [ d# 1396 load ] ( fractional multiply ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000179D } [ d# 1386 load ] ( taps ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000189D } [ d# 1384 load ] ( interpolate ) { cr }
\begin_inset Newline newline
\end_inset

{ 000019DD } [ d# 1394 load ] ( triangle ) { cr }
\begin_inset Newline newline
\end_inset

{ 00001A7D } [ d# 1398 load ] ( -u/mod ) { cr }
\begin_inset Newline newline
\end_inset

{ 00001C3D } }block
\begin_inset Newline newline
\end_inset

( 00363400 ) D# 1421 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00363800 ) D# 1422 code{ 
\begin_inset Newline newline
\end_inset

( sync serial boot side ) [ d# 2 kind h# 000000AA reset ] { cr { 000017FF
 } }
\begin_inset Newline newline
\end_inset

[ h# 000000BE org ] { -cr } : sget { cr }
\begin_inset Newline newline
\end_inset

[ h# 000000A1 org ] { cr }
\begin_inset Newline newline
\end_inset

{ 0000143D } [ d# 1388 load ] ( relay ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000153D } { -cr } : warm await ; { cr }
\begin_inset Newline newline
\end_inset

: cold { 0000155D } h# 000031A5 a! @ @b .
 .
 -if ( 0pin ) { cr }
\begin_inset Newline newline
\end_inset

h# 0003FD85 ( 'rd-u 3fc00 + ) dup push dup begin { cr }
\begin_inset Newline newline
\end_inset

drop @b .
 -if ( /pin ) *next [ swap ] then { cr }
\begin_inset Newline newline
\end_inset

h# 00000185 ( 'rd-u ) push drop push ; then
\begin_inset Newline newline
\end_inset

: ser-exec { 000016DD } ( x-x ) sget push sget a! sget
\begin_inset Newline newline
\end_inset

: ser-copy { 0000173D } push zif ; then { cr }
\begin_inset Newline newline
\end_inset

begin sget ( push sget pop !+ ) !+ next ;
\begin_inset Newline newline
\end_inset

: sget { 000017DD } ( -w ) dup leap leap
\begin_inset Newline newline
\end_inset

: 6in { 0000181D } then then leap leap
\begin_inset Newline newline
\end_inset

: 2in { 0000185D } then then 2* 2* dup begin { cr }
\begin_inset Newline newline
\end_inset

.
 drop @b .
 - -until - d# 2 and dup begin { cr }
\begin_inset Newline newline
\end_inset

.
 drop @b .
 .
 -until d# 2 and 2/ or or ; { br }
\begin_inset Newline newline
\end_inset

{ 0000199D } [ d# 1390 load ] ( multiply ) { cr }
\begin_inset Newline newline
\end_inset

{ 00001A7D } [ d# 1386 load ] ( taps ) { cr }
\begin_inset Newline newline
\end_inset

{ 00001B7D } [ d# 1394 load ] ( triangle ) { cr }
\begin_inset Newline newline
\end_inset

{ 00001C1D } }block
\begin_inset Newline newline
\end_inset

( 00363C00 ) D# 1423 shadow{ 
\begin_inset Newline newline
\end_inset

( sync serial boot side ) { br }
\begin_inset Newline newline
\end_inset

( ser-copy reads one word per loop and the loop counter is the actual
\begin_inset Newline newline
\end_inset

number of words being ) { cr }
\begin_inset Newline newline
\end_inset

( sent ie a count of zero means no words sent ) }block
\begin_inset Newline newline
\end_inset

( 00364000 ) D# 1424 code{ 
\begin_inset Newline newline
\end_inset

( async serial boot top/bot ) [ d# 1 kind h# 000000AA reset ] { cr { 000019FF
 } }
\begin_inset Newline newline
\end_inset

[ h# 000000CB org ] { -cr } : 18ibits { cr }
\begin_inset Newline newline
\end_inset

[ h# 000000A1 org ] { cr }
\begin_inset Newline newline
\end_inset

{ 0000143D } [ d# 1388 load ] ( relay ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000153D } { -cr } : warm await ;
\begin_inset Newline newline
\end_inset

: cold { 0000155D } h# 000031A5 ( 'rdlu ) a! @ @b ..
 -if
\begin_inset Newline newline
\end_inset

: ser-exec { 000015DD } ( x-d ) 18ibits drop push .
 { cr }
\begin_inset Newline newline
\end_inset

18ibits drop a! .
 18ibits
\begin_inset Newline newline
\end_inset

: ser-copy { 0000167D } ( xnx-d ) drop push zif ; then begin { cr }
\begin_inset Newline newline
\end_inset

18ibits drop ( push .
 18ibits drop pop .
 !+ ) !+ ( .
 ) next ; then
\begin_inset Newline newline
\end_inset

drop h# 000001B5 ( 'rdl- ) push push ;
\begin_inset Newline newline
\end_inset

: wait { 0000177D } ( x ) begin .
 drop @b -until .
 drop ;
\begin_inset Newline newline
\end_inset

: sync { 000017DD } ( x-delay ) dup dup wait or - push begin @b .
 -if
\begin_inset Newline newline
\end_inset

.
 drop *next rdl- ; then .
 drop pop - 2/ ;
\begin_inset Newline newline
\end_inset

: start { 000018BD } ( delay word - delay word b ) { cr }
\begin_inset Newline newline
\end_inset

dup wait over dup 2/ .
 + push
\begin_inset Newline newline
\end_inset

: delay { 0000191D } ( nw-nwb ) { cr }
\begin_inset Newline newline
\end_inset

begin @b .
 -if then .
 drop next @b ; { br }
\begin_inset Newline newline
\end_inset

{ 0000197D } [ d# 1426 load ] ( 18ibits ) { cr }
\begin_inset Newline newline
\end_inset

{ 00001B3D } [ d# 1392 load ] ( lsh rsh ) { cr }
\begin_inset Newline newline
\end_inset

{ 00001BBD } }block
\begin_inset Newline newline
\end_inset

( 00364400 ) D# 1425 shadow{ 
\begin_inset Newline newline
\end_inset

( async serial boot top/bot ) { br }
\begin_inset Newline newline
\end_inset

( ser-copy reads one word per loop and the loop counter is the actual
\begin_inset Newline newline
\end_inset

number of words being ) { cr }
\begin_inset Newline newline
\end_inset

( sent ie a count of zero means no words sent ) }block
\begin_inset Newline newline
\end_inset

( 00364800 ) D# 1426 code{ 
\begin_inset Newline newline
\end_inset

( more async serial )
\begin_inset Newline newline
\end_inset

: 18ibits { 0000197D } ( x - delay word x ) { indent }
\begin_inset Newline newline
\end_inset

sync sync dup start leap ( 2bits ) leap
\begin_inset Newline newline
\end_inset

: byte { 00001A1D } then drop start leap
\begin_inset Newline newline
\end_inset

: 4bits { 00001A5D } then leap
\begin_inset Newline newline
\end_inset

: 2bits { 00001A7D } then then leap
\begin_inset Newline newline
\end_inset

: 1bit { 00001A9D } ( nwb-nwb ) then { indent }
\begin_inset Newline newline
\end_inset

push 2/ pop over or { indent }
\begin_inset Newline newline
\end_inset

h# 00020000 and or over push delay ; { cr }
\begin_inset Newline newline
\end_inset

{ 00001B3D } }block
\begin_inset Newline newline
\end_inset

( 00364C00 ) D# 1427 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00365000 ) D# 1428 code{ 
\begin_inset Newline newline
\end_inset

( spi boot top/bot ) [ d# 4 kind h# 000000AA reset host ]
\begin_inset Newline newline
\end_inset

: --- [ h# 0000002A ] lit ;
\begin_inset Newline newline
\end_inset

: --+ [ h# 0000002B ] lit ;
\begin_inset Newline newline
\end_inset

: +-- [ h# 0000003A ] lit ;
\begin_inset Newline newline
\end_inset

: +-+ [ h# 0000003B ] lit ;
\begin_inset Newline newline
\end_inset

: -++ [ h# 0000002F ] lit ; [ target ] { cr }
\begin_inset Newline newline
\end_inset

[ h# 000000A1 org d# 1388 load ] ( relay ) { br }
\begin_inset Newline newline
\end_inset

[ h# 000000C2 org ]
\begin_inset Newline newline
\end_inset

: 8obits ( dw-dw' ) d# 7 for leap ( obit ) 2* *next ;
\begin_inset Newline newline
\end_inset

: ibit { 000018FD } ( dw-dw' ) { indent }
\begin_inset Newline newline
\end_inset

@b .
 -if drop - 2* ; then drop 2* - ;
\begin_inset Newline newline
\end_inset

: half { 0000195D } ( dwc-dw ) !b over for .
 .
 unext ;
\begin_inset Newline newline
\end_inset

: select { 0000199D } ( dw-dw ) -++ half --+ half ;
\begin_inset Newline newline
\end_inset

: obit { 00001A1D } ( dw-dw ) then { indent }
\begin_inset Newline newline
\end_inset

-if +-- half +-+ half ; then
\begin_inset Newline newline
\end_inset

: rbit { 00001ABD } ( dw-dw ) --- half --+ half ;
\begin_inset Newline newline
\end_inset

: 18ibits { 00001B3D } ( d-dw ) dup d# 17 for rbit ibit - next ; { cr }
\begin_inset Newline newline
\end_inset

: u2/ 2/ h# 0001FFFF and ; { cr }
\begin_inset Newline newline
\end_inset

[ h# 000000A9 org ] { cr }
\begin_inset Newline newline
\end_inset

{ 0000153D } { -cr } : warm await ; { cr }
\begin_inset Newline newline
\end_inset

{ 0000155D } [ d# 1430 load ] ( the rest ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000183D } }block
\begin_inset Newline newline
\end_inset

( 00365400 ) D# 1429 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00365800 ) D# 1430 code{ 
\begin_inset Newline newline
\end_inset

( more spi )
\begin_inset Newline newline
\end_inset

: cold { 0000155D } @b - ..
 [ h# 000001B5 ] ( 'rdl- ) -until { indent }
\begin_inset Newline newline
\end_inset

spispeed spiadr push spicmd
\begin_inset Newline newline
\end_inset

: spi-boot { 0000161D } ( dly adrh .
 adrl - dly x ) { indent }
\begin_inset Newline newline
\end_inset

select 8obits 8obits { indent }
\begin_inset Newline newline
\end_inset

drop pop .
 8obits 8obits
\begin_inset Newline newline
\end_inset

: spi-exec { 000016DD } ( dx-dx ) drop 18ibits { indent }
\begin_inset Newline newline
\end_inset

h# 0001E000 .
 + [ h# 000001B5 ] ( 'rdl- ) -until { indent }
\begin_inset Newline newline
\end_inset

push 18ibits a! 18ibits
\begin_inset Newline newline
\end_inset

: spi-copy { 0000179D } ( dn-dx ) push zif ; then begin { indent }
\begin_inset Newline newline
\end_inset

18ibits ( push 18ibits pop !+ ) !+ next dup ; { 0000183D } ( was { 0000185F
 } )
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00365C00 ) D# 1431 shadow{ 
\begin_inset Newline newline
\end_inset

( more spi ) { br }
\begin_inset Newline newline
\end_inset

( spi-copy reads one word per loop and the loop counter is the actual
\begin_inset Newline newline
\end_inset

number of words being ) { cr }
\begin_inset Newline newline
\end_inset

( sent ie a count of zero means no words sent ) }block
\begin_inset Newline newline
\end_inset

( 00366000 ) D# 1432 code{ 
\begin_inset Newline newline
\end_inset

( analog ) [ d# 0 kind ] { br }
\begin_inset Newline newline
\end_inset

[ h# 000000A1 org ] { cr }
\begin_inset Newline newline
\end_inset

{ 0000143D } [ d# 1388 load ] ( relay ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000153D } { -cr } : warm await ; { br }
\begin_inset Newline newline
\end_inset

[ h# 000000B0 org ] { cr }
\begin_inset Newline newline
\end_inset

{ 0000161D } [ d# 1390 load ] ( multiply ) { cr }
\begin_inset Newline newline
\end_inset

{ 000016FD } [ d# 1396 load ] ( fractional multiply ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000179D } [ d# 1434 load ] ( -dac ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000189D } [ d# 1384 load ] ( interpolate ) { cr }
\begin_inset Newline newline
\end_inset

{ 000019DD } [ d# 1394 load ] ( triangle ) { cr }
\begin_inset Newline newline
\end_inset

{ 00001A7D } [ d# 1398 load ] ( -u/mod ) { br }
\begin_inset Newline newline
\end_inset

[ h# 000000AA org ] { cr }
\begin_inset Newline newline
\end_inset

{ 0000155D } [ d# 1382 load ] ( polynomial approximation ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000161D } }block
\begin_inset Newline newline
\end_inset

( 00366400 ) D# 1433 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00366800 ) D# 1434 code{ 
\begin_inset Newline newline
\end_inset

( dac )
\begin_inset Newline newline
\end_inset

: -dac ( legacy entry name below )
\begin_inset Newline newline
\end_inset

: dac27 { 0000179D } ( mcpaw-mcp ) dup push push { indent }
\begin_inset Newline newline
\end_inset

over pop - .
 + push push h# 00000155 { indent }
\begin_inset Newline newline
\end_inset

pop over or a { indent }
\begin_inset Newline newline
\end_inset

begin unext !b .
 { indent }
\begin_inset Newline newline
\end_inset

begin unext !b !b ; }block
\begin_inset Newline newline
\end_inset

( 00366C00 ) D# 1435 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00367000 ) D# 1436 code{ 
\begin_inset Newline newline
\end_inset

( 1-wire ) [ d# 3 kind h# 000000AA org ] { br }
\begin_inset Newline newline
\end_inset

[ h# 0000009E org ]
\begin_inset Newline newline
\end_inset

: rcv ( s-sn ) { 000013DD } a push dup dup a! d# 17 for begin
\begin_inset Newline newline
\end_inset

: bit { 0000143D } @ drop @b -if { indent }
\begin_inset Newline newline
\end_inset

drop - 2* - *next pop a! ; then { indent }
\begin_inset Newline newline
\end_inset

drop 2* next pop a! ; { 0000151D } { br }
\begin_inset Newline newline
\end_inset

[ h# 000000A9 org ]
\begin_inset Newline newline
\end_inset

: warm { 0000153D } await ;
\begin_inset Newline newline
\end_inset

: cold { 0000155D } left center a! .
 io b! { indent }
\begin_inset Newline newline
\end_inset

dup dup h# 000000B7 ( rest ) dup push push d# 16 push { indent }
\begin_inset Newline newline
\end_inset

@ drop @b [ h# 00000185 ] ( side ) -until { indent }
\begin_inset Newline newline
\end_inset

drop a! .
 bit ; { 000016FD } ( rest ) { indent }
\begin_inset Newline newline
\end_inset

push rcv a! rcv push zif ; then { indent }
\begin_inset Newline newline
\end_inset

begin rcv !+ next ; { 000017DD } { br }
\begin_inset Newline newline
\end_inset

{ 000017DD } [ d# 1394 load ] ( triangle { 000000AF } ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000187D } [ d# 1390 load ] ( multiply *.17 { 000000EF } ) { cr }
\begin_inset Newline newline
\end_inset

{ 0000195D } [ d# 1396 load ] ( fractional multiply *.
 { 000000AF } )
\begin_inset Newline newline
\end_inset

{ cr }
\begin_inset Newline newline
\end_inset

{ 000019FD { 0000AD0F } } ( load interpolate interp { 0000014F } )
\begin_inset Newline newline
\end_inset

{ cr }
\begin_inset Newline newline
\end_inset

{ 000019FD } [ d# 1398 load ] ( -u/mod { 000001CF } ) { cr }
\begin_inset Newline newline
\end_inset

{ 00001BDD } ( equals { 000013DF } ) }block
\begin_inset Newline newline
\end_inset

( 00367400 ) D# 1437 shadow{ 
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00367800 ) D# 1438 code{ 
\begin_inset Newline newline
\end_inset

( null rom anywhere ) [ d# 0 kind ] { br }
\begin_inset Newline newline
\end_inset

[ h# 000000A9 org ] { cr }
\begin_inset Newline newline
\end_inset

( warm ) { 0000153D } await ; }block
\begin_inset Newline newline
\end_inset

( 00367C00 ) D# 1439 shadow{ 
\begin_inset Newline newline
\end_inset

( default code for null rom, or for special rom to be loaded out of
\begin_inset Newline newline
\end_inset

sequence.
 ) { br }
\begin_inset Newline newline
\end_inset

: warm ( is assumed by crawlers, and is also the destination of the
\begin_inset Newline newline
\end_inset

call instruction that rom is initialized with.
 ) [ avoid clobbering
\begin_inset Newline newline
\end_inset

this word since steven's test code will not work in its absence.
 ]
\begin_inset Newline newline
\end_inset

}block
\begin_inset Newline newline
\end_inset

( 00368000 ) 
\begin_inset Newline newline
\end_inset

@
\end_layout

\end_body
\end_document
