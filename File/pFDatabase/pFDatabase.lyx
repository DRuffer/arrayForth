#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass literate-article
\begin_preamble
%Document generated by wvWare/wvWare version 1.2.9
%wvWare written by Caolan.McNamara@ul.ie
%http://wvware.sourceforge.net
%

\@ifundefined{definecolor}
 {\usepackage{color}}{}
\usepackage[dvips]{graphics}\usepackage{longtable}\usepackage{times}
\usepackage{comment}\usepackage{lastpage}
\usepackage{microtype}\DisableLigatures[-]{}

\usepackage[normalem]{ulem}
\newcommand{\suppress}[1]{}
\newcommand{\deleted}[1]{\xout{#1}}
\newcommand{\revised}[1]{\uline{#1}}
\newlength\wvtextpercent
\setlength{\wvtextpercent}{0.009\textwidth}

\newbox\strikebox
\def\strike#1{\setbox\strikebox \hbox{<#1>}\hbox{\raise0.5ex\hbox to 0pt{\vrule height 0.4pt width \wd\strikebox\hss}\copy\strikebox}}
\end_preamble
\use_default_options false
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding latin1
\fontencoding T1
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics dvips
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder false
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 0
\use_mathdots 0
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\rightmargin 2cm
\secnumdepth 5
\tocdepth 5
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle fancy
\tracking_changes true
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\author 1040033075 "DRuffer" 
\end_header

\begin_body

\begin_layout Title
DataBase Support System
\end_layout

\begin_layout Author
Elizabeth Rather and Dennis Ruffer
\end_layout

\begin_layout Date
08 July 2012
\end_layout

\begin_layout Abstract
To describe a simple database support system.
 This system originated as a loadable module in polyFORTH.
 It was converted to be compatible with the ANS Forth standard with a goal
 to become an IEEE 1275 binding for a database package.
 Later, it was put into the VentureForth development system for various
 purposes, including the Timing Diagrams.
 Now, it is being used again in the colorForth assembler/disassembler and
 converted to be compatible with 64-bit gforth, using Literate Programing
 in LyX
\end_layout

\begin_layout Abstract
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Section

\series bold
Overview & License:
\series default
 
\end_layout

\begin_layout Standard
This document specifies a proposal for a database package.
 
\end_layout

\begin_layout Subsection

\series bold
Revision History
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Rev.
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Date
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.1
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
4/26/05
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
First draft
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.2
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5/5/05
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
First formatting pass, with [DaR] markers for where more work is required
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.3
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
5/18/05
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Test all examples and fix [DaR] markers
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.4
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
1/15/09
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Clean up for release as a VentureForth plug in
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
0.5
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
8/5/12
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Convert to Literate Programming style
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection

\series bold
License
\series default
 
\end_layout

\begin_layout Standard
Copyright (c) 2009 FORTH, Inc.
 Portions contributed by Dennis Ruffer.
\end_layout

\begin_layout Standard
Permission is hereby granted, free of charge, to any person obtaining a
 copy of this software and associated documentation files (the "Software"),
 to deal in the Software without restriction, including without limitation
 the rights to use, copy, modify, merge, publish, distribute, sublicense,
 and/or sell copies of the Software, and to permit persons to whom the Software
 is furnished to do so, subject to the following conditions:
\end_layout

\begin_layout Standard
The above copyright notice and this permission notice shall be included
 in all copies or substantial portions of the Software.
\end_layout

\begin_layout Standard
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
 DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE
, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 OTHER DEALINGS IN THE SOFTWARE.
\end_layout

\begin_layout Section

\series bold
DATA BASE SUPPORT
\series default
 
\end_layout

\begin_layout Standard
The polyFORTH Data Base Support package is a set of tools with which you
 can design efficient data base applications or components for general applicati
ons.
\end_layout

\begin_layout Standard
The Data Base Support package includes:
\end_layout

\begin_layout Itemize
A simple memory-oriented file manager.
\end_layout

\begin_layout Itemize
Commands for defining records within files and fields within records.
\end_layout

\begin_layout Itemize
Tools for generating columnar reports.
\end_layout

\begin_layout Itemize
Utilities for producing totals and subtotals.
\end_layout

\begin_layout Itemize
Techniques for linking sub-files to main files and for chaining records
 within files, and;
\end_layout

\begin_layout Itemize
A set of words for creating ordered indexes (for keeping sorted lists).
 
\end_layout

\begin_layout Scrap
<<support>>=
\begin_inset Newline newline
\end_inset

<<ordered>>
\begin_inset Newline newline
\end_inset

<<bind-fields>>
\begin_inset Newline newline
\end_inset

<<user>>
\begin_inset Newline newline
\end_inset

<<working>>
\begin_inset Newline newline
\end_inset

<<save>>
\begin_inset Newline newline
\end_inset

<<file>>
\begin_inset Newline newline
\end_inset

<<block>>
\begin_inset Newline newline
\end_inset

<<read>>
\begin_inset Newline newline
\end_inset

<<address>>
\begin_inset Newline newline
\end_inset

<<indexed>>
\begin_inset Newline newline
\end_inset

<<origin>>
\begin_inset Newline newline
\end_inset

<<initialize>>
\begin_inset Newline newline
\end_inset

<<available>>
\begin_inset Newline newline
\end_inset

<<slot>>
\begin_inset Newline newline
\end_inset

<<records>>
\begin_inset Newline newline
\end_inset

<<strings>>
\begin_inset Newline newline
\end_inset

<<numeric>>
\begin_inset Newline newline
\end_inset

<<long>>
\begin_inset Newline newline
\end_inset

<<float>>
\begin_inset Newline newline
\end_inset

<<double>>
\begin_inset Newline newline
\end_inset

<<bytes>>
\begin_inset Newline newline
\end_inset

<<byte>>
\begin_inset Newline newline
\end_inset

<<put>>
\begin_inset Newline newline
\end_inset

<<ask>>
\begin_inset Newline newline
\end_inset

<<filler>>
\begin_inset Newline newline
\end_inset

<<fields>>
\begin_inset Newline newline
\end_inset

<<copies>>
\begin_inset Newline newline
\end_inset

<<entire>>
\begin_inset Newline newline
\end_inset

<<link>>
\begin_inset Newline newline
\end_inset

<<access>>
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsection

\series bold
Overview 
\begin_inset CommandInset label
LatexCommand label
name "sub:Overview"

\end_inset


\end_layout

\begin_layout Standard
polyFORTH presents its Data Base Support package in the form of a 
\begin_inset Quotes eld
\end_inset

kit,
\begin_inset Quotes erd
\end_inset

 leaving complete flexibility for you, the developer, to create a data base
 design that reflects the natural organization of the data itself.
\end_layout

\begin_layout Standard
Before you begin constructing a data base application, you must understand
 a few simple premises that underlie the design of the Data Base Support
 package.
 First, let's review common data base terminology.
\end_layout

\begin_layout Standard
A 
\shape italic
data base
\shape default
 is the complete set of organized data that is available to the computer.
 A data base is divided into related groups of data called 
\shape italic
files
\shape default
.
 For example, a file might contain the names, addresses, and phone numbers
 of all your clients.
\end_layout

\begin_layout Standard
A file, in turn, is divided into 
\shape italic
records
\shape default
.
 A record might contain the name, address and phone number for a single
 client.
 For every client, there would be one record in the file.
\end_layout

\begin_layout Standard
A record is itself divided into a collection of 
\shape italic
fields
\shape default
.
 For instance, one field might be called 
\begin_inset Quotes eld
\end_inset

STREET.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
In a data acquisition environment, a file might contain a set of readings
 taken during one experiment.
 Each record could contain the set of measure
\change_deleted 1040033075 1345771960
\SpecialChar \-

\change_unchanged
ments taken at a single point in time during the experiment; each field
 could contain the reading of a different measurement.
 In this case, you might have numerous files, each containing the data obtained
 during one run of the experiment; however, the records in each file would
 be laid out identically.
\end_layout

\begin_layout Standard
Many applications require multiple types of files that relate one to another.
 Suppose you want to record all your invoices, using an 
\begin_inset Quotes eld
\end_inset

Accounts Receivable
\begin_inset Quotes erd
\end_inset

 program.
 In the course of your business, you bill several invoices to the same client.
 Rather than duplicate the name and address of the clients every time you
 bill them, it makes sense to have one file for the client data, and another
 file for invoices.
 Each invoice record can point to one of the clients in the client file.
 In this way, one file can 
\begin_inset Quotes eld
\end_inset

use
\begin_inset Quotes erd
\end_inset

 another file.
 
\end_layout

\begin_layout Subsubsection

\series bold
Contiguous Files and Performance 
\begin_inset CommandInset label
LatexCommand label
name "sub:Contiguous-Files-and-Performance"

\end_inset


\end_layout

\begin_layout Standard
A premise of the Data Base Support package is that you are a knowledgeable
 programmer concerned about performance.
 Its approach allows you to design the data base for optimum efficiency.
\end_layout

\begin_layout Standard
In contrast, typical data base packages are intended to simplify data base
 construction for non-programmers.
 These packages do not require that you think about how your data is organized.
 On the down side, you lose the ability to structure your data base in the
 optimal way.
 The price for greater generality is impaired performance and increased
 size of compiled code.
\end_layout

\begin_layout Standard
In a disk-oriented data base application, the key determinants of performance
 are:
\end_layout

\begin_layout Enumerate
How many physical disk accesses are required to access a logical data item?
\end_layout

\begin_layout Enumerate
How much head motion occurs during normal operation?
\end_layout

\begin_layout Standard
If you can minimize the number of physical accesses required and the disk
 head motion, you can maximize performance.
\end_layout

\begin_layout Standard

\series bold
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\series bold
\begin_inset Caption

\begin_layout Plain Layout

\series bold
\begin_inset CommandInset label
LatexCommand label
name "fig:1"

\end_inset


\begin_inset Graphics
	filename Disk_Memory.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In polyFORTH, a file occupies a contiguous range of blocks on disk.
 A file may be any size (using whole blocks) up to the capacity of the disk.
 There is no need for a file allocation table.
\end_layout

\begin_layout Standard
The polyFORTH Data Base Support package addresses both issues simultaneously
 by imposing a single restriction: a file is a contiguous region of data.
 This means that the data blocks are physically contiguous on a disk supported
 by a native polyFORTH.
 Versions of polyFORTH that are co-resident with another OS use its files
 to contain blocks, and thus rely on the host OS to manage disk.
 The system does not automatically 
\begin_inset Quotes eld
\end_inset

manage
\begin_inset Quotes erd
\end_inset

 files by interweaving them on disk as they expand and contract.
 Files are not fragmented across the disk, and there is no need for a file
 allocation table to point to the fragments.
\end_layout

\begin_layout Standard
Instead, you specify the maximum size of each file when you create the file,
 and assign it a contiguous range of blocks on the disk.
 Although this requires some thought, there are several advantages:
\end_layout

\begin_layout Enumerate
Since files, and therefore records, are contiguous, the exact location of
 any data element can be calculated.
 Thus any data element can be accessed in a single physical disk access.
 In traditional operating systems and file managers, an application cannot
 know from a record number where that record lies physically.
 The location must either be looked up in a directory, or found by following
 a set of chains.
 Reportedly, one popular operating system requires up to six disk reads
 to access a single logical record.
\end_layout

\begin_layout Enumerate
While accessing various elements within a single file, the disk's magnetic
 head need only travel within the distance occupied by the file.
 Head motion is minimized.
\end_layout

\begin_layout Enumerate
You have control over the arrangement of multiple files in relation to one
 another.
 For instance, if one file serves as an index into another file, you can
 place these two files adjacent to each other on the disk.
 Again, head motion is minimized.
\end_layout

\begin_layout Standard
These benefits assume that you are running on a native polyFORTH system.
 If your polyFORTH runs under another operating system, performance depends
 on the way that O/S treats the disk.
\end_layout

\begin_layout Standard
Just as files are contiguous and of fixed length, so too are records and
 fields.
 Again, although variable-length fields require less thinking on the part
 of the user, they necessarily degrade performance.
 Fixed-length fields do not necessarily imply fixed-length amounts of data,
 because a variable number of subordinate records may be chained together
 as necessary.
 (We'll explore this technique further in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Chaining"

\end_inset

).
\end_layout

\begin_layout Standard
Since the primary bottleneck in disk-based file systems is disk-access time,
 minimizing this bottleneck achieves surprising efficiency.
 For example, one company sells a data base system which uses the polyFORTH
 Data Base Support package to handle 300 Mbytes of data and support 64 simultane
ous users with under one-second response time even at peak load, on a single
 68000 microprocessor.
\end_layout

\begin_layout Subsubsection

\series bold
Current Files and Records
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Current-Files-and-Records"

\end_inset


\end_layout

\begin_layout Standard
Another concept that is fundamental to the Data Base Support package is
 the notion that at any given moment, exactly one file is current and one
 record is current.
 Let's first describe what is meant by a file being current.
\end_layout

\begin_layout Standard
We mentioned that a file is simply a contiguous, fixed-length range of blocks
 on the disk.
 There is no file allocation table on the disk, nor is there any other indicator
 of which blocks constitute which file.
 The knowledge of where each file begins and ends resides within the application
 code, specifically in a small table that you define for each file (using
 the defining word 
\family typewriter
\series bold
FILE
\family default
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:File-Definition-and-Access"

\end_inset

).
 This table is called a 
\shape italic
File Definition Area
\shape default
 (FDA).
\end_layout

\begin_layout Standard
The name you give this table is the name of the file itself.
 The table contains the starting block number, along with sufficient information
 about the number and size of records for the Data Base Support package
 to be able to calculate the absolute location of any record in that file.
\end_layout

\begin_layout Standard
When you invoke the name of a file, the file definition places the address
 of its parameter field in a user variable called 
\family typewriter
\series bold
F#
\family default
\series default
.
 All record-accessing operations in the Data Base Support package use this
 pointer to indicate the current FDA, which in turn points to the blocks
 where the desired record resides.
\end_layout

\begin_layout Standard
Thus, at any given moment, one and only one file is current.
 Changing files is a simple matter of invoking the file name, which places
 a new address in 
\family typewriter
\series bold
F#
\family default
\series default
, taking only microseconds.
\end_layout

\begin_layout Standard
Contrast this with the process of 
\begin_inset Quotes eld
\end_inset

opening
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

closing
\begin_inset Quotes erd
\end_inset

 files in tradition
\change_deleted 1040033075 1345773616
\SpecialChar \-

\change_unchanged
al operating systems.
 In these systems, each open and close operation requires noticeable disk
 activity to read in the file directory and write it out again.
 For this reason, the question of how many files can be open simultaneously
 is a concern in such systems.
 This concern disappears with polyFORTH's Data Base Support package.
\end_layout

\begin_layout Standard

\series bold
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\series bold
\begin_inset Caption

\begin_layout Plain Layout

\series bold
\begin_inset CommandInset label
LatexCommand label
name "fig:2"

\end_inset


\begin_inset Graphics
	filename Program_Memory.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
For each file on disk there is a file definition in the dictionary.
 This definition contains four parameters describing the location and dimensions
 of the corresponding file.
 In this figure, the second file is 
\begin_inset Quotes eld
\end_inset

current.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
We can summarize the above discussion by saying, 
\begin_inset Quotes eld
\end_inset

Files are pointed to, not opened.
\begin_inset Quotes erd
\end_inset

 Analogously, we can say that 
\begin_inset Quotes eld
\end_inset

Records are pointed to, not read.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Just as there is always a current file, so there is also a current record,
 the number of the current record found in the user variable 
\family typewriter
\series bold
R#
\family default
\series default
.
 All the data-access operators refer to specified fields within the 
\shape italic
current record
\shape default
 in the 
\shape italic
current file
\shape default
.
\end_layout

\begin_layout Standard
The polyFORTH Data Base Support package is once again unique in this concept.
 Many data base packages actually read in an entire record from the disk,
 then allow access to the fields within it.
 polyFORTH merely makes a record current; disk access only occurs when a
 field name is invoked in combination with a field access operator.
\end_layout

\begin_layout Standard
This design takes advantage of the behavior of 
\family typewriter
\series bold
BLOCK
\family default
\series default
.
 Whenever a single field is accessed, 
\family typewriter
\series bold
BLOCK
\family default
\series default
 reads the entire block in which that field resides.
 If multiple fields in the record are required in the same operation (such
 as displaying all fields in the record for a report), it is unlikely that
 the block buffer will be reused before all the fields can be displayed.
 (Should this happen, 
\family typewriter
\series bold
BLOCK
\family default
\series default
 will automatically read the block again.) Moreover, it is even likely that
 references to neighboring records in the same block will also not require
 physical disk accesses.
\end_layout

\begin_layout Standard
An important advantage to not reading the record physically is the certainty
 that at any given moment only one copy of each record exists.
 Systems that read a record into memory face the problem of two users accessing
 the same record, and having different copies of it.
 Solving this conflict entails various 
\begin_inset Quotes eld
\end_inset

lockout
\begin_inset Quotes erd
\end_inset

 schemes, all of which complicate the system and reduce performance.
\end_layout

\begin_layout Standard
The file and record pointers are entirely independent of each other.
 Not only can you select records without re-selecting the file, you can
 also change files without affecting 
\family typewriter
\series bold
R#
\family default
\series default
.
\end_layout

\begin_layout Scrap
<<user>>=
\begin_inset Newline newline
\end_inset

#USER CELL +USER R#         
\backslash
 holds the current record number.
\begin_inset Newline newline
\end_inset

      CELL +USER F#         
\backslash
 holds the current file pointer.
\begin_inset Newline newline
\end_inset

      CELL +USER DB#        
\backslash
 holds the current database pointer.
\begin_inset Newline newline
\end_inset

      CELL +USER FLD#       
\backslash
 holds the current field pointer.
\begin_inset Newline newline
\end_inset

TO #USER 
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
From time to time in your application you may want to leave your current
 file and record temporarily (perhaps to examine or display a field from
 a related file) and return.
 The following words enable you to 
\begin_inset Quotes eld
\end_inset

remember
\begin_inset Quotes erd
\end_inset

 
\family typewriter
\series bold
F#
\family default
\series default
 and 
\family typewriter
\series bold
R#
\family default
\series default
 temporarily:
\end_layout

\begin_layout Description

\series bold
Word Action
\end_layout

\begin_layout Description

\family typewriter
SAVE
\family default
 pushes 
\family typewriter
\series bold
R#
\family default
\series default
 and 
\family typewriter
\series bold
F#
\family default
\series default
 onto the return stack.
\end_layout

\begin_layout Description

\family typewriter
RESTORE
\family default
 pops those items off the return stack and places them in 
\family typewriter
\series bold
R#
\family default
\series default
 and 
\family typewriter
\series bold
F#
\family default
\series default
.
\end_layout

\begin_layout Standard
Naturally, you must use 
\family typewriter
\series bold
SAVE
\family default
\series default
 and 
\family typewriter
\series bold
RESTORE
\family default
\series default
 as a paired set within the same definition, just as you would use 
\family typewriter
\series bold
>R
\family default
\series default
 and 
\family typewriter
\series bold
R>
\family default
\series default
.
 Similarly, you must use both words within or outside of any 
\family typewriter
\series bold
DO
\begin_inset space \space{}
\end_inset

...
\begin_inset space \space{}
\end_inset

LOOP
\family default
\series default
 structure in that definition.
 Therefore, these words can not tollerate tail recursion enhancements, if
 your system uses those techniques.
\end_layout

\begin_layout Standard
Following a 
\family typewriter
\series bold
SAVE
\family default
\series default
, 
\family typewriter
\series bold
R#
\family default
\series default
 is on top of the return stack; if you need a copy of it you may get it
 by using 
\family typewriter
\series bold
R@
\family default
\series default
.
\end_layout

\begin_layout Scrap
<<save>>=
\begin_inset Newline newline
\end_inset

: SAVE ( -- ) ( R: -- f# db# r# )   R>  DB# @ >R F# @ >R R# @ >R  >R ;
\begin_inset Newline newline
\end_inset


\backslash
 NO-TAIL-RECURSION
\begin_inset Newline newline
\end_inset

: RESTORE ( -- ) ( R: f# db# r# -- )   R>  R> R# ! R> F# ! R> DB# !  >R
 ;
\begin_inset Newline newline
\end_inset


\backslash
 NO-TAIL-RECURSION
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsubsection

\series bold
How Data is Stored
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:How-Data-is-Stored"

\end_inset


\end_layout

\begin_layout Standard
The Data Base Support package allows storage of data in either numeric or
 alphanumeric form.
 For instance, a U.S.
 telephone number, including area code, requires 14 bytes when stored in
 alphanumeric form:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
(213) 372-8493
\end_layout

\begin_layout Standard
This same phone number can be stored in only 6 bytes per record, if it is
 recorded as a 16-bit area code and a 32-bit local number:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
213 3728493
\end_layout

\begin_layout Standard
The appropriate punctuation symbols can easily be inserted when the number
 is displayed, using pictured numeric output.
\end_layout

\begin_layout Standard
The contents of numeric fields travel between the data stack and the disk;
 the contents of alphanumeric strings travel between the 
\family typewriter
\series bold
PAD
\family default
\series default
 and the disk.
\end_layout

\begin_layout Standard
For instance, if we have a double-length field named 
\family typewriter
\series bold
SALARY
\family default
\series default
, we can fetch the value of the field (from the current record in the current
 file) by invoking the phrase:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
SALARY D@
\end_layout

\begin_layout Standard
which places its value on the stack in the same way that the word 
\family typewriter
\series bold
2@
\family default
\series default
 fetches a double-length value from an ordinary variable.
 Similarly, the phrase,
\end_layout

\begin_layout Standard

\family typewriter
\series bold
SALARY D!
\end_layout

\begin_layout Standard
removes a double-length value from the stack and places it in the current
 
\family typewriter
\series bold
SALARY
\family default
\series default
 field.
\end_layout

\begin_layout Standard
Alternatively, the word 
\family typewriter
\series bold
B@
\family default
\series default
 fetches the contents of an alphanumeric field, and copies it to the 
\family typewriter
\series bold
PAD
\family default
\series default
.
 The word 
\family typewriter
\series bold
B!
\family default
\series default
 stores an alphanumeric string at 
\family typewriter
\series bold
PAD
\family default
\series default
 into a given field.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:3"

\end_inset


\begin_inset Graphics
	filename Task_Memory.png

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Shows how data travels between disk and memory.
 Numeric data travels between disk and the parameter stack, and text strings
 travel between the disk and 
\family typewriter
\series bold
PAD
\family default
\series default
.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Field Reference Operators, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Field-Reference-Operators"

\end_inset


\end_layout

\begin_layout Subsubsection

\series bold
Working Storage
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Working-Storage"

\end_inset


\end_layout

\begin_layout Standard
Two features of the Data Base Support package make use of a region of mem
\change_deleted 1040033075 1345774135
\SpecialChar \-

\change_unchanged
ory called 
\shape italic
working storage
\shape default
.
 Working storage is allocated at the beginning of a task partition, and
 serves as a place where record data may remain which is easily accessible,
 but less volatile than 
\family typewriter
\series bold
PAD
\family default
\series default
 or the parameter stack.
 Since each task has a working storage area, tasks running concur
\change_deleted 1040033075 1345774163
\SpecialChar \-

\change_unchanged
rently may use the same code referring to working storage without conflict.
\end_layout

\begin_layout Standard
One use of working storage appears in automatic totaling (
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Totals-and-Subtotals"

\end_inset

).
 Here working storage holds the accumulating registers for each column of
 data to be added as the report is generated.
\end_layout

\begin_layout Standard
The second use of working storage is as an 
\begin_inset Quotes eld
\end_inset

image
\begin_inset Quotes erd
\end_inset

 of a record.
 The same relative positions are maintained both in the record on disk and
 in working storage.
 For example, working storage is used to hold the key during a binary search
 of an ordered index (
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Ordered-Index-Files"

\end_inset

), in the field in which it will be found in records being searched.
\end_layout

\begin_layout Standard
The same field names that let you access fields on disk also may be used
 to reference the corresponding fields in local working storage.
 There is only one 
\begin_inset Quotes eld
\end_inset

record
\begin_inset Quotes erd
\end_inset

 in the working storage area.
 This technique lets you map data items as though they were contained in
 records although they are tempor
\change_deleted 1040033075 1345774213
\SpecialChar \-

\change_unchanged
arily in resident memory instead of on the disk.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:4"

\end_inset


\begin_inset Graphics
	filename Working_Storage.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Field names may be used to reference either the individual field in the
 current record (on disk), or the corresponding field in working storage.
\end_layout

\begin_layout Standard
The double use of working storage for both subtotaling and key searches
 rarely causes a conflict, since the two activities occur at separate times.
 To be on the safe side, however, the statistics component uses the word
 
\family typewriter
\series bold
REGISTER
\family default
\series default
 to return the address of the accumulators, which in turn is defined in
 terms of 
\family typewriter
\series bold
WORKING
\family default
\series default
.
 If you find that you will encounter a conflict, you may resolve it by simply
 redefining 
\family typewriter
\series bold
REGISTER
\family default
\series default
 to point to some other area.
\end_layout

\begin_layout Standard
How much working storage is necessary? If you are using the subtotaling
 feature, the amount depends on the number of accumulating registers you
 need.
 In total, you will need the sum of:
\end_layout

\begin_layout Description
16 register area management
\end_layout

\begin_layout Description
4 header variables for registers
\end_layout

\begin_layout Description
#registers
\begin_inset space ~
\end_inset

*
\begin_inset space ~
\end_inset

8 8 bytes per accumulator
\end_layout

\begin_layout Description
_____________
\end_layout

\begin_layout Description
total
\end_layout

\begin_layout Standard
For instance, three accumulators will require 44 bytes (16
\begin_inset space \space{}
\end_inset

+
\begin_inset space \space{}
\end_inset

4
\begin_inset space \space{}
\end_inset

+
\begin_inset space \space{}
\end_inset

3*8).
 On 32-bit machines these sizes should be doubled and on 64-bit machines,
 multiply times 4.
\end_layout

\begin_layout Standard
If you are using ordered indexes, working storage must be as large as the
 largest record in any ordered index file.
\end_layout

\begin_layout Standard
Remember that any task, which performs an application that uses working
 storage must have sufficient room allotted for it---including the printer
 task.
\end_layout

\begin_layout Scrap
<<working>>=
\begin_inset Newline newline
\end_inset

#USER 1024 +USER WORKING  TO #USER
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Accessing Fields in Working Storage, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Access-to-Working-Storage"

\end_inset


\begin_inset Newline newline
\end_inset

Ordered Indexes, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Ordered-Index-Files"

\end_inset


\begin_inset Newline newline
\end_inset

Subtotaling, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Totals-and-Subtotals"

\end_inset


\end_layout

\begin_layout Subsubsection

\series bold
Installing The Data Base Support Package in polyFORTH
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Installing-The-Package"

\end_inset


\end_layout

\begin_layout Standard
Before you begin to use the Data Base Support package, you must first decide
 whether you will be using it in your personal task only, or whether other
 terminal tasks may need to use it simultaneously.
\end_layout

\begin_layout Standard
To load the package into a your private terminal task, list its load block
 with the phrase,
\end_layout

\begin_layout Standard

\family typewriter
\series bold
FILES LIST
\end_layout

\begin_layout Standard
The constant FILES return the number of this load block.
 Make sure that the block begins with the phrase:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
EMPTY n ALLOT
\end_layout

\begin_layout Standard
where n is the amount of working storage required for your files application
 (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Working-Storage"

\end_inset

).
\end_layout

\begin_layout Standard
At the end of the load block, a null definition of 
\family typewriter
\series bold
TASK
\family default
\series default
 should appear.
 This word will be the last word in the dictionary when file applications
 are loaded, and will mark the point at which overlays will occur.
\end_layout

\begin_layout Standard
Now issue the command:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
FILES LOAD
\end_layout

\begin_layout Standard
to load the Data Base Support package.
\end_layout

\begin_layout Standard
As you create data base applications, each of these should begin with the
 phrase:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
FORGET TASK : TASK ;
\end_layout

\begin_layout Standard
This makes each application an overlay, which will discard other over\SpecialChar \-
lays
 that use this convention.
 For instance, if you have an accounts-receivables application, its load
 block should begin with the above phrase, to forget any other applications
 without forgetting the Data Base Support package itself.
\end_layout

\begin_layout Standard
Finally, if you wish to output a report to your printer, you must allot
 a working storage area in the printer task.
 This may be done with the phrase:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
n TYPIST H HIS +!
\end_layout

\begin_layout Standard
This phrase advances the dictionary pointer 
\family typewriter
\series bold
H
\family default
\series default
 for 
\family typewriter
\series bold
TYPIST
\family default
\series default
---the printer task---by the amount 
\shape italic
n
\shape default
.
 It is most convenient to edit this phrase into the 
\family typewriter
\series bold
FILES
\family default
\series default
 load block.
\end_layout

\begin_layout Standard
Alternatively, if several terminals require use of the Data Base Support
 package, Block 9 should load the package with the system electives.
 In this case, remove the:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
EMPTY n ALLOT
\end_layout

\begin_layout Standard
at the top of the 
\family typewriter
\series bold
FILES
\family default
\series default
 load block; also remove the definition of 
\family typewriter
\series bold
TASK
\family default
\series default
 and the word 
\family typewriter
\series bold
EXIT
\family default
\series default
 at the bottom (by placing parentheses around them).
 By allowing the final word 
\family typewriter
\series bold
GILD
\family default
\series default
 to execute, the Data Base Support definitions will become available to
 all tasks.
\end_layout

\begin_layout Standard
Edit the phrase:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
FILES LOAD n TYPIST HIS +!
\end_layout

\begin_layout Standard
where 
\shape italic
n
\shape default
 is the amount of working storage required for your files application (see
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Working-Storage"

\end_inset

) into the last line of Block 9 (just above the 
\family typewriter
\series bold
EXIT
\family default
\series default
).
 If you have already loaded the electives before making this addition, type:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
FLUSH RELOAD
\end_layout

\begin_layout Standard
then type:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
HI
\end_layout

\begin_layout Standard
Using this approach, each files application must begin with the phrase:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
EMPTY n ALLOT
\end_layout

\begin_layout Standard
instead of 
\family typewriter
\series bold
FORGET
\begin_inset space \space{}
\end_inset

TASK
\family default
\series default
, where 
\shape italic
n
\shape default
 is the amount of working storage needed by that application.
\end_layout

\begin_layout Subsubsection

\series bold
Installing The Data Base Support Package in gforth
\series default
 
\end_layout

\begin_layout Standard
While the previous section described how to install the original Data Base
 Support Package on the 16-bit polyFORTH block-based system where it was
 written, the current package has been enhanced to work on 32-bit, file-based
 systems.
 It has been tested, at various points in time, on the 32-bit pF32-386/pMSD
 system using its Text File Support (
\family typewriter
\series bold
TEXTFILE
\family default
\series default
) Option, on SwiftForth 2.00.2, and on Gforth 0.7.9.
 However, since each system has its own, unique dependencies, the current
 system is configured to run on gforth, using an ANS Forth compatibility
 layer (
\family typewriter
\series bold
pFDatabase.fth
\family default
\series default
).
 The primary compatibility issue these routines solve is the issue of locating
 the support files in a multi-file application package, such as this.
\end_layout

\begin_layout Standard
While this could be called an ANS Forth Application, you are not left with
 an ANS Forth System after it loads, due to many naming conflicts.
 So, it has ben placed it into a 
\family typewriter
\series bold
files-wordlist
\family default
\series default
 that is made current by the word 
\family typewriter
\series bold
Files
\family default
\series default
.
 Thus, all of the naming conflicts, and most of the application usages are
 buried away from normal user interaction.
 Only those words which are considered to be application interface words
 should be exposed to the user.
 The developer, however, will need to execute 
\family typewriter
\series bold
Files
\family default
\series default
 before the words in this plug in can be used.
\end_layout

\begin_layout Standard
The following definitions are required by this system, but are not considered
 part of it.
 They may all, eventually, be moved to the supporting Forth system.
\end_layout

\begin_layout Standard
The Data Base Support Package can be compiled into gforth by loading the
 following file:
\end_layout

\begin_layout Scrap
<<pFDatabase.fth>>=
\begin_inset Newline newline
\end_inset

[defined] 2+! 0= [IF] : 2+! ( d a -- )   DUP >R 2@ D+ R> 2! ; [THEN]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

<<append>>
\begin_inset Newline newline
\end_inset

<<place>>
\begin_inset Newline newline
\end_inset

: prepend ( from len to -- )   dup count  dup 1+ allocate throw  dup >r
 place
\begin_inset Newline newline
\end_inset

    dup >r place  r> r@ count rot append  r> free throw ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

<<,string>>
\begin_inset Newline newline
\end_inset

<<string-c,>>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: null? DUP 0= IF NIP DUP THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: left-parse-string ( str len char -- rstr rlen lstr llen ) 
\backslash
 IEEE 1275 parser from left
\begin_inset Newline newline
\end_inset

    OVER IF
\begin_inset Newline newline
\end_inset

        >R 2DUP R> ROT ROT OVER + SWAP 2DUP = IF  2DROP  ELSE  DO
\begin_inset Newline newline
\end_inset

            DUP I C@ = IF
\begin_inset Newline newline
\end_inset

                DROP 2DUP + I 1+ SWAP OVER - null?  ( rstr rlen | 0 0 )
\begin_inset Newline newline
\end_inset

                2SWAP DROP I OVER - null?           ( lstr llen | 0 0 )
\begin_inset Newline newline
\end_inset

                UNLOOP EXIT  THEN
\begin_inset Newline newline
\end_inset

        LOOP THEN  DROP 0 0 2SWAP
\begin_inset Newline newline
\end_inset

    ELSE  DROP 0 0 2SWAP  THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

<<endians>>
\begin_inset Newline newline
\end_inset

<<links>>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

wordlist constant DBfiles-wordlist
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: files   forth-wordlist  DBfiles-wordlist
\begin_inset Newline newline
\end_inset

    2 set-order  definitions ;  immediate
\begin_inset Newline newline
\end_inset

files
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

<<spin>>
\begin_inset Newline newline
\end_inset

<<get>>
\begin_inset Newline newline
\end_inset

<<text>>
\begin_inset Newline newline
\end_inset

<<reverse>>
\begin_inset Newline newline
\end_inset

<<keep-closed>>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: >MOVE< ( s d n -- )
\begin_inset Newline newline
\end_inset

    REVERSE @ IF
\begin_inset Newline newline
\end_inset

        2/ 0 ?DO
\begin_inset Newline newline
\end_inset

            >R  COUNT R@ 1+ C!  COUNT R@ C!  R> 2 +
\begin_inset Newline newline
\end_inset

        LOOP  2DROP
\begin_inset Newline newline
\end_inset

    ELSE  MOVE  THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: xTYPE ( a n -- )
\begin_inset Newline newline
\end_inset

    BOUNDS ?DO
\begin_inset Newline newline
\end_inset

        I C@ DUP BL < IF
\begin_inset Newline newline
\end_inset

            DROP SPACE
\begin_inset Newline newline
\end_inset

        ELSE  EMIT
\begin_inset Newline newline
\end_inset

    THEN  LOOP ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

<<-text>>
\begin_inset Newline newline
\end_inset

<<date-format>>
\begin_inset Newline newline
\end_inset

<<time>>
\begin_inset Newline newline
\end_inset

<<title">>
\begin_inset Newline newline
\end_inset

<<company">>
\begin_inset Newline newline
\end_inset

<<app">>
\begin_inset Newline newline
\end_inset

<<number-user>>
\begin_inset Newline newline
\end_inset

<<+user>>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

<<support>>   
\backslash
 DataBase Support System
\begin_inset Newline newline
\end_inset

<<reports>>   
\backslash
 Report Generator
\begin_inset Newline newline
\end_inset

<<structure>> 
\backslash
 Structured files
\begin_inset Newline newline
\end_inset

<<memory>>    
\backslash
 Memory based data
\begin_inset Newline newline
\end_inset

<<index>>     
\backslash
 Ordered Index
\begin_inset Newline newline
\end_inset

<<people>>    
\backslash
 People example
\begin_inset Newline newline
\end_inset

<<personnel>> 
\backslash
 Personnel example
\begin_inset Newline newline
\end_inset

<<customers>> 
\backslash
 Customers example
\begin_inset Newline newline
\end_inset

<<accounts>>  
\backslash
 Accounts example
\begin_inset Newline newline
\end_inset

<<wines>>     
\backslash
 Wine Inventory example
\begin_inset Newline newline
\end_inset

<<glossary>>  
\backslash
 Sample FILE application for documenting Forth words
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

<<test>>      
\backslash
 Test the examples
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

FORTH DEFINITIONS
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Once loaded, the following, optional configuration settings may be invoked
 to cause the system to behave in specific ways.
\end_layout

\begin_layout Standard

\family typewriter
\series bold
FALSE REVERSE !
\end_layout

\begin_layout Standard
Causes the system to not store strings with every other byte reversed.
 This is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Index-File-Records"

\end_inset

 below, regarding Indexed File Records.
 The default setting is 
\family typewriter
\series bold
TRUE
\family default
\series default
, since most existing Data Base Support files have been constructed that
 way.
 However, if you are not concerned with compatibility with existing data
 files, you will most likely set this flag to 
\family typewriter
\series bold
FALSE
\family default
\series default
.
\end_layout

\begin_layout Scrap
<<reverse>>=
\begin_inset Newline newline
\end_inset

VARIABLE REVERSE   ( Default ) FALSE REVERSE !
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
KEEP-CLOSED
\family default
 when false, file handles are never explicitely closed unless a new file
 name is bound to a file.
 When true, file handles are closed after each major operation.
\end_layout

\begin_layout Scrap
<<keep-closed>>=
\begin_inset Newline newline
\end_inset

VARIABLE KEEP-CLOSED   ( Default ) FALSE KEEP-CLOSED !
\begin_inset Newline newline
\end_inset

[defined] ForTimbre [IF]  TRUE KEEP-CLOSED !  [THEN]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard

\family typewriter
\series bold
LITTLE-ENDIAN
\family default

\begin_inset Newline newline
\end_inset


\family typewriter
BIG-ENDIAN
\end_layout

\begin_layout Standard
These options establish the byte order of values stored in 
\family typewriter
\series bold
NUMERIC
\family default
\series default
, 
\family typewriter
\series bold
LONG
\family default
\series default
 and 
\family typewriter
\series bold
DOUBLE
\family default
\series default
 fields.
 The default setting is 
\family typewriter
\series bold
LITTLE-ENDIAN
\family default
\series default
, but you may want to use 
\family typewriter
\series bold
BIG-ENDIAN
\family default
\series default
 on systems where that is the native data format.
 Neither one has any speed benefit, since both are coded using byte fetch
 operators.
 However, if you are accessing data in 
\family typewriter
\series bold
WORKING
\family default
\series default
 storage, as described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Access-to-Working-Storage"

\end_inset

, this setting can be essential.
\end_layout

\begin_layout Standard

\family typewriter
\series bold
' DD-MMM-YYYY DATE-FORMAT !
\family default

\begin_inset Newline newline
\end_inset


\family typewriter
' MM/DD/YYYY DATE-FORMAT !
\end_layout

\begin_layout Standard
The format of a date can be adjusted, using this option.
 The default setting is 
\family typewriter
\series bold
MM/DD/YYYY
\family default
\series default
.
 The primary usage is in 
\family typewriter
\series bold
+PAGE
\family default
\series default
 as is described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:The-Page-Banner"

\end_inset

.
\end_layout

\begin_layout Standard
Modified Julian Dates in the range 01 Jan 1900 through 05 Jun 2079 may be
 input and output converted, although dates in the first two months of 1900
 are not consistent with the rest of the calendar because 1900 was not a
 leap year.
\end_layout

\begin_layout Scrap
<<date-format>>=
\begin_inset Newline newline
\end_inset

<<dy>>
\begin_inset Newline newline
\end_inset

<<days>>
\begin_inset Newline newline
\end_inset

<<fetch-mth>>
\begin_inset Newline newline
\end_inset

<<dmy>>
\begin_inset Newline newline
\end_inset

<<a.d.>>
\begin_inset Newline newline
\end_inset

<<mth>>
\begin_inset Newline newline
\end_inset

<<mdy>>
\begin_inset Newline newline
\end_inset

<<y-dd-dm>>
\begin_inset Newline newline
\end_inset

<<dd-mmm-yyyy>>
\begin_inset Newline newline
\end_inset

<<mmddyyyy>>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

VARIABLE DATE-FORMAT   ' MM/DD/YYYY DATE-FORMAT !
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

<<.date>>
\begin_inset Newline newline
\end_inset

<<fetch-date>>
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
D/Y
\family default
 is the number of days per year for a four-year period.
\end_layout

\begin_layout Scrap
<<dy>>=
\begin_inset Newline newline
\end_inset

365 4 * 1+ CONSTANT D/Y
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
DAYS
\family default
 is the lookup table of total days in the year at the start of each month.
\end_layout

\begin_layout Scrap
<<days>>=
\begin_inset Newline newline
\end_inset

CREATE DAYS   -1 ,  0 ,  31 ,  59 ,  90 ,  120 ,  151 ,
\begin_inset Newline newline
\end_inset

        181 ,  212 ,  243 ,  273 ,  304 ,  334 ,  367 ,
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
@MTH
\family default
 returns the value from days for the given month.
\end_layout

\begin_layout Scrap
<<fetch-mth>>=
\begin_inset Newline newline
\end_inset

: @MTH ( u1 -- u2 )   CELLS DAYS + @ ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
D/M/Y
\family default
 converts day, month, year into MJD.
\end_layout

\begin_layout Scrap
<<dmy>>=
\begin_inset Newline newline
\end_inset

: D-M-Y ( d m y -- u )   >R  @MTH
\begin_inset Newline newline
\end_inset

    58 OVER < IF  R@ 3 AND 0= - THEN + 1-
\begin_inset Newline newline
\end_inset

    R> 1900 -  D/Y UM*  4 UM/MOD SWAP 0<> - + ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
A.D.

\family default
 sets the current 
\family typewriter
\series bold
YEAR
\family default
\series default
.
\end_layout

\begin_layout Scrap
<<a.d.>>=
\begin_inset Newline newline
\end_inset

VARIABLE YEAR
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: A.D.
 ( n -- )   YEAR ! ;   TIME&DATE A.D.
 2DROP 2DROP DROP
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
MTH
\family default
 defines words that convert date to internal form in month of the same name
 using year in 
\family typewriter
\series bold
YEAR
\family default
\series default
.
\end_layout

\begin_layout Scrap
<<mth>>=
\begin_inset Newline newline
\end_inset

: MTH ( n _ -- )   CREATE , DOES> ( d -- n )   @ YEAR @ D-M-Y ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

1 MTH JAN       2 MTH FEB       3 MTH MAR       4 MTH APR
\begin_inset Newline newline
\end_inset

5 MTH MAY       6 MTH JUN       7 MTH JUL       8 MTH AUG
\begin_inset Newline newline
\end_inset

9 MTH SEP      10 MTH OCT      11 MTH NOV      12 MTH DEC
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
M/D/Y
\family default
 takes a double number mm/dd/yyyy and converts it to MJD.
\end_layout

\begin_layout Scrap
<<mdy>>=
\begin_inset Newline newline
\end_inset

: M/D/Y ( ud -- u )   10000 UM/MOD  100 /MOD  ROT D-M-Y ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
Y-DD
\begin_inset space ~
\end_inset

DM
\family default
 split the serial number back into its components.
\end_layout

\begin_layout Scrap
<<y-dd-dm>>=
\begin_inset Newline newline
\end_inset

: Y-DD ( u1 -- y u2 u3 )   4 UM* D/Y  UM/MOD 1900 +  SWAP 4 /MOD 1+
\begin_inset Newline newline
\end_inset

    DUP ROT 0= IF  DUP 60 > +  SWAP DUP 59 > +  THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: DM ( u1 u2 -- d m )   1 BEGIN  1+  2DUP @MTH > 0= UNTIL  1-
\begin_inset Newline newline
\end_inset

    SWAP DROP SWAP  OVER @MTH - SWAP ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
DD-MMM-YYYY
\family default
 converts internal form to text formatted as dd mmm yyyy.
\end_layout

\begin_layout Scrap
<<dd-mmm-yyyy>>=
\begin_inset Newline newline
\end_inset

CREATE MTHS   s" JanFebMarAprMayJunJulAugSepOctNovDec" $c,
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: DD-MMM-YYYY ( n -- a n )   BASE @ >R  DECIMAL  Y-DD
\begin_inset Newline newline
\end_inset

    ROT 0 <#  # # # #  2DROP  BL HOLD  DM 1- 3 * MTHS +
\begin_inset Newline newline
\end_inset

    3 + 3 0 DO  1- DUP C@ HOLD  LOOP  DROP
\begin_inset Newline newline
\end_inset

    BL HOLD  0 # #  #>  R> BASE ! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
MM/DD/YYYY
\family default
 converts internal form to text formatted as mm/dd/yyyy.
\end_layout

\begin_layout Scrap
<<mmddyyyy>>=
\begin_inset Newline newline
\end_inset

: MM/DD/YYYY ( u1 -- c-addr u2 )   BASE @ >R  DECIMAL  Y-DD
\begin_inset Newline newline
\end_inset

    ROT 0 <#  # # # #  2DROP  [char] / HOLD  DM SWAP
\begin_inset Newline newline
\end_inset

    0 # #  2DROP   [char] / HOLD  0 # #  #>  R> BASE ! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
.DATE
\family default
 displays the system date (u) as mm/dd/yyyy.
\end_layout

\begin_layout Scrap
<<.date>>=
\begin_inset Newline newline
\end_inset

: .DATE ( u -- )   DATE-FORMAT @ EXECUTE TYPE SPACE ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
@DATE
\family default
 gets the current system date.
\end_layout

\begin_layout Scrap
<<fetch-date>>=
\begin_inset Newline newline
\end_inset

: @DATE ( -- n )   TIME&DATE D-M-Y NIP NIP NIP ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: DATE ( -- )   @DATE .DATE ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Scrap
<<time>>=
\begin_inset Newline newline
\end_inset

: :00 ( ud1 -- ud2)   DECIMAL  #  6 BASE !  # [char] : HOLD ;
\begin_inset Newline newline
\end_inset

: (TIME) ( secs -- c-addr u)   BASE @ >R  0 <#  :00 :00
\begin_inset Newline newline
\end_inset

    DECIMAL # #  #>  R> BASE ! ;
\begin_inset Newline newline
\end_inset

: .TIME ( secs -- )   (TIME) TYPE SPACE ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: @TIME ( -- secs )   TIME&DATE 2DROP DROP 60 * + 60 * + ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: TIME ( -- )   @TIME .TIME ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
TITLE"
\family default
 defines the string to be used for listings.
 When its children are executed, they leave the string address in 
\family typewriter
\series bold
'TITLE
\family default
\series default
.
\end_layout

\begin_layout Scrap
<<title">>=
\begin_inset Newline newline
\end_inset

VARIABLE 'TITLE
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: TITLE" ( -- )   CREATE  HERE 'TITLE !  ,"
\begin_inset Newline newline
\end_inset

    DOES> ( -- )   'TITLE ! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
COMPANY"
\family default
 sets the company name used for report titles.
\end_layout

\begin_layout Scrap
<<company">>=
\begin_inset Newline newline
\end_inset

VARIABLE 'COMPANY
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: COMPANY" ( -- )   HERE 'COMPANY !  ," ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

COMPANY" Software Specialists"
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
APP"
\family default
 sets the application name used for screen titles.
\end_layout

\begin_layout Scrap
<<app">>=
\begin_inset Newline newline
\end_inset

VARIABLE 'APP
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: APP" ( -- )   HERE 'APP !  ," ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

APP"  "
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard

\family typewriter
\series bold
B!
\family default
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Field-Reference-Operators"

\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
WORKING
\family default
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Access-to-Working-Storage"

\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
+PAGE
\family default
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:The-Page-Banner"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
Installing The Data Base Support Package in Open Firmware
\series default
 
\end_layout

\begin_layout Standard
This documentation, 1275 Binding for a Database Package, was never actually
 published.
 It is the last time that I worked on the documentation with Elizabeth Rather,
 with the hope to make this tool public, but the effort died when Apple
 switched to Intel.
 Since the Data Base Support Package was originally written to run on polyFORTH,
 there are dependencies, above and beyond simple ANS Forth requirements.
 These have all been bracketed with the following:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
[DEFINED] <name> 0= [IF] <definition> [THEN]
\end_layout

\begin_layout Standard
Here is a list of the non-ANS Forth words that this system requires:
\end_layout

\begin_layout Description

\series bold
Word Description
\end_layout

\begin_layout Description

\family typewriter
GET
\family default
 (
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

) Multi-tasking means to get ownership of a facility.
\end_layout

\begin_layout Scrap
<<get>>=
\begin_inset Newline newline
\end_inset

[defined] GET 0= [IF] : GET DROP ; [THEN]
\begin_inset Newline newline
\end_inset

<<grab>>
\begin_inset Newline newline
\end_inset

<<release>>
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
GRAB
\family default
 (
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

) Multi-tasking means to get ownership without pausing.
\end_layout

\begin_layout Scrap
<<grab>>=
\begin_inset Newline newline
\end_inset

[defined] GRAB 0= [IF] : GRAB DROP ; [THEN]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
RELEASE
\family default
 (
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

) Multi-tasking means to release ownership of a facility.
\end_layout

\begin_layout Scrap
<<release>>=
\begin_inset Newline newline
\end_inset

[defined] RELEASE 0= [IF] : RELEASE DROP ; [THEN]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
#USER
\family default
 (
\begin_inset space \space{}
\end_inset

-- a
\begin_inset space \space{}
\end_inset

) Multi-tasking variable containing the size of the user area.
\end_layout

\begin_layout Scrap
<<number-user>>=
\begin_inset Newline newline
\end_inset

[defined] #USER 0= [IF]  0 VALUE #USER  [THEN]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
+USER
\family default
 (
\begin_inset space \space{}
\end_inset

o n
\begin_inset space \space{}
\end_inset

-- o'
\begin_inset space \space{}
\end_inset

) Multi-tasking means to define new user variables.
\end_layout

\begin_layout Scrap
<<+user>>=
\begin_inset Newline newline
\end_inset

[defined] +USER 0= [IF]
\begin_inset Newline newline
\end_inset

    : +USER ( o n _ -- o+n )   CREATE DUP ALLOT + ;
\begin_inset Newline newline
\end_inset

[THEN]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The following are used to fetch data that is in known Endian format.
 E.g.
 in file system structures or network packets.
 These words work on un-aligned entities.
\end_layout

\begin_layout Description

\family typewriter
c@-le
\family default
 (
\begin_inset space \space{}
\end_inset

a n
\begin_inset space \space{}
\end_inset

-- \SpecialChar \ldots{}

\begin_inset space \space{}
\end_inset

) Little endian fetch of a multi-byte value.
\end_layout

\begin_layout Scrap
<<c@-le>>=
\begin_inset Newline newline
\end_inset

[defined] c@-le 0= [IF]
\begin_inset Newline newline
\end_inset

: 1c@-le ( a n -- x )   0 SWAP BEGIN ?DUP WHILE
\begin_inset Newline newline
\end_inset

        1- ROT 2DUP +      C@ >R ROT 8 LSHIFT R> + ROT
\begin_inset Newline newline
\end_inset

    REPEAT NIP ;
\begin_inset Newline newline
\end_inset

: c@-le ( a n -- ...
 )
\begin_inset Newline newline
\end_inset

    CELL /MOD ROT OVER CELLS + -ROT SWAP ?DUP
\begin_inset Newline newline
\end_inset

    IF  ROT DUP ROT 1c@-le -ROT SWAP  THEN  ?DUP
\begin_inset Newline newline
\end_inset

    IF  0 DO  1 CELLS - DUP CELL 1c@-le SWAP  LOOP
\begin_inset Newline newline
\end_inset

    THEN  DROP ;
\begin_inset Newline newline
\end_inset

[THEN]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
c!-le
\family default
 (
\begin_inset space \space{}
\end_inset

\SpecialChar \ldots{}
a n
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

) Little endian store of a multi-byte value.
\end_layout

\begin_layout Scrap
<<c!-le>>=
\begin_inset Newline newline
\end_inset

[defined] c!-le 0= [IF]
\begin_inset Newline newline
\end_inset

: 1c!-le ( x a n -- )   BEGIN ?DUP WHILE
\begin_inset Newline newline
\end_inset

        1- ROT DUP 8 RSHIFT SWAP 2OVER DROP C! ROT 1+ ROT
\begin_inset Newline newline
\end_inset

    REPEAT 2DROP ;
\begin_inset Newline newline
\end_inset

: c!-le ( ...
 a n -- )   CELL /MOD SWAP >R  ?DUP
\begin_inset Newline newline
\end_inset

    IF  0 DO  SWAP OVER CELL 1c!-le CELL+ LOOP
\begin_inset Newline newline
\end_inset

    THEN  R> ?DUP IF  1c!-le  ELSE DROP THEN ;
\begin_inset Newline newline
\end_inset

[THEN]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
c@-be
\family default
 (
\begin_inset space \space{}
\end_inset

a n
\begin_inset space \space{}
\end_inset

-- \SpecialChar \ldots{}

\begin_inset space \space{}
\end_inset

) Big endian fetch of a multi-byte value.
\end_layout

\begin_layout Scrap
<<c@-be>>=
\begin_inset Newline newline
\end_inset

[defined] c@-be 0= [IF]
\begin_inset Newline newline
\end_inset

: 1c@-be ( a n -- x )   0 SWAP BEGIN ?DUP WHILE
\begin_inset Newline newline
\end_inset

        1- ROT DUP 1+ SWAP C@ >R ROT 8 LSHIFT R> + ROT
\begin_inset Newline newline
\end_inset

    REPEAT NIP ;
\begin_inset Newline newline
\end_inset

: c@-be ( a n -- ...
 )
\begin_inset Newline newline
\end_inset

    CELL /MOD ROT OVER CELLS + -ROT SWAP ?DUP
\begin_inset Newline newline
\end_inset

    IF  ROT DUP ROT 1c@-be -ROT SWAP  THEN  ?DUP
\begin_inset Newline newline
\end_inset

    IF  0 DO  1 CELLS - DUP CELL 1c@-be SWAP  LOOP
\begin_inset Newline newline
\end_inset

    THEN  DROP ;
\begin_inset Newline newline
\end_inset

[THEN]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
c!-be
\family default
 (
\begin_inset space \space{}
\end_inset

\SpecialChar \ldots{}
a n
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

) Big endian store of a multi-byte value.
\end_layout

\begin_layout Scrap
<<c!-be>>=
\begin_inset Newline newline
\end_inset

[defined] c!-be 0= [IF]
\begin_inset Newline newline
\end_inset

: 1c!-be ( x a n -- )   BEGIN ?DUP WHILE
\begin_inset Newline newline
\end_inset

        1- ROT DUP 8 RSHIFT SWAP 2OVER +    C! ROT    ROT
\begin_inset Newline newline
\end_inset

    REPEAT 2DROP ;
\begin_inset Newline newline
\end_inset

: c!-be ( ...
 a n -- )   CELL /MOD SWAP >R  ?DUP
\begin_inset Newline newline
\end_inset

    IF  0 DO  SWAP OVER CELL 1c!-be CELL+ LOOP
\begin_inset Newline newline
\end_inset

    THEN  R> ?DUP IF  1c!-be  ELSE DROP THEN ;
\begin_inset Newline newline
\end_inset

[THEN]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Scrap
<<endians>>=
\begin_inset Newline newline
\end_inset

<<c!-le>>
\begin_inset Newline newline
\end_inset

<<c!-be>>
\begin_inset Newline newline
\end_inset

<<c@-le>>
\begin_inset Newline newline
\end_inset

<<c@-be>>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

VARIABLE c@-xx
\begin_inset Newline newline
\end_inset

VARIABLE c!-xx
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: nC@ ( a n -- u|d )   c@-xx @ EXECUTE ;
\begin_inset Newline newline
\end_inset

: nC! ( u|d a n -- )   c!-xx @ EXECUTE ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: LITTLE-ENDIAN ( -- )   ['] c@-le c@-xx !  ['] c!-le c!-xx ! ;
\begin_inset Newline newline
\end_inset

:    BIG-ENDIAN ( -- )   ['] c@-be c@-xx !  ['] c!-be c!-xx ! ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: LITTLE-ENDIAN? ( -- flag )   ['] c@-le c@-xx @ = ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

BIG-ENDIAN 
\backslash
 Default
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
@LINK
\begin_inset space ~
\end_inset

!LINK
\begin_inset space ~
\end_inset

,LINK
\family default
 Do relocation translation, if needed.
\end_layout

\begin_layout Scrap
<<@!,link>>=
\begin_inset Newline newline
\end_inset

: @LINK ( a -- a )   [defined] @REL [IF]
\begin_inset Newline newline
\end_inset

        @REL  [ELSE]  @  [THEN] ;
\begin_inset Newline newline
\end_inset

: !LINK ( a1 a2 -- )   [defined] !REL [IF]
\begin_inset Newline newline
\end_inset

        !REL  [ELSE]  !  [THEN] ;
\begin_inset Newline newline
\end_inset

: ,LINK ( a -- )   [defined] ,REL [IF]
\begin_inset Newline newline
\end_inset

        ,REL  [ELSE]  ,  [THEN] ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
LINKS
\family default
 (
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

-- a'
\begin_inset space \space{}
\end_inset

) Searches the linked list until it finds the last entry in the list (the
 one with a 0 link).
\end_layout

\begin_layout Scrap
<<links>>=
\begin_inset Newline newline
\end_inset

<<@!,link>>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: LINKS ( a -- a' )   BEGIN  DUP @LINK ?DUP WHILE  NIP  REPEAT ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

<<>link>>
\begin_inset Newline newline
\end_inset

<<<link>>
\begin_inset Newline newline
\end_inset

<<unlink>>
\begin_inset Newline newline
\end_inset

<<calls>>
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
>LINK
\family default
 (
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

) Adds the top of the dictionary to the given linked list.
\end_layout

\begin_layout Scrap
<<>link>>=
\begin_inset Newline newline
\end_inset

: >LINK ( a -- )   ALIGN HERE  OVER @LINK ,LINK  SWAP !LINK ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
<LINK
\family default
 (
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

) Adds the top of the dictionary to the end of the given linked list.
\end_layout

\begin_layout Scrap
<<<link>>=
\begin_inset Newline newline
\end_inset

: <LINK ( a -- )   LINKS  >LINK ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
UNLINK
\family default
 (
\begin_inset space \space{}
\end_inset

a a'
\begin_inset space \space{}
\end_inset

-- a
\begin_inset space \space{}
\end_inset

) Breaks the link of the given entry, resetting it to the link pointed to
 by the element on top of the stack.
\end_layout

\begin_layout Scrap
<<unlink>>=
\begin_inset Newline newline
\end_inset

: UNLINK ( a a' -- a )   @LINK OVER !LINK ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
CALLS
\family default
 (
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

) Runs down a linked list, executing the high level code that follows each
 entry in the list.
\end_layout

\begin_layout Scrap
<<calls>>=
\begin_inset Newline newline
\end_inset

: CALLS ( a -- )
\begin_inset Newline newline
\end_inset

    BEGIN
\begin_inset Newline newline
\end_inset

        @LINK ?DUP WHILE
\begin_inset Newline newline
\end_inset

        DUP >R  1 CELLS + @LINK EXECUTE  R>
\begin_inset Newline newline
\end_inset

    REPEAT ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
append
\family default
 (
\begin_inset space \space{}
\end_inset

a1 n a2
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

) Add a string to a counted string.
\end_layout

\begin_layout Scrap
<<append>>=
\begin_inset Newline newline
\end_inset

: append ( from len to -- )   2DUP >R >R  COUNT + SWAP MOVE
\begin_inset Newline newline
\end_inset

    R> R@ C@ + R> C! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
place
\family default
 (
\begin_inset space \space{}
\end_inset

a1 n a2
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

) Place a counted string.
\end_layout

\begin_layout Scrap
<<place>>=
\begin_inset Newline newline
\end_inset

: place ( from len to -- )   0 OVER C! SWAP 255 MIN SWAP APPEND ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
,string
\family default
 (
\begin_inset space \space{}
\end_inset

a n
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

) Compile a counted string.
\end_layout

\begin_layout Scrap
<<,string>>=
\begin_inset Newline newline
\end_inset

: ,string ( str len -- a )   HERE DUP >R OVER 1+ ALLOT place R> ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\series bold
$c,
\series default
 (
\begin_inset space \space{}
\end_inset

a n
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

) Compile a string.
\end_layout

\begin_layout Scrap
<<string-c,>>=
\begin_inset Newline newline
\end_inset

: $c, ( str len -- )   OVER + SWAP ?DO  I C@ C,  LOOP ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\series bold
spin
\series default
 (
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

) Show activity.
\end_layout

\begin_layout Scrap
<<spin>>=
\begin_inset Newline newline
\end_inset

[defined] spin 0= [IF] : spin ; IMMEDIATE [THEN]
\begin_inset Newline newline
\end_inset

<<-spin>>
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\series bold
-spin
\series default
 (
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

) Stop showing activity.
\end_layout

\begin_layout Scrap
<<-spin>>=
\begin_inset Newline newline
\end_inset

[defined] -spin 0= [IF] : -spin ; IMMEDIATE [THEN]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description
-TEXT takes the address of two strings and a length and returns +1 if the
 1st string has a higher ASCII value, -1 if it has a lower value, and 0
 (false) if they are equal.
 The string length must be even.
 If the length is odd, it will be rounded down to the next even value.
\end_layout

\begin_layout Scrap
<<-text>>=
\begin_inset Newline newline
\end_inset

: -TEXT ( a1 n a2 -- flag )
\begin_inset Newline newline
\end_inset

    REVERSE @ IF
\begin_inset Newline newline
\end_inset

        0  ROT 2/ 0 DO
\begin_inset Newline newline
\end_inset

            ROT DUP 2 nC@ >R 2 +
\begin_inset Newline newline
\end_inset

            ROT DUP 2 nC@ >R 2 +
\begin_inset Newline newline
\end_inset

            ROT R> R> - ?DUP IF
\begin_inset Newline newline
\end_inset

                NIP 0< IF
\begin_inset Newline newline
\end_inset

                    1  ELSE  -1
\begin_inset Newline newline
\end_inset

        THEN  LEAVE  THEN  LOOP  NIP NIP
\begin_inset Newline newline
\end_inset

    ELSE  OVER COMPARE  THEN ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
In addition, Open Firmware does not presently contain the following ANS
 Forth words:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
SAVE-INPUT RESTORE-INPUT M+ ALLOCATE FREE RESIZE
\end_layout

\begin_layout Standard
Additionally, the 
\family typewriter
\series bold
BYTE-LOAD
\family default
\series default
 method is used to conditionally compile support for Open Firmware specific
 features.
 For example, the 1275 tokenizer does not directly support defining words,
 so extensions to the tokenizer must be defined every time one of these
 words is defined.
 The disk based file support words are also not directly supported, so they
 are not loaded into the Open Firmware package.
\end_layout

\begin_layout Standard
The Data Base Support Package is compiled with the rest of the Open Firmware
 kernel, so there may be other dependencies, beyond the 1275 specified words,
 which have not been identified at this point.
 The package is optionally byte-loaded into the 
\family typewriter
\series bold
/packages
\family default
\series default
 node and it optionally byte-loads the applications which use it.
 This creates a compile time binding (i.e.
 early binding) between the kernel, this package, and the applications,
 which is required at the present time.
 Future work will be needed to remove this dependency.
\end_layout

\begin_layout Standard
Systems that use this package should compile their applications in 
\family typewriter
\series bold
THE-FILES.of
\family default
\series default
, following the compile of the 
\family typewriter
\series bold
database.of
\family default
\series default
 file
\end_layout

\begin_layout Standard
The following modules rely on the Database operators:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
-1 -1 tokenize-list OF/OFSources/Common/Database.of
\begin_inset Newline newline
\end_inset

 Encode-Driver BuildResults/Build/Obj/Database.lzss
\begin_inset Newline newline
\end_inset

 -1 -1 tokenize-list OF/OFSources/IO/smu/sdb-parser.of
\begin_inset Newline newline
\end_inset

 Encode-Driver BuildResults/Build/Obj/sdb-parser.lzss
\end_layout

\begin_layout Standard
Add their applications to 
\family typewriter
\series bold
The-Drivers.fo
\family default
\series default
:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
LoadDriver Database
\begin_inset Newline newline
\end_inset

LoadDriver sdb-parser
\end_layout

\begin_layout Standard

\family typewriter
\series bold
AddDriver Database
\begin_inset Newline newline
\end_inset

AddDriver sdb-parser
\end_layout

\begin_layout Standard
And the byte load of their applications to 
\family typewriter
\series bold
Database.of
\family default
\series default
:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
" sdb-parser" ['] byte-load-driver CATCH IF 2DROP THEN
\end_layout

\begin_layout Standard
Then, their application interfaces can be called as needed:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
0 0 " database" $open-package ?dup
\begin_inset Newline newline
\end_inset

if >r [char] B " distribute-sdb-properties" r@ $call-method
\begin_inset Newline newline
\end_inset

 r> close-package
\begin_inset Newline newline
\end_inset

then 
\end_layout

\begin_layout Subsection

\series bold
Creating a Simple File 
\begin_inset CommandInset label
LatexCommand label
name "sub:Creating-a-Simple-File"

\end_inset


\end_layout

\begin_layout Standard
This section introduces the procedures for creating a simple file by way
 of an example, and provides a contextual framework for the detailed sections
 that follow.
\end_layout

\begin_layout Standard
In this section we are assuming that we already know how to structure our
 data; we are concerned here only with the mechanical aspects of file creation
 and field layout.
 For a more general discussion of data base design, see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Data-Base-Design"

\end_inset

.
\end_layout

\begin_layout Standard
Our simple example will be a file of names and addresses.
 To avoid extra detail, we will only use alphanumeric fields.
 No attempt will be made at keeping a sorted file (ordered indexes are discussed
 in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Ordered-Index-Files"

\end_inset

).
\end_layout

\begin_layout Scrap
<<people>>=
\begin_inset Newline newline
\end_inset

<<people-fields>>
\begin_inset Newline newline
\end_inset

<<people-file>>
\begin_inset Newline newline
\end_inset

<<people-initialize>>
\begin_inset Newline newline
\end_inset

<<enter-person>>
\begin_inset Newline newline
\end_inset

<<display-person>>
\begin_inset Newline newline
\end_inset

<<display-everyone>>
\begin_inset Newline newline
\end_inset

<<all-people>>
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard

\series bold
Step 1
\end_layout

\begin_layout Standard
Define the fields:
\end_layout

\begin_layout Scrap
<<people-fields>>=
\begin_inset Newline newline
\end_inset

0  20 BYTES NAME   20 BYTES STREET
\begin_inset Newline newline
\end_inset

   14 BYTES CITY    2 BYTES STATE
\begin_inset Newline newline
\end_inset

    6 BYTES ZIP    14 BYTES PHONE   DROP 
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
In the above lines we have defined six Forth words, which will reference
 the individual fields in each record.
 The initial zero is the relative position within the record.
 The defining word 
\family typewriter
\series bold
BYTES
\family default
\series default
 creates an alphanumeric field of the specified width (the width must be
 an even number on cell-aligned processors).
 The final 
\family typewriter
\series bold
DROP
\family default
\series default
 is necessary to discard the final relative position within the record (see
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Record-Description"

\end_inset

).
\end_layout

\begin_layout Standard
In addition to 
\family typewriter
\series bold
BYTES
\family default
\series default
, several other defining words are available for creating different types
 of fields (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Field-Definitions"

\end_inset

).
\end_layout

\begin_layout Standard

\series bold
Step 2
\end_layout

\begin_layout Standard
Determine how many records and blocks the file will need.
 Two words that are not generally resident are available in the 
\begin_inset Quotes eld
\end_inset

file initialization block.
\begin_inset Quotes erd
\end_inset


\begin_inset Foot
status open

\begin_layout Plain Layout
In polyFORTH this block is not generally resident, because it is used only
 in the initial creation of the data base.
 It may usually be found at 
\family typewriter
\series bold
FILES 5 +
\family default
\series default
.
\end_layout

\end_inset

 
\family typewriter
\series bold
#R
\family default
\series default
 computes the number of records of given size that would fit in a given
 number of blocks; 
\family typewriter
\series bold
#B
\family default
\series default
 computes the reverse: the number of blocks needed to hold a given number
 of records of given size (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:The-FILE-Definition"

\end_inset

).
\end_layout

\begin_layout Standard

\series bold
Step 3
\end_layout

\begin_layout Standard
Define the file:
\end_layout

\begin_layout Scrap
<<people-file>>=
\begin_inset Newline newline
\end_inset

FILE People.dbf
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: /People ( -- ) 
\backslash
 Runtime file setup
\begin_inset Newline newline
\end_inset

    People.dbf  S" People.dbf" >FILE
\begin_inset Newline newline
\end_inset

    TRUE REVERSE !  LITTLE-ENDIAN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

76 500 400 BLOCK-DATA PEOPLE
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
This statement defines a file called 
\family typewriter
\series bold
PEOPLE
\family default
\series default
, which contains records that are each 74 bytes in length.
 The file will hold a maximum of 500 records.
 The starting block will be 400 (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:The-FILE-Definition"

\end_inset

).
\end_layout

\begin_layout Standard
Invoking the filename 
\family typewriter
\series bold
PEOPLE
\family default
\series default
 makes this file current.
\end_layout

\begin_layout Standard

\series bold
Step 4
\end_layout

\begin_layout Standard
Initialize the file.
 Load the file initialization block (if it's not already loaded) and execute
 the phrase:
\end_layout

\begin_layout Scrap
<<people-initialize>>=
\begin_inset Newline newline
\end_inset


\backslash
 PEOPLE INITIALIZE
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
to fill all blocks in the file with zeroes (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:File-Initialization-Utility"

\end_inset

).
\end_layout

\begin_layout Standard

\series bold
Step 5
\end_layout

\begin_layout Standard
Enter data.
\end_layout

\begin_layout Standard
Here is the definition of a word that will allow data entry for a single
 record (person):
\end_layout

\begin_layout Scrap
<<enter-person>>=
\begin_inset Newline newline
\end_inset

: enter-person   PEOPLE  SLOT READ
\begin_inset Newline newline
\end_inset

    CR ." Name? "     NAME ASK
\begin_inset Newline newline
\end_inset

    CR ." Address? "  STREET ASK
\begin_inset Newline newline
\end_inset

    CR ." City? "     CITY ASK
\begin_inset Newline newline
\end_inset

    CR ." State? "    STATE ASK
\begin_inset Newline newline
\end_inset

    CR ." Zip? "      ZIP ASK
\begin_inset Newline newline
\end_inset

    CR ." Phone? "    PHONE ASK ; 
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
By invoking 
\family typewriter
\series bold
PEOPLE
\family default
\series default
, we select the 
\family typewriter
\series bold
PEOPLE
\family default
\series default
 file as the current file.
\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
SLOT
\family default
\series default
 allocates a new record in the current file, and leaves its number on the
 stack (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Record-Allocation/Deallocation-Operators"

\end_inset

).
 The word 
\family typewriter
\series bold
READ
\family default
\series default
 sets the current record according to the number on the stack (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Record-Selection"

\end_inset

).
\end_layout

\begin_layout Standard
Next, the definition prompts the user to enter the 
\begin_inset Quotes eld
\end_inset

name
\begin_inset Quotes erd
\end_inset

 field.
 The word 
\family typewriter
\series bold
ASK
\family default
\series default
 is like 
\family typewriter
\series bold
EXPECT
\family default
\series default
, except that it places the expected text in the given field.
 The same process is followed for the remaining five fields.
\end_layout

\begin_layout Standard

\series bold
Step 6
\end_layout

\begin_layout Standard
Display the data.
\end_layout

\begin_layout Standard
We define the following word to display the current record:
\end_layout

\begin_layout Scrap
<<display-person>>=
\begin_inset Newline newline
\end_inset

: display-person   CR NAME B?  CR STREET B?  CR
\begin_inset Newline newline
\end_inset

    CITY B?  STATE B?  ZIP B?  PHONE B? ; 
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
B?
\family default
\series default
 displays the contents of the given 
\family typewriter
\series bold
BYTES
\family default
\series default
 field (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Field-Reference-Operators"

\end_inset

).
\end_layout

\begin_layout Standard
To display the contents of all records that have been entered, we define:
\end_layout

\begin_layout Scrap
<<display-everyone>>=
\begin_inset Newline newline
\end_inset

: display-everyone   PEOPLE RECORDS DO CR
\begin_inset Newline newline
\end_inset

    I READ  display-person  LOOP ; 
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Invoking 
\family typewriter
\series bold
PEOPLE
\family default
\series default
 makes the 
\family typewriter
\series bold
PEOPLE
\family default
\series default
 file current.
 The word 
\family typewriter
\series bold
RECORDS
\family default
\series default
 returns the appropriate arguments for a 
\family typewriter
\series bold
DO
\begin_inset space \space{}
\end_inset

...
\begin_inset space \space{}
\end_inset

LOOP
\family default
\series default
, including all records that have been allocated by 
\family typewriter
\series bold
SLOT
\family default
\series default
 in the current file (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Record-Allocation/Deallocation-Operators"

\end_inset

).
\end_layout

\begin_layout Standard
Within the 
\family typewriter
\series bold
DO
\family default
\series default
 loop, 
\family typewriter
\series bold
READ
\family default
\series default
 makes each record current in turn, and 
\family typewriter
\series bold
display-person
\family default
\series default
 displays the information for that record.
\end_layout

\begin_layout Standard
\noindent
\align left
Here is a sample of the output of 
\family typewriter
\series bold
display-everyone
\family default
\series default
:
\end_layout

\begin_layout Standard
\noindent
\align left
\begin_inset listings
inline false
status open

\begin_layout Plain Layout
\noindent
\align left

Andrews, Carl 
\end_layout

\begin_layout Plain Layout
\noindent
\align left

1432 Morriston Ave.
 
\end_layout

\begin_layout Plain Layout
\noindent
\align left

Parkerville PA 17214 (717) 555-9853
\end_layout

\begin_layout Plain Layout
\noindent
\align left

\end_layout

\begin_layout Plain Layout
\noindent
\align left

Boehning, Greg 
\end_layout

\begin_layout Plain Layout
\noindent
\align left

POB 41256 
\end_layout

\begin_layout Plain Layout
\noindent
\align left

Santa Cruz CA 95061 (408) 666-7891
\end_layout

\begin_layout Plain Layout
\noindent
\align left

\end_layout

\begin_layout Plain Layout
\noindent
\align left

Chapel, Doug 
\end_layout

\begin_layout Plain Layout
\noindent
\align left

75 Fleetwood Dr.
 
\end_layout

\begin_layout Plain Layout
\noindent
\align left

Rockville MD 20852 (301) 777-1259
\end_layout

\begin_layout Plain Layout
\noindent
\align left

\end_layout

\begin_layout Plain Layout
\noindent
\align left

Cook, Dottie 
\end_layout

\begin_layout Plain Layout
\noindent
\align left

154 Sweet Rd.
 
\end_layout

\begin_layout Plain Layout
\noindent
\align left

Grand Prairie TX 75050 (214) 642-0011 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left
To produce columnar output, we would use the 
\begin_inset Quotes eld
\end_inset

Report Generator
\begin_inset Quotes erd
\end_inset

 (
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Report-Generator"

\end_inset

).
\end_layout

\begin_layout Standard
For deleting records, we would use the word 
\family typewriter
\series bold
SCRATCH
\family default
\series default
 (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Record-Allocation/Deallocation-Operators"

\end_inset

).
 
\end_layout

\begin_layout Subsection

\series bold
File Definition and Access
\begin_inset CommandInset label
LatexCommand label
name "sub:File-Definition-and-Access"

\end_inset


\end_layout

\begin_layout Standard
A polyFORTH file is a contiguous region of Forth blocks.
 On native versions of polyFORTH this means that the file will be physically
 contiguous, and that you can arrange for files that are accessed together
 to be physically near one another.
 This can significantly speed up a data base application.
\end_layout

\begin_layout Standard
Versions of polyFORTH that are co-resident with a 
\begin_inset Quotes eld
\end_inset

host
\begin_inset Quotes erd
\end_inset

 operating system (such as MS-DOS or RSX) are identical from the point of
 view of the programmer, but since allocation of physical disk space is
 performed by the host operating system you haven't the actual level of
 control you do on the native versions.
\end_layout

\begin_layout Standard
This section discusses how files are defined and referenced on all polyFORTH
 systems.
 
\end_layout

\begin_layout Subsubsection

\series bold
The FILE Definition
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:The-FILE-Definition"

\end_inset


\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
FILE
\family default
\series default
 is used to group a collection of Data Bases under a single name.
 Each Data Base within the group will use the same access operators.
 Presently, there are 2 types of access operators, disk based (
\family typewriter
\series bold
>FILE
\family default
\series default
) and memory based (
\family typewriter
\series bold
>MEMORY
\family default
\series default
).
 The disk based operators can not be used within Open Firmware, since the
 creation of files has not been fully developed yet.
 However, in gforth, they are used extensively by passing the pathname string
 to 
\family typewriter
\series bold
>FILE
\family default
\series default
.
 The word 
\family typewriter
\series bold
FILE=
\family default
\series default
 simply parses the input stream for the pathname string before passing it
 to 
\family typewriter
\series bold
>FILE
\family default
\series default
.
\end_layout

\begin_layout Scrap
<<file>>=
\begin_inset Newline newline
\end_inset

: (FILE) ( o n -- o+n ) 
\backslash
 Usage: (FILE) <name>
\begin_inset Newline newline
\end_inset

    CREATE  OVER , +  DOES> ( -- a )   @  F# @ + ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

0 VALUE #FILE                       
\backslash
 holds offset of next FCB field.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

#FILE 2 CELLS (FILE) FILE-HANDLE    
\backslash
 holds OS/Memory handle for this file, if open.
\begin_inset Newline newline
\end_inset

        CELL  (FILE) FILE-INIT      
\backslash
 holds initialization routines for this file.
\begin_inset Newline newline
\end_inset

        CELL  (FILE) 'NAME-FILE     
\backslash
 holds routine to name the file
\begin_inset Newline newline
\end_inset

        CELL  (FILE) 'BIND-FILE     
\backslash
 holds routine to bind the file to a path.
\begin_inset Newline newline
\end_inset

        CELL  (FILE) 'UNBIND-FILE   
\backslash
 holds routine to unbind the file.
\begin_inset Newline newline
\end_inset

        CELL  (FILE) 'READ-RECORD   
\backslash
 holds routine to read a record from the file.
\begin_inset Newline newline
\end_inset

        CELL  (FILE) 'WRITE-RECORD  
\backslash
 holds routine to write a record to the file.
\begin_inset Newline newline
\end_inset

        CELL  (FILE) 'DESTROY-FILE  
\backslash
 holds routine to delete the file.
\begin_inset Newline newline
\end_inset

        256   (FILE) FILE-NAME      
\backslash
 holds path and name of the file.
\begin_inset Newline newline
\end_inset

TO #FILE
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: SET-FILE ( addr -- )   F# ! ;
\begin_inset Newline newline
\end_inset

: SET-DATA ( addr -- )   DB# ! ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: (NAME-FILE) ( str len -- )   FILE-NAME DUP 256 ERASE place ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: NAME-FILE ( str len -- )   'NAME-FILE @ ?DUP IF  EXECUTE
\begin_inset Newline newline
\end_inset

    ELSE  2DROP  THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: READ-RECORD ( d a n -- n' ior )   'READ-RECORD @ ?DUP IF  EXECUTE
\begin_inset Newline newline
\end_inset

    ELSE  NIP NIP NIP 0  THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: WRITE-RECORD ( d a n -- ior )   'WRITE-RECORD @ ?DUP IF  EXECUTE
\begin_inset Newline newline
\end_inset

    ELSE  2DROP 2DROP 0  THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: DESTROY-FILE ( -- ior )   'DESTROY-FILE @ ?DUP IF EXECUTE ELSE 0 THEN
 ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: BIND-FILE ( -- )   FILE-HANDLE @ 0=
\begin_inset Newline newline
\end_inset

    IF  'BIND-FILE @ ?DUP
\begin_inset Newline newline
\end_inset

        IF  EXECUTE
\begin_inset Newline newline
\end_inset

        THEN  FILE-HANDLE !
\begin_inset Newline newline
\end_inset

    THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: -FILE ( -- )   FILE-HANDLE @ ?DUP
\begin_inset Newline newline
\end_inset

    IF  'UNBIND-FILE @ ?DUP
\begin_inset Newline newline
\end_inset

        IF  EXECUTE
\begin_inset Newline newline
\end_inset

        THEN  0 FILE-HANDLE !
\begin_inset Newline newline
\end_inset

    THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: FILE-ALLOT ( -- )
\begin_inset Newline newline
\end_inset

    HERE DUP SET-FILE  #FILE DUP ALLOT ERASE
\begin_inset Newline newline
\end_inset

    ['] (NAME-FILE) 'NAME-FILE ! ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: FILE ( -- ) 
\backslash
 Usage: FILE <name>
\begin_inset Newline newline
\end_inset

    SAVE-INPUT  CREATE  RESTORE-INPUT THROW
\begin_inset Newline newline
\end_inset

    FILE-ALLOT  BL WORD COUNT NAME-FILE
\begin_inset Newline newline
\end_inset

    DOES> ( -- )   SET-FILE ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: FILES-NAME ( str len -- )
\begin_inset Newline newline
\end_inset

    [defined] ?FileName [IF]  0 TO ?FileName  ,ObjName
\begin_inset Newline newline
\end_inset

    [THEN]  (NAME-FILE) ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: FILES-BIND ( -- handle )
\begin_inset Newline newline
\end_inset

    FILE-NAME COUNT 2DUP R/W OPEN-FILE
\begin_inset Newline newline
\end_inset

    IF  DROP R/W CREATE-FILE THROW
\begin_inset Newline newline
\end_inset

    ELSE  -ROT 2DROP
\begin_inset Newline newline
\end_inset

    THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: FILES-UNBIND ( handle -- )   CLOSE-FILE THROW ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: FILES-READ ( d a n -- n' ior )
\begin_inset Newline newline
\end_inset

    FILE-HANDLE @ 0= DUP >R IF  BIND-FILE  THEN
\begin_inset Newline newline
\end_inset

    2SWAP FILE-HANDLE @ REPOSITION-FILE ?DUP IF  ROT DROP
\begin_inset Newline newline
\end_inset

    ELSE  FILE-HANDLE @ READ-FILE
\begin_inset Newline newline
\end_inset

    THEN  R> IF  -FILE  THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: FILES-WRITE ( d a n -- ior )
\begin_inset Newline newline
\end_inset

    FILE-HANDLE @ 0= DUP >R IF  BIND-FILE  THEN
\begin_inset Newline newline
\end_inset

    2SWAP FILE-HANDLE @ REPOSITION-FILE ?DUP IF  -ROT 2DROP
\begin_inset Newline newline
\end_inset

    ELSE  FILE-HANDLE @ WRITE-FILE
\begin_inset Newline newline
\end_inset

    THEN  R> IF  -FILE  THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: FILES-DESTROY ( -- ior )   FILE-NAME COUNT DELETE-FILE ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: >FILE ( str len -- )   -FILE
\begin_inset Newline newline
\end_inset

    ['] FILES-NAME 'NAME-FILE !
\begin_inset Newline newline
\end_inset

    ['] FILES-BIND 'BIND-FILE !
\begin_inset Newline newline
\end_inset

    ['] FILES-UNBIND 'UNBIND-FILE !
\begin_inset Newline newline
\end_inset

    ['] FILES-READ 'READ-RECORD !
\begin_inset Newline newline
\end_inset

    ['] FILES-WRITE 'WRITE-RECORD !
\begin_inset Newline newline
\end_inset

    ['] FILES-DESTROY 'DESTROY-FILE !
\begin_inset Newline newline
\end_inset

    NAME-FILE  BIND-FILE
\begin_inset Newline newline
\end_inset

    FILE-INIT CALLS
\begin_inset Newline newline
\end_inset

    KEEP-CLOSED @ IF
\begin_inset Newline newline
\end_inset

        -FILE
\begin_inset Newline newline
\end_inset

    THEN  ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: FILE= ( -- )   BL WORD COUNT  DUP 1+ ALLOCATE THROW
\begin_inset Newline newline
\end_inset

    DUP >R place R@ COUNT >FILE  R> FREE THROW ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: <FILE ( xt -- )   FILE-INIT <LINK ,LINK ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
In Open Firmware, the Data Base groups are typically created at compile
 time and compiled into Open Firmware with 
\family typewriter
\series bold
encode-file
\family default
\series default
.
 Since this puts the data into the dictionary, the word 
\family typewriter
\series bold
HERE>MEMORY
\family default
\series default
 is used to put the data into the buddy memory manager which can be used
 by the 
\family typewriter
\series bold
>MEMORY
\family default
\series default
 access operators.
\end_layout

\begin_layout Scrap
<<memory>>=
\begin_inset Newline newline
\end_inset

: MEMORY-BIND ( -- handle )   2 B/R @ #B 1024 * 
\backslash
 2 records minimum
\begin_inset Newline newline
\end_inset

    DUP FILE-HANDLE CELL+ !  DUP ALLOCATE THROW
\begin_inset Newline newline
\end_inset

    DUP ROT ERASE ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: MEMORY-UNBIND ( handle -- )   FREE THROW ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: MEMORY-READ ( d a n -- n' ior )   BIND-FILE
\begin_inset Newline newline
\end_inset

    2SWAP IF  DROP NIP -24 EXIT  THEN      
\backslash
 invalid numeric argument, file too large
\begin_inset Newline newline
\end_inset

    FILE-HANDLE CELL+ @ 2DUP >             
\backslash
 limit record position to file size
\begin_inset Newline newline
\end_inset

    IF  SWAP  THEN  DROP SWAP OVER +
\begin_inset Newline newline
\end_inset

    FILE-HANDLE CELL+ @ 2DUP >             
\backslash
 limit record size to file size
\begin_inset Newline newline
\end_inset

    IF  SWAP  THEN  DROP OVER -
\begin_inset Newline newline
\end_inset

    DUP >R  SWAP FILE-HANDLE @ +
\begin_inset Newline newline
\end_inset

    ROT ROT MOVE  R> 0 ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: MEMORY-WRITE ( d a n -- ior )   BIND-FILE
\begin_inset Newline newline
\end_inset

    2SWAP IF  DROP 2DROP -24 EXIT  THEN    
\backslash
 invalid numeric argument, file too large
\begin_inset Newline newline
\end_inset

    SWAP OVER +  DUP FILE-HANDLE CELL+ @ > 
\backslash
 record position + size > file size
\begin_inset Newline newline
\end_inset

    IF  FILE-HANDLE @ OVER RESIZE ?DUP
\begin_inset Newline newline
\end_inset

        IF  >R 2DROP 2DROP R> EXIT         
\backslash
 can't resize the memory
\begin_inset Newline newline
\end_inset

        THEN  FILE-HANDLE !
\begin_inset Newline newline
\end_inset

        DUP FILE-HANDLE CELL+ !
\begin_inset Newline newline
\end_inset

    THEN  OVER - SWAP FILE-HANDLE @ +
\begin_inset Newline newline
\end_inset

    SWAP MOVE  0 ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: >MEMORY ( addr len -- )   -FILE
\begin_inset Newline newline
\end_inset

    ['] MEMORY-BIND 'BIND-FILE !
\begin_inset Newline newline
\end_inset

    ['] MEMORY-UNBIND 'UNBIND-FILE !
\begin_inset Newline newline
\end_inset

    ['] MEMORY-READ 'READ-RECORD !
\begin_inset Newline newline
\end_inset

    ['] MEMORY-WRITE 'WRITE-RECORD !
\begin_inset Newline newline
\end_inset

    SWAP FILE-HANDLE 2!  BIND-FILE
\begin_inset Newline newline
\end_inset

    FILE-INIT CALLS ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The words 
\family typewriter
\series bold
BLOCK-DATA
\family default
\series default
 or 
\family typewriter
\series bold
STRUCTURE
\family default
\series default
 are used to define files, given the attributes of the file.
 The format is:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
length limit origin BLOCK-DATA name
\end_layout

\begin_layout Standard
where:
\end_layout

\begin_layout Description

\series bold
Word Description
\end_layout

\begin_layout Description

\family typewriter
length
\family default
 is the length of each record in bytes (maximum 1024 using 
\family typewriter
\series bold
BLOCK-DATA
\family default
\series default
);
\end_layout

\begin_layout Description

\family typewriter
limit
\family default
 is the maximum number of records (on 16-bit processors the limit is 32767
 records per file);
\end_layout

\begin_layout Description

\family typewriter
origin
\family default
 is the first block number, and
\end_layout

\begin_layout Description

\family typewriter
name
\family default
 is the user-assigned name of the file.
\end_layout

\begin_layout Standard
The defining words 
\family typewriter
\series bold
BLOCK-DATA
\family default
\series default
 and 
\family typewriter
\series bold
STRUCTURE
\family default
\series default
 create a new name (dictionary entry) that, when invoked, will make this
 file current.
 The dictionary entry contains the 
\series bold
F
\series default
ile 
\series bold
D
\series default
efinition 
\series bold
A
\series default
rea (FDA) for the file being defined.
 
\family typewriter
\series bold
BLOCK-DATA
\family default
\series default
 will make sure that records do not overlap across 1K boundaries, while
 
\family typewriter
\series bold
STRUCTURE
\family default
\series default
 does not impose this additional overhead.
\end_layout

\begin_layout Scrap
<<block>>=
\begin_inset Newline newline
\end_inset

: (DATA) ( o n -- o+n ) 
\backslash
 Usage: (DATA) <name>
\begin_inset Newline newline
\end_inset

    CREATE  OVER , +  DOES> ( -- a )   @  DB# @ + ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

0 VALUE #DATA               
\backslash
 holds offset of next DCB field.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

#DATA CELL (DATA) ORG       
\backslash
 holds offset to first record in the file.
\begin_inset Newline newline
\end_inset

      CELL (DATA) LIM       
\backslash
 holds number of records in file.
\begin_inset Newline newline
\end_inset

      CELL (DATA) B/B       
\backslash
 holds bytes used per block.
\begin_inset Newline newline
\end_inset

      CELL (DATA) B/R       
\backslash
 holds bytes per record.
\begin_inset Newline newline
\end_inset

      CELL (DATA) DATA-BFR  
\backslash
 holds address of record buffer.
\begin_inset Newline newline
\end_inset

      CELL (DATA) 'RECORD   
\backslash
 holds the vector for record access.
\begin_inset Newline newline
\end_inset

      CELL (DATA) 'TOUCH    
\backslash
 holds the vector for field update.
\begin_inset Newline newline
\end_inset

      CELL (DATA) #REC      
\backslash
 holds the record number last accessed in this file.
\begin_inset Newline newline
\end_inset

                            
\backslash
  This is used with BOUND-FIELDS.
\begin_inset Newline newline
\end_inset

      CELL (DATA) #INDEX    
\backslash
 holds index of COPIES field.
\begin_inset Newline newline
\end_inset

       256 (DATA) DATA-NAME 
\backslash
 holds name of the database.
\begin_inset Newline newline
\end_inset

TO #DATA
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: NAME-DATA ( str len -- )   DATA-NAME DUP 256 ERASE place ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: BLOCK-POSITION ( n -- d )   DUP #REC !
\begin_inset Newline newline
\end_inset

    B/R @  B/B @ */MOD  1024 UM*  ROT M+
\begin_inset Newline newline
\end_inset

    ORG @ M+ ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: (RECORD) ( d -- a )
\begin_inset Newline newline
\end_inset

    DATA-BFR @ B/R @ READ-RECORD IF
\begin_inset Newline newline
\end_inset

        DROP DATA-BFR @ B/R @ ERASE
\begin_inset Newline newline
\end_inset

    ELSE  B/R @ OVER - ?DUP IF
\begin_inset Newline newline
\end_inset

            DATA-BFR @ ROT + SWAP ERASE
\begin_inset Newline newline
\end_inset

        ELSE  DROP  THEN
\begin_inset Newline newline
\end_inset

    THEN  DATA-BFR @ ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: (TOUCH) ( d -- )   DATA-BFR @ B/R @ WRITE-RECORD THROW ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: BLOCK-RECORD ( n -- a )   BLOCK-POSITION (RECORD) ;
\begin_inset Newline newline
\end_inset

: BLOCK-TOUCH ( -- )   #REC @ BLOCK-POSITION (TOUCH) ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: (BLOCK-DATA) ( b r o -- )
\begin_inset Newline newline
\end_inset

    HERE DUP SET-DATA  #DATA DUP ALLOT ERASE
\begin_inset Newline newline
\end_inset

    ORG !  LIM !  0 #REC !  0 #INDEX !
\begin_inset Newline newline
\end_inset

    1024 OVER / OVER *  B/B !  B/R !
\begin_inset Newline newline
\end_inset

    HERE DATA-BFR !  B/R @ ALLOT
\begin_inset Newline newline
\end_inset

    ['] BLOCK-RECORD 'RECORD !
\begin_inset Newline newline
\end_inset

    ['] BLOCK-TOUCH 'TOUCH ! ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: BLOCK-DATA ( b r o _ -- ) 
\backslash
 Usage: BLOCK-DATA <name>
\begin_inset Newline newline
\end_inset

    SAVE-INPUT  CREATE  RESTORE-INPUT THROW
\begin_inset Newline newline
\end_inset

    (BLOCK-DATA)  BL WORD COUNT NAME-DATA
\begin_inset Newline newline
\end_inset

    DOES> ( -- )   SET-DATA ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Scrap
<<structure>>=
\begin_inset Newline newline
\end_inset

: POSITION-FILE ( r -- d )   DUP #REC !  B/R @ UM*  ORG @ M+ ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: STRUCTURE-RECORD ( r -- a )   POSITION-FILE (RECORD) ;
\begin_inset Newline newline
\end_inset

: STRUCTURE-TOUCH ( -- )   #REC @ POSITION-FILE (TOUCH) ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: (STRUCTURE) ( b r o _ -- )
\begin_inset Newline newline
\end_inset

    HERE DUP SET-DATA  #DATA DUP ALLOT ERASE
\begin_inset Newline newline
\end_inset

    ORG !  LIM !  0 #REC !  0 #INDEX !
\begin_inset Newline newline
\end_inset

    DUP B/R !  HERE DATA-BFR !  ALLOT
\begin_inset Newline newline
\end_inset

    ['] STRUCTURE-RECORD 'RECORD !
\begin_inset Newline newline
\end_inset

    ['] STRUCTURE-TOUCH 'TOUCH ! ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: STRUCTURE ( b r o _ -- ) 
\backslash
 Usage: STRUCTURE <name>
\begin_inset Newline newline
\end_inset

    SAVE-INPUT  CREATE  RESTORE-INPUT THROW
\begin_inset Newline newline
\end_inset

    (STRUCTURE)  BL WORD COUNT NAME-DATA
\begin_inset Newline newline
\end_inset

    DOES> ( -- )   SET-DATA ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
We recommend that you define all your files in a single source area, making
 it easy to see which ranges of blocks have been allocated for other files.
 If a disk will contain source or other data along with files, it's a good
 idea to indicate these other uses in comments on the same block.
\end_layout

\begin_layout Standard
Here is an example of good file definition layout in a block:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
( Bytes Records Origin Name)
\begin_inset Newline newline
\end_inset

 26 801 500 STRUCTURE (GLOSSARY)
\begin_inset Newline newline
\end_inset

 340 800 522 STRUCTURE GLOSSARY
\begin_inset Newline newline
\end_inset

 4 10 795 STRUCTURE HITS
\begin_inset Newline newline
\end_inset

 24 42 799 STRUCTURE SECURITY
\begin_inset Newline newline
\end_inset

 38 2600 800 STRUCTURE TESTS
\end_layout

\begin_layout Standard
Note that the number of blocks may be computed from the number of bytes/
 record and number of records.
 Generally you will choose an appropriate maximum number of records, based
 on a reasonable estimate of the needs of the application and allowing for
 expansion.
 You will also have worked out the approximate size of each record based
 on the width and type of fields needed.
 Then derive the number of blocks from the number of records and size of
 each record.
 The word 
\family typewriter
\series bold
#B
\family default
\series default
 in the file initialization block is a helpful tool for computing the number
 of blocks.
 After loading this block, type:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
#records #bytes/record #B .
\end_layout

\begin_layout Standard
For instance, if your application requires 2000 records, and each record
 is 42 bytes wide, type:
\begin_inset Foot
status open

\begin_layout Plain Layout
Responses shown in light type.
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
2000 42 #B .
 
\series default
84 ok
\end_layout

\begin_layout Standard
Alternatively you can compute the number of records based on the number
 of blocks.
 The word 
\family typewriter
\series bold
#R
\family default
\series default
 in the file initialization block does the arithmetic.
 Type:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
#blocks #bytes/record #R .
\end_layout

\begin_layout Standard
For example:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
84 42 #R .
 
\series default
2016 ok
\end_layout

\begin_layout Standard
This shows that you can actually fit an extra sixteen records in the same
 number of blocks.
\end_layout

\begin_layout Standard
By using these tools, you can iterate on various sizes until you get the
 optimal combination.
 Sometimes you can increase the size of a record without increasing overall
 file size.
 For instance, if your record width is 94 bytes, it takes 200 blocks to
 store the same number of records; however 200 blocks will store 2000 records
 even when each record is 102 bytes wide:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
2000 94 #B .
 
\series default
200
\family default
\series bold

\begin_inset Newline newline
\end_inset


\family typewriter
2000 102 #B
\series default
 .
 200
\end_layout

\begin_layout Standard
It's a good idea to leave extra space in records, in case you need to add
 fields later.
 Beware, however, of grossly over sizing either your record width or file
 length, as both of these will increase head motion.
 Strive for generous but reasonable estimates.
 
\end_layout

\begin_layout Scrap
<<origin>>=
\begin_inset Newline newline
\end_inset

: #B ( nr b/r -- nb )   1024 SWAP /  DUP 1- ROT +  SWAP / ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: #R ( nb b/r -- nr )   1024 SWAP / * ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: +ORIGIN ( -- o )   LIM @ B/R @ B/B @ IF #B 1024 THEN * ORG @ + ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsubsection

\series bold
File Definition Area and Access
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:File-Definition-Area"

\end_inset


\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
STRUCTURE
\family default
\series default
 establishes a File Definition Area (FDA) for each file in the system.
 The user variable 
\family typewriter
\series bold
F#
\family default
\series default
 always points to the current FDA.
 Execution of the filename sets 
\family typewriter
\series bold
F#
\family default
\series default
 to address the associated FDA.
\end_layout

\begin_layout Standard
Each file's FDA contains four values to specify the file.
 Each of these values may be accessed by the following names, each of which
 returns the address of the associated value in the current FDA.
\end_layout

\begin_layout Standard
Name Description
\end_layout

\begin_layout Description

\family typewriter
ORG
\family default
 Starting disk-block number of the first disk block allo\SpecialChar \-
cated to the file
 (Forth logical block number as a double-precision number).
\end_layout

\begin_layout Description

\family typewriter
LIM
\family default
 Number of records, of declared record length, that the file can contain.
\end_layout

\begin_layout Description

\family typewriter
B/B
\family default
 Number of bytes used per block.
\end_layout

\begin_layout Description

\family typewriter
B/R
\family default
 Number of bytes per record.
\end_layout

\begin_layout Standard
While these words are used by the Data Base Support package, they are rarely
 referenced directly in applications.
 
\family typewriter
\series bold
ORG
\family default
\series default
 and 
\family typewriter
\series bold
LIM
\family default
\series default
 can be useful in debugging, however.
 For instance, the phrase:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
ORG 2@ D.
\end_layout

\begin_layout Standard
indicates which file is current; in case of an abort, you can tell which
 file you were in at the time.
 
\end_layout

\begin_layout Subsubsection

\series bold
File Initialization Utility
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:File-Initialization-Utility"

\end_inset


\end_layout

\begin_layout Standard
A file that has just been created must be initialized before it can be used.
 A special utility is available for this purpose.
\end_layout

\begin_layout Standard
To initialize a file, type:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
filename INITIALIZE
\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
INITIALIZE
\family default
\series default
 performs the following functions:
\end_layout

\begin_layout Enumerate
Writes binary zeros throughout the entire file (including 
\family typewriter
\series bold
AVAILABLE
\family default
\series default
).
\end_layout

\begin_layout Enumerate
Writes -1 in the entire data area of Record 1 of the file.
 This serves as a 
\begin_inset Quotes eld
\end_inset

stopper
\begin_inset Quotes erd
\end_inset

 for the binary search in an index file.
 In other kinds of files this has no effect.
\end_layout

\begin_layout Scrap
<<initialize>>=
\begin_inset Newline newline
\end_inset

: STOPPER ( -- )   1 RECORD CELL+  B/R @ CELL -  -1 FILL  TOUCH ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: INITIALIZE ( -- )
\begin_inset Newline newline
\end_inset


\backslash
   CR ." Initializing "
\begin_inset Newline newline
\end_inset

    FILE-HANDLE @ 0= DUP >R IF  BIND-FILE  THEN
\begin_inset Newline newline
\end_inset


\backslash
   DATA-NAME COUNT TYPE ." ..."
\begin_inset Newline newline
\end_inset

    LIM @ 0 DO
\begin_inset Newline newline
\end_inset

        I RECORD  B/R @  ERASE  TOUCH  spin
\begin_inset Newline newline
\end_inset

    LOOP  STOPPER  -spin
\begin_inset Newline newline
\end_inset

    R> IF  -FILE  THEN ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Two other words also defined---
\family typewriter
\series bold
#R
\family default
\series default
 and 
\family typewriter
\series bold
#B
\family default
\series default
---are useful when designing file layouts.
 
\end_layout

\begin_layout Subsubsection

\series bold
Shared Files
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Shared-Files"

\end_inset


\end_layout

\begin_layout Standard
In polyFORTH files may be either shared or unshared.
 Shared files are those that are defined in the common dictionary available
 to all users (loaded by the electives load block).
 If a file is defined in an overlay, it will be available only to the task
 or tasks in whose partition it is defined.
\end_layout

\begin_layout Standard
As we discussed in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:How-Data-is-Stored"

\end_inset

, all users may freely access the file without having to worry about simultaneou
s access problems, as long as standard polyFORTH accessing methods are used.
 This is because 
\family typewriter
\series bold
BLOCK
\family default
\series default
 ensures that there will be only one copy of a record at a time, and each
 task does not have its own private copy.
\end_layout

\begin_layout Standard
Certain situations require an extra measure of control.
 For example, one terminal might delete a record that is needed for processing
 at another terminal at a later point.
 In such as case, you may use a 
\begin_inset Quotes eld
\end_inset

status
\begin_inset Quotes erd
\end_inset

 byte in the record to control access.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Installing the Data Base Support Package, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Installing-The-Package"

\end_inset

 
\end_layout

\begin_layout Subsection

\series bold
Record Management
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Record-Management"

\end_inset


\end_layout

\begin_layout Standard
The process of record management includes selecting records, finding the
 next free record when a new record is needed, and marking deleted records
 as available for future use.
\end_layout

\begin_layout Standard
Not all applications require special record allocation techniques.
 For instance, if a file contains 100 records and each record contains informati
on on a permanent piece of equipment, which is identified by a two-digit
 num\SpecialChar \-
ber, there is no need to allocate or deallocate records.
 You may just use the equipment number as the record number.
 This is called 
\begin_inset Quotes eld
\end_inset

direct access.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
In an application in which the number of active records changes dynamic\SpecialChar \-
ally,
 it may be appropriate to use the record allocation techniques described
 here.
 
\end_layout

\begin_layout Subsubsection

\series bold
Record Selection
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Record-Selection"

\end_inset


\end_layout

\begin_layout Standard
Field reference operators (
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Field-Reference-Operators"

\end_inset

) access fields in the current record.
 The word 
\family typewriter
\series bold
READ
\family default
\series default
 makes a record current.
\end_layout

\begin_layout Description

\family typewriter
READ
\family default
 (
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

) Makes record n current, having verified that 
\shape italic
n
\shape default
 is a valid record within the current file.
\end_layout

\begin_layout Standard
The name 
\family typewriter
\series bold
READ
\family default
\series default
 is slightly misleading, in that it doesn't perform an actual disk operation,
 but merely sets a pointer to the current record.
 
\family typewriter
\series bold
READ
\family default
\series default
 checks that n is not less than zero and not greater than the value of 
\family typewriter
\series bold
LIM
\family default
\series default
.
 If 
\shape italic
n
\shape default
 fails this range test, 
\family typewriter
\series bold
READ
\family default
\series default
 aborts.
\end_layout

\begin_layout Standard

\family typewriter
\series bold
READ
\family default
\series default
 stores the number of the current record in the user variable 
\family typewriter
\series bold
R#
\family default
\series default
.
\end_layout

\begin_layout Scrap
<<read>>=
\begin_inset Newline newline
\end_inset

: SAFE ( n -- n )   DUP LIM @ U< 0= ABORT" Outside file " ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: READ ( n -- )   SAFE DUP R# !  #REC ! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Current Files and Records, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Current-Files-and-Records"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
Available Records
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Available-Records"

\end_inset


\end_layout

\begin_layout Standard
To distinguish allocated records from available records, the Data Base Support
 package uses the convention that if the first four bytes in a record contain
 binary zeroes, the record is available for use.
 When a file is ini\SpecialChar \-
tialized, all records are filled with zeroes.
\end_layout

\begin_layout Standard
Thereafter, active records may keep any non-zero data in the first four
 bytes; when a record is released, zero is stored in this area.
\end_layout

\begin_layout Standard

\series bold
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\series bold
\begin_inset Caption

\begin_layout Plain Layout

\series bold
\begin_inset CommandInset label
LatexCommand label
name "fig:5"

\end_inset


\begin_inset Graphics
	filename Records.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The search for an available record performed by 
\family typewriter
\series bold
SLOT
\family default
\series default
 
\begin_inset Quotes eld
\end_inset

wraps around
\begin_inset Quotes erd
\end_inset

 if necessary at the end of the file.
\end_layout

\begin_layout Standard
Record 0 of each file contains, in its first four bytes, the record number
 of the most recently allocated record in that file.
 The word 
\family typewriter
\series bold
AVAILABLE
\family default
\series default
 returns the address of this pointer.
 When the file is initialized, 
\family typewriter
\series bold
AVAILABLE
\family default
\series default
 is zero.
\end_layout

\begin_layout Standard
To allocate a new record, the system begins with the record immediately
 following the 
\begin_inset Quotes eld
\end_inset

available
\begin_inset Quotes erd
\end_inset

 record and searches forward for the first free record.
\end_layout

\begin_layout Standard
If the search should reach the end of the file without finding a free record
 , it 
\begin_inset Quotes eld
\end_inset

wraps
\begin_inset Quotes erd
\end_inset

 around to the beginning again, so that deleted records will be used.
 For instance, in Fig.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:5"

\end_inset

, 
\family typewriter
\series bold
AVAILABLE
\family default
\series default
 points to Record 196; however, there are no more free records between there
 and the end of the file.
 But Record 5 is free.
 By 
\begin_inset Quotes eld
\end_inset

wrapping around
\begin_inset Quotes erd
\end_inset

 to the beginning of the file, the search finds the available record.
 
\end_layout

\begin_layout Scrap
<<available>>=
\begin_inset Newline newline
\end_inset

: AVAILABLE ( -- a )   0 RECORD ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsubsection

\series bold
Record Allocation/Deallocation Operators
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Record-Allocation/Deallocation-Operators"

\end_inset


\end_layout

\begin_layout Standard
Only two words are required for allocating and deallocating records:
\end_layout

\begin_layout Description

\series bold
Word Stack Description
\end_layout

\begin_layout Description

\family typewriter
SLOT
\family default
 (
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

n) Allocates a new record in the current file and returns the number of
 the allocated record.
\end_layout

\begin_layout Description

\family typewriter
SCRATCH
\family default
 (
\begin_inset space \space{}
\end_inset

n) Deallocates record 
\shape italic
n
\shape default
 from the current file, making it available.
\end_layout

\begin_layout Scrap
<<slot>>=
\begin_inset Newline newline
\end_inset

: SLOT ( -- r )
\begin_inset Newline newline
\end_inset

    AVAILABLE 4 nC@ DUP  BEGIN
\begin_inset Newline newline
\end_inset

        1+  LIM @ MOD  2DUP = ABORT" File full"
\begin_inset Newline newline
\end_inset

        DUP RECORD  DUP @ WHILE  DROP
\begin_inset Newline newline
\end_inset

    REPEAT  DUP  B/R @ ERASE  -1 SWAP !  TOUCH
\begin_inset Newline newline
\end_inset

    DUP AVAILABLE 4 nC!  TOUCH  NIP ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: SCRATCH ( r -- )   SAFE  RECORD  0 SWAP !  TOUCH ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard

\family typewriter
\series bold
SLOT
\family default
\series default
 searches the file for the first free record, starting with the record following
 the one pointed to by 
\family typewriter
\series bold
AVAILABLE
\family default
\series default
.
 If a free record is found, 
\family typewriter
\series bold
SLOT
\family default
\series default
 sets the file's 
\family typewriter
\series bold
AVAILABLE
\family default
\series default
 to point to it.
 
\family typewriter
\series bold
SLOT
\family default
\series default
 then stores a -1 into the first cell of the record to indicate that it
 is no longer free, and clears the remainder of the record to zeros.
 If the file is full, an error message occurs and processing is terminated.
\end_layout

\begin_layout Standard

\family typewriter
\series bold
SLOT
\family default
\series default
 does not make the new record current, it only returns the selected record
 number on the stack.
 The reason for this factoring is that you often want to do something with
 the record number before consuming it with 
\family typewriter
\series bold
READ
\family default
\series default
 (which makes this new record the current record).
 For example, we may wish to cause a link in the current record to point
 to the new record, as in the phrase
\end_layout

\begin_layout Standard

\family typewriter
\series bold
SLOT DUP LINK L! READ
\family default
 
\end_layout

\begin_layout Standard
Here the phrase 
\family typewriter
\series bold
LINK L!
\family default
\series default
 must come first because after the 
\family typewriter
\series bold
READ
\family default
\series default
 we'll be in a different record.
\end_layout

\begin_layout Standard

\family typewriter
\series bold
SCRATCH
\family default
\series default
 does not change the contents of the record beyond the first two bytes.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard

\family typewriter
\series bold
N!
\family default
,
\series default
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Field-Reference-Operators"

\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
READ
\family default
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Record-Selection"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
Accessing Files Sequentially
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Accessing-Files-Sequentially"

\end_inset


\end_layout

\begin_layout Standard
The following words return appropriate stack arguments for a loop, which
 will access the records in a file sequentially:
\end_layout

\begin_layout Description
Word Stack Description
\end_layout

\begin_layout Description

\family typewriter
RECORDS
\family default
 (
\begin_inset space \space{}
\end_inset

available+1
\begin_inset space \space{}
\end_inset

1) Typically used before 
\family typewriter
\series bold
?DO
\family default
\series default
, returns the content of 
\family typewriter
\series bold
AVAILABLE
\family default
\series default
 (the record number of the last record allocated) incremented by one and
 starting index (1) for a file that has never wrapped around.
\end_layout

\begin_layout Description

\family typewriter
WHOLE
\family default
 (
\begin_inset space \space{}
\end_inset

limit
\begin_inset space \space{}
\end_inset

1) Typically used before 
\family typewriter
\series bold
?DO
\family default
\series default
, returns the content of 
\family typewriter
\series bold
LIM
\family default
\series default
 and starting index (1) for the entire file.
\end_layout

\begin_layout Scrap
<<records>>=
\begin_inset Newline newline
\end_inset

: RECORDS ( -- l f )   AVAILABLE 4 nC@ 1+  1 ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: WHOLE ( -- l f )   LIM @ 1 ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Since these words return the parameters for the 
\shape italic
current file
\shape default
, it's a good habit to invoke the name of the file just before them, as
 in 
\family typewriter
\series bold
PEOPLE RECORDS
\family default
\series default
.
\end_layout

\begin_layout Standard
When using 
\family typewriter
\series bold
WHOLE
\family default
\series default
, you will probably want to check inside the loop whether each record is
 currently active.
 This is normally done by the phrase:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
LINK L@ IF ...
\end_layout

\begin_layout Standard
where 
\family typewriter
\series bold
LINK
\family default
\series default
 is the generic long field comprising the first four bytes of each record.
 If these bytes contain zero, the record is available for use.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Available Records, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Available-Records"

\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
LIM
\family default
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:File-Definition-Area"

\end_inset


\end_layout

\begin_layout Subsection

\series bold
Field Definition and Access
\series default
 
\end_layout

\begin_layout Standard
A record description is the list of defined fields that appear in the record.
 Each field is an entry in the Forth dictionary, containing the displacement
 of the field from the beginning of the record in its parameter field.
\end_layout

\begin_layout Standard
A record description is not formally associated with any particular file
 (unless 
\family typewriter
\series bold
BIND-FIELDS
\family default
\series default
 contains 
\family typewriter
\series bold
TRUE
\family default
\series default
).
 It is more like a mask, which is used whenever it is appropriate to access
 data.
\end_layout

\begin_layout Scrap
<<bind-fields>>=
\begin_inset Newline newline
\end_inset

VARIABLE BIND-FIELDS   FALSE BIND-FIELDS !
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
There are several kinds of fields: numbers of various sizes and byte strings
 of specified length.
 The following sections discuss the various types of fields and the related
 operators that are used to access the data stored in them.
 
\end_layout

\begin_layout Subsubsection

\series bold
Record Description
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Record-Description"

\end_inset


\end_layout

\begin_layout Standard
A record description defines the fields that make up each record in a file.
 A record description has the following general format:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
0 field-type field-name
\begin_inset Newline newline
\end_inset

 field-type field-name
\begin_inset Newline newline
\end_inset

 ...
\begin_inset Newline newline
\end_inset

 DROP
\end_layout

\begin_layout Standard
The various field types are described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Field-Definitions"

\end_inset

.
\end_layout

\begin_layout Standard
A value is carried on the stack throughout the above process to give the
 relative displacement of the beginning of a record.
 This value is initial\SpecialChar \-
ized by the zero at the beginning of the record descriptio
n, incremented appropriately by each field definition, and finally discarded
 at the end.
\end_layout

\begin_layout Standard
In a complex application the fields in a record description may be defined
 vertically, like this:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
( PEOPLE file records)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
24 BYTES NAME ( Last name first)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
24 BYTES STREET ( Street address)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
10 BYTES CITY,STATE
\end_layout

\begin_layout Standard

\family typewriter
\series bold
DOUBLE ZIP ( zip code, US only)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
NUMERIC AREA ( area code)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
DOUBLE PHONE ( phone number )
\end_layout

\begin_layout Standard

\family typewriter
\series bold
NUMERIC >DETAIL ( link to DETAIL file)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
( For employees:)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
DOUBLE SS# ( Social sec.
 number)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
DOUBLE FICA
\end_layout

\begin_layout Standard

\family typewriter
\series bold
DOUBLE GROSS ( Gross income ytd)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
DROP
\end_layout

\begin_layout Standard
As a quick check to verify that the number of bytes used for each record
 matches the expected value (as specified in the file definition), replace
 
\family typewriter
\series bold
DROP
\family default
\series default
 with 
\series bold
.

\series default
 (
\begin_inset Quotes eld
\end_inset

dot
\begin_inset Quotes erd
\end_inset

) or use it to define a 
\family typewriter
\series bold
CONSTANT
\family default
\series default
.
 This format allows you to use the shadow block for a general discussion
 of the file and record.
\end_layout

\begin_layout Standard
The field-names defined in the example above---
\family typewriter
\series bold
NAME
\family default
\series default
, 
\family typewriter
\series bold
STREET
\family default
\series default
, etc.---are now entries in the Forth dictionary.
 When executed, these words return an address, except for field-names defined
 with 
\family typewriter
\series bold
BYTES
\family default
\series default
, which return a count and address (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Field-Definitions"

\end_inset

).
\end_layout

\begin_layout Standard
A record description is not formally attached to a particular file and has
 no name.
 Use of a field name references the relative location given by that field
 name in the current record of the current file.
\end_layout

\begin_layout Standard
A record in 
\family typewriter
\series bold
EMPLOYEES
\family default
\series default
:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:6"

\end_inset


\begin_inset Graphics
	filename Employees.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Thus it is possible to use the same field names for two different files,
 even if the record size used in each file varies.
 For instance, all the above-defined field names could be used with a file
 called 
\series bold
EMPLOYEES
\series default
, while the first six could be used with another file called 
\series bold
CUSTOMERS
\series default
.
\end_layout

\begin_layout Standard
A record in 
\family typewriter
\series bold
CUSTOMERS
\family default
\series default
:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:7"

\end_inset


\begin_inset Graphics
	filename Customers.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\shape italic
NOTE
\shape default
: Due to the Data Base Support package's record-allocation scheme, the first
 field of an active record may never contain a zero in its first four bytes.
 In our example, this is not a problem because the first field is alphanumeric
 (even blanks are stored as decimal 32's).
 Otherwise, we would have to rearrange the order of the fields so that one,
 which will never contain zero, is first.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Available Records, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Available-Records"

\end_inset


\begin_inset Newline newline
\end_inset

Field Types, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Field-Definitions"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
Field Definitions
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Field-Definitions"

\end_inset


\end_layout

\begin_layout Standard
The following field types are defined:
\end_layout

\begin_layout Description

\series bold
Word Description
\end_layout

\begin_layout Description

\family typewriter
1BYTE
\family default
 This field is for an 8-bit value (range 0-255).
 On processors that do not tolerate odd byte addresses (such as the PDP-11
 and 68000), 
\family typewriter
\series bold
1BYTE
\family default
\series default
 fields must be used in pairs to avoid wasting space.
\end_layout

\begin_layout Standard
Example: 
\family typewriter
\series bold
1BYTE AGE
\end_layout

\begin_layout Standard
Words that are defined by 
\family typewriter
\series bold
1BYTE
\family default
\series default
 return an address, suitable for use with the one-byte memory access operators
 
\family typewriter
\series bold
1@
\family default
\series default
, 
\family typewriter
\series bold
1!
\family default
\series default
, 
\family typewriter
\series bold
1?
\family default
\series default
, and 
\family typewriter
\series bold
?1
\family default
\series default
.
\end_layout

\begin_layout Description

\family typewriter
NUMERIC
\family default
 These fields occupy two bytes of storage (on 32-bit systems also).
\end_layout

\begin_layout Standard
Example: 
\family typewriter
\series bold
NUMERIC
\begin_inset space \space{}
\end_inset

WEIGHT
\end_layout

\begin_layout Standard
Words defined by 
\family typewriter
\series bold
NUMERIC
\family default
\series default
 return an address, suit\SpecialChar \-
able for use with the numeric field access operators
 
\family typewriter
\series bold
N@
\family default
\series default
, 
\family typewriter
\series bold
N!
\family default
\series default
, 
\family typewriter
\series bold
N?
\family default
\series default
, and 
\family typewriter
\series bold
?N
\family default
\series default
.
\end_layout

\begin_layout Description

\family typewriter
LONG
\family default
 These fields occupy four bytes of storage (only available on 32-bit systems).
\end_layout

\begin_layout Standard
Example: 
\family typewriter
\series bold
LONG
\begin_inset space \space{}
\end_inset

WEIGHT
\end_layout

\begin_layout Standard
Words defined by 
\family typewriter
\series bold
LONG
\family default
\series default
 return an address, suit\SpecialChar \-
able for use with the numeric field access operators
 
\family typewriter
\series bold
L@
\family default
\series default
, 
\family typewriter
\series bold
L!
\family default
\series default
, 
\family typewriter
\series bold
L?
\family default
\series default
, and 
\family typewriter
\series bold
?L
\family default
\series default
.
\end_layout

\begin_layout Description

\family typewriter
DOUBLE
\family default
 This field is for a 64-bit (8-byte) value.
\end_layout

\begin_layout Standard
Example: 
\family typewriter
\series bold
DOUBLE SALARY
\end_layout

\begin_layout Standard
Words defined by 
\family typewriter
\series bold
DOUBLE
\family default
\series default
 return an address, suitable for use with the double field access operators
 
\family typewriter
\series bold
D@
\family default
\series default
, 
\family typewriter
\series bold
D!
\family default
\series default
, 
\family typewriter
\series bold
D?
\family default
\series default
, and 
\family typewriter
\series bold
?D
\family default
\series default
 .
\end_layout

\begin_layout Description

\family typewriter
BYTES
\family default
 This field is for alphanumeric text.
 A count is required to specify the number of bytes in the field.
\end_layout

\begin_layout Standard
Example: 
\family typewriter
\series bold
24 BYTES NAME
\end_layout

\begin_layout Standard
Words defined by 
\family typewriter
\series bold
BYTES
\family default
\series default
 return a length and address, suitable for use with the byte field access
 operators 
\family typewriter
\series bold
B@
\family default
\series default
, 
\family typewriter
\series bold
B!
\family default
\series default
, 
\family typewriter
\series bold
B?
\family default
\series default
, and 
\family typewriter
\series bold
?B
\family default
\series default
.
 The width of a 
\family typewriter
\series bold
BYTES
\family default
\series default
 field must be even.
\end_layout

\begin_layout Scrap
<<fields>>=
\begin_inset Newline newline
\end_inset

: (FIELD) ( o n -- o+n )   CREATE  OVER , +  DOES> ( a -- a' )   @  FLD#
 @ + ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

0 VALUE #FIELD
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

#FIELD CELL (FIELD) FIELD-OFFSET 
\backslash
 holds offset within the record.
\begin_inset Newline newline
\end_inset

       CELL (FIELD) FIELD-SIZE   
\backslash
 holds the size of the field.
\begin_inset Newline newline
\end_inset

       CELL (FIELD) FIELD-COPIES 
\backslash
 holds numbers of times this field is repeated.
\begin_inset Newline newline
\end_inset

       CELL (FIELD) BOUND-FILE   
\backslash
 holds addr of FCB this record is bound to, or 0.
\begin_inset Newline newline
\end_inset

TO #FIELD
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: CREATE-FIELD ( o n -- o+n )
\begin_inset Newline newline
\end_inset

    HERE DUP FLD# !  #FIELD DUP ALLOT  ERASE
\begin_inset Newline newline
\end_inset

    2DUP FIELD-SIZE !  FIELD-OFFSET !  +
\begin_inset Newline newline
\end_inset

    0 FIELD-COPIES !  BIND-FIELDS @ IF
\begin_inset Newline newline
\end_inset

        DB# @ BOUND-FILE !
\begin_inset Newline newline
\end_inset

    ELSE  0 BOUND-FILE !
\begin_inset Newline newline
\end_inset

    THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: FIELD-DOES ( a -- a' )
\begin_inset Newline newline
\end_inset

    FLD# !  WORKING FIELD-OFFSET @ +
\begin_inset Newline newline
\end_inset

    BOUND-FILE @ ?DUP IF
\begin_inset Newline newline
\end_inset

        SET-DATA  #REC @ R# !
\begin_inset Newline newline
\end_inset

    THEN  FIELD-COPIES @ IF
\begin_inset Newline newline
\end_inset

        #INDEX @  FIELD-SIZE @ * +
\begin_inset Newline newline
\end_inset

    THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: 1BYTE ( o _ -- o+1 ) 
\backslash
 1BYTE fields occupy 8 bits.
\begin_inset Newline newline
\end_inset

    CREATE 1 CREATE-FIELD  DOES> ( -- a )   FIELD-DOES ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: NUMERIC ( o _ -- o+2 ) 
\backslash
 NUMERIC fields occupy 16 bits.
\begin_inset Newline newline
\end_inset

    CREATE 2 CREATE-FIELD  DOES> ( -- a )   FIELD-DOES ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: LONG ( o _ -- o+4 ) 
\backslash
 LONG fields occupy 32 bits.
\begin_inset Newline newline
\end_inset

    CREATE 4 CREATE-FIELD  DOES> ( -- a )   FIELD-DOES ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

[DEFINED] SFALIGN [IF]
\begin_inset Newline newline
\end_inset

: FLOAT ( o _ -- o+4 ) 
\backslash
 FLOAT fields occupy 32 bits.
\begin_inset Newline newline
\end_inset

    CREATE 4 CREATE-FIELD  DOES> ( -- a )   FIELD-DOES ;
\begin_inset Newline newline
\end_inset

[THEN]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: DOUBLE ( o _ -- o+4 ) 
\backslash
 DOUBLE fields occupy 64 bits.
\begin_inset Newline newline
\end_inset

    CREATE 8 CREATE-FIELD  DOES> ( -- a )   FIELD-DOES ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: BYTES ( o n _ -- o+n ) 
\backslash
 BYTES fields occupy a specified number of bytes.
\begin_inset Newline newline
\end_inset

    CREATE CREATE-FIELD  DOES> ( -- n a )   FIELD-DOES  FIELD-SIZE @ SWAP
 ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
FILLER
\family default
 This field reserves space in the record, typically used for future expansion
 or to skip regions of a record that are to be accessed by other means.
 
\family typewriter
\series bold
FILLER
\family default
\series default
 requires the number of bytes to be reserved.
\end_layout

\begin_layout Scrap
<<filler>>=
\begin_inset Newline newline
\end_inset

[defined] -warning [IF] -warning [THEN]
\begin_inset Newline newline
\end_inset

: FILLER ( o n _ -- o+n )   BL WORD DROP + ;
\begin_inset Newline newline
\end_inset

[defined] +warning [IF] +warning [THEN] 
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Example: 
\family typewriter
\series bold
6 FILLER <any name>
\end_layout

\begin_layout Standard

\family typewriter
\series bold
FILLER
\family default
\series default
 creates no dictionary entry, but simply discards the word that follows.
\end_layout

\begin_layout Standard
At compile time, the numeric field defining words (
\family typewriter
\series bold
1BYTE
\family default
\series default
, 
\family typewriter
\series bold
NUMERIC
\family default
\series default
, 
\family typewriter
\series bold
DOUBLE
\family default
\series default
) expect the current displacement in the record on the stack.
 A copy of the displacement is compiled in the parameter field of the definition
, and its value on the stack is incremented by the size of the field in
 bytes.
 A 
\family typewriter
\series bold
BYTES
\family default
\series default
 field also expects the size of the field on the stack.
 This value is compiled along with the displacement, and used to increment
 the displacement accordingly.
\end_layout

\begin_layout Standard
When a field-name defined by one of these words is 
\shape italic
executed
\shape default
, it pushes onto the stack the address of working storage, incremented by
 the displacement of the field to give the address of the field in the record
 image in working storage.
 In the case of 
\family typewriter
\series bold
BYTES
\family default
\series default
 fields, the size of the field is beneath the address on the stack.
 The working storage address (and size, in the case of 
\family typewriter
\series bold
BYTES
\family default
\series default
 fields) is the appropriate input to the field access operators described
 in the next section.
\end_layout

\begin_layout Description

\family typewriter
\series bold
INDEX
\family default
\series default
 sets the current field index.
 Used to select one of the fields in a 
\family typewriter
\series bold
COPIES
\family default
\series default
 field.
\end_layout

\begin_layout Scrap
<<indexed>>=
\begin_inset Newline newline
\end_inset

: INDEX ( n -- )   #INDEX ! ;
\begin_inset Newline newline
\end_inset

: INDEXED ( -- n )   #INDEX @ ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
COPIES
\family default
 makes an array of the previous field.
 Use 
\family typewriter
\series bold
INDEX
\family default
\series default
 to access the individual elements.
\end_layout

\begin_layout Scrap
<<copies>>=
\begin_inset Newline newline
\end_inset

: COPIES ( o n -- o' )
\begin_inset Newline newline
\end_inset

    FIELD-COPIES @ ABORT" Invalid COPIES"  DUP
\begin_inset Newline newline
\end_inset

    FIELD-COPIES !  1- FIELD-SIZE @ * + ; 
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Access to the Record Image in Working Storage, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Access-to-Working-Storage"

\end_inset


\begin_inset Newline newline
\end_inset

Available Records, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Available-Records"

\end_inset


\begin_inset Newline newline
\end_inset

Direct Access to Fields, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Direct-Access-to-Fields"

\end_inset


\begin_inset Newline newline
\end_inset

Field Reference Operators, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Field-Reference-Operators"

\end_inset


\begin_inset Newline newline
\end_inset

Working Storage, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Working-Storage"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
Field Reference Operators
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Field-Reference-Operators"

\end_inset


\end_layout

\begin_layout Standard
Fields in files are referenced with special words.
 The following operators assume that the desired file and record have been
 selected.
 They refer to fields in the current record (as indicated by the value of
 user variable 
\family typewriter
\series bold
R#
\family default
\series default
; see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Record-Selection"

\end_inset

).
 In all cases, the name of the field precedes the operator; the field-name
 returns the appropriate address (and length, in the case of 
\family typewriter
\series bold
BYTES
\family default
\series default
 fields) to be used by the access operator.
\end_layout

\begin_layout Description

\series bold
Word Stack Action
\end_layout

\begin_layout Description

\family typewriter
1@
\family default
 (
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

-
\begin_inset space \space{}
\end_inset

b) Fetches the contents of a 
\family typewriter
\series bold
1BYTE
\family default
\series default
 field to the top of the stack.
\end_layout

\begin_layout Description

\family typewriter
1!
\family default
 (
\begin_inset space \space{}
\end_inset

b
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

-
\begin_inset space \space{}
\end_inset

) Stores a byte into the 
\family typewriter
\series bold
1BYTE
\family default
\series default
 field whose address is on top of the stack.
\end_layout

\begin_layout Scrap
<<byte>>=
\begin_inset Newline newline
\end_inset

: 1@ ( a -- n )   ADDRESS C@ ;
\begin_inset Newline newline
\end_inset

: 1! ( n a -- )   ADDRESS C! TOUCH ; 
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
1?
\family default
 (
\begin_inset space \space{}
\end_inset

a) Fetches and displays the contents of a 
\family typewriter
\series bold
1BYTE
\family default
\series default
 field.
\end_layout

\begin_layout Description

\family typewriter
?1
\family default
 (
\begin_inset space \space{}
\end_inset

a) As for 
\family typewriter
\series bold
1?
\family default
\series default
, except the results are right-justified by the report generator.
\end_layout

\begin_layout Description

\family typewriter
N@
\family default
 (
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

-
\begin_inset space \space{}
\end_inset

n) Fetches the contents of a 
\family typewriter
\series bold
NUMERIC
\family default
\series default
 field to the top of the stack.
\end_layout

\begin_layout Description

\family typewriter
N!
\family default
 (
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

-
\begin_inset space \space{}
\end_inset

) Stores a number into the 
\family typewriter
\series bold
NUMERIC
\family default
\series default
 field whose address is on top of the stack.
\end_layout

\begin_layout Scrap
<<numeric>>=
\begin_inset Newline newline
\end_inset

: NU@ ( a -- n )   ADDRESS 2 nC@ ;
\begin_inset Newline newline
\end_inset

: N@ ( a -- n )   ADDRESS 2 nC@
\begin_inset Newline newline
\end_inset

    DUP 32768 AND IF  -65536 OR  THEN ;
\begin_inset Newline newline
\end_inset

: N! ( n a -- )   ADDRESS 2 nC! TOUCH ; 
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
N?
\family default
 (
\begin_inset space \space{}
\end_inset

a) Fetches and displays the contents of a 
\family typewriter
\series bold
NUMERIC
\family default
\series default
 field.
\end_layout

\begin_layout Description

\family typewriter
?N
\family default
 (
\begin_inset space \space{}
\end_inset

a) As for 
\family typewriter
\series bold
N?
\family default
\series default
, except the results are right-justified by the report generator.
\end_layout

\begin_layout Description

\family typewriter
L@
\family default
 (
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

-
\begin_inset space \space{}
\end_inset

n) Fetches the contents of a 
\family typewriter
\series bold
LONG
\family default
\series default
 field to the top of the stack.
\end_layout

\begin_layout Description

\family typewriter
L!
\family default
 (
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

-
\begin_inset space \space{}
\end_inset

) Stores a number into the 
\family typewriter
\series bold
LONG
\family default
\series default
 field whose address is on top of the stack.
\end_layout

\begin_layout Scrap
<<long>>=
\begin_inset Newline newline
\end_inset

: LU@ ( a -- n )   ADDRESS 4 nC@ ;
\begin_inset Newline newline
\end_inset

: L@ ( a -- n )   ADDRESS 4 nC@
\begin_inset Newline newline
\end_inset

    DUP 2147483648 AND IF  -4294967295 OR  THEN ;
\begin_inset Newline newline
\end_inset

: L! ( n a -- )   ADDRESS 4 nC! TOUCH ; 
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
L?
\family default
 (
\begin_inset space \space{}
\end_inset

a) Fetches and displays the contents of a 
\family typewriter
\series bold
LONG
\family default
\series default
 field.
\end_layout

\begin_layout Description

\family typewriter
?L
\family default
 (
\begin_inset space \space{}
\end_inset

a) As for 
\family typewriter
\series bold
L?
\family default
\series default
, except the results are right-justified by the report generator.
\end_layout

\begin_layout Description

\family typewriter
FL@
\begin_inset space ~
\end_inset

FL!
\family default
 move 32-bit floats between the stack and the file.
\end_layout

\begin_layout Scrap
<<float>>=
\begin_inset Newline newline
\end_inset

[DEFINED] SFALIGN [IF]
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

SFALIGN HERE 1 SFLOATS ALLOT CONSTANT DBFLOAT
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: FL@ ( a -- r )   ADDRESS 4 nC@ DBFLOAT ! DBFLOAT SF@ ;
\begin_inset Newline newline
\end_inset

: FL! ( r a -- )   DBFLOAT SF! DBFLOAT @ SWAP ADDRESS 4 nC! TOUCH ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: FL@-le ( a -- r )   ADDRESS 4 c@-le DBFLOAT ! DBFLOAT SF@ ;
\begin_inset Newline newline
\end_inset

: FL!-le ( r a -- )   DBFLOAT SF! DBFLOAT @ SWAP ADDRESS 4 c!-le TOUCH ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: FL@-be ( a -- r )   ADDRESS 4 c@-be DBFLOAT ! DBFLOAT SF@ ;
\begin_inset Newline newline
\end_inset

: FL!-be ( r a -- )   DBFLOAT SF! DBFLOAT @ SWAP ADDRESS 4 c!-be TOUCH ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: FL@+ ( a -- r )   ADDRESS SF@ ;   
\backslash
 These are fast, but endian dependant
\begin_inset Newline newline
\end_inset

: FL!+ ( r a -- )   ADDRESS SF! TOUCH ;
\begin_inset Newline newline
\end_inset

[THEN]
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
D@
\family default
 (
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

-
\begin_inset space \space{}
\end_inset

d) Fetches the contents of a 
\family typewriter
\series bold
DOUBLE
\family default
\series default
 field to the top of the stack (two cells).
\end_layout

\begin_layout Description

\family typewriter
D!
\family default
 (
\begin_inset space \space{}
\end_inset

d
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

-
\begin_inset space \space{}
\end_inset

) Stores two cells into the 
\family typewriter
\series bold
DOUBLE
\family default
\series default
 field whose address is on top of the stack.
\end_layout

\begin_layout Scrap
<<double>>=
\begin_inset Newline newline
\end_inset

: D@ ( a -- d )   ADDRESS  CELL CASE
\begin_inset Newline newline
\end_inset

        2 OF  4 nC@  ENDOF
\begin_inset Newline newline
\end_inset

        4 OF  8 nC@  ENDOF
\begin_inset Newline newline
\end_inset

        8 OF  8 nC@ 4294967296 /MOD SWAP  ENDOF
\begin_inset Newline newline
\end_inset

        DUP OF  1 ABORT" CELL size not supported"  ENDOF
\begin_inset Newline newline
\end_inset

    ENDCASE ;
\begin_inset Newline newline
\end_inset

: D! ( d a -- )   ADDRESS  CELL CASE
\begin_inset Newline newline
\end_inset

        2 OF  4 nC!  ENDOF
\begin_inset Newline newline
\end_inset

        4 OF  8 nC!  ENDOF
\begin_inset Newline newline
\end_inset

        8 OF  SWAP 4294967296 + 8 nC!  ENDOF
\begin_inset Newline newline
\end_inset

        DUP OF  1 ABORT" CELL size not supported"  ENDOF
\begin_inset Newline newline
\end_inset

    ENDCASE  TOUCH ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
D?
\family default
 (
\begin_inset space \space{}
\end_inset

a) Fetches and displays the contents of a 
\family typewriter
\series bold
DOUBLE
\family default
\series default
 field.
\end_layout

\begin_layout Description

\family typewriter
?D
\family default
 (
\begin_inset space \space{}
\end_inset

a) As for 
\family typewriter
\series bold
D?
\family default
\series default
, except the results are right-justified by the report generator.
\end_layout

\begin_layout Description

\family typewriter
B@
\family default
 (
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

a) Reads a 
\family typewriter
\series bold
BYTES
\family default
\series default
 field, according to the declared length, into 
\family typewriter
\series bold
PAD
\family default
\series default
.
\end_layout

\begin_layout Description

\family typewriter
B!
\family default
 (
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

a) Stores a 
\family typewriter
\series bold
BYTES
\family default
\series default
 field, according to the declared length, from 
\family typewriter
\series bold
PAD
\family default
\series default
.
\end_layout

\begin_layout Scrap
<<bytes>>=
\begin_inset Newline newline
\end_inset

: B@ ( n a -- )   ADDRESS S@ ;
\begin_inset Newline newline
\end_inset

: B! ( n a -- )   ADDRESS S! TOUCH ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
B?
\family default
 (
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

a) Fetches and displays the contents of a 
\family typewriter
\series bold
BYTES
\family default
\series default
 field, according to the declared length.
 
\family typewriter
\series bold
PAD
\family default
\series default
 is used as intermediate storage of the field data.
\end_layout

\begin_layout Description

\family typewriter
?B
\family default
 (
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

a) As for 
\family typewriter
\series bold
B?
\family default
\series default
, except the results are right-justified by the report generator.
\end_layout

\begin_layout Standard
Example of usage:
\end_layout

\begin_layout Description

\family typewriter
\series bold
GROSS
\begin_inset space \space{}
\end_inset

D@
\family default
\series default
 Fetches the contents of the 
\family typewriter
\series bold
DOUBLE
\family default
\series default
 field 
\family typewriter
\series bold
GROSS
\family default
\series default
 onto the stack.
\end_layout

\begin_layout Scrap
<<access>>=
\begin_inset Newline newline
\end_inset

: N? ( a -- )   N@ .
 ;
\begin_inset Newline newline
\end_inset

: NU? ( a -- )   NU@ .
 ;
\begin_inset Newline newline
\end_inset

: L? ( a -- )   L@ .
 ;
\begin_inset Newline newline
\end_inset

[DEFINED] SFALIGN [IF]
\begin_inset Newline newline
\end_inset

: FL? ( a -- )   FL@ F.
 ;
\begin_inset Newline newline
\end_inset

[THEN]
\begin_inset Newline newline
\end_inset

: D? ( a -- )   D@ .
 ;
\begin_inset Newline newline
\end_inset

: 1? ( a -- )   1@ .
 ;
\begin_inset Newline newline
\end_inset

: B? ( n a -- )   2DUP B@ S.
  SPACE ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Two other words are included for storing data into 
\family typewriter
\series bold
BYTES
\family default
\series default
 fields:
\end_layout

\begin_layout Description

\series bold
Word Stack Action
\end_layout

\begin_layout Description

\family typewriter
PUT
\family default
 (
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

a) Copies the remainder of the input stream into a 
\family typewriter
\series bold
BYTES
\family default
\series default
 field.
\end_layout

\begin_layout Scrap
<<put>>=
\begin_inset Newline newline
\end_inset

: PUT ( n a -- )   1 TEXT B! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
For example:
\series bold
 
\family typewriter
NAME PUT Fred Ferguson
\series default
 ok
\end_layout

\begin_layout Standard
A string that is too long will be truncated when it is stored.
 If it is shorter than the field size, it will be blank-filled.
 A copy of the entire string is left in 
\family typewriter
\series bold
PAD
\family default
\series default
.
\end_layout

\begin_layout Description

\family typewriter
ASK
\family default
 (
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

a) Awaits (via 
\family typewriter
\series bold
ACCEPT
\family default
\series default
) input from the keyboard, and copies it into a 
\family typewriter
\series bold
BYTES
\family default
\series default
 field using 
\family typewriter
\series bold
PUT
\family default
\series default
.
\end_layout

\begin_layout Scrap
<<ask>>=
\begin_inset Newline newline
\end_inset

: ASK ( n a -- )   FILE-PAD #TB 2DUP BLANK ACCEPT DROP B! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
ENTIRE
\family default
\series default
 may be used in place of a field name:
\end_layout

\begin_layout Description

\series bold
Word Stack Action
\end_layout

\begin_layout Description

\family typewriter
ENTIRE
\family default
 (
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

a) Returns parameters for the 
\begin_inset Quotes eld
\end_inset

pseudo-field
\begin_inset Quotes erd
\end_inset

 that occupies the entire record in 
\family typewriter
\series bold
BYTES
\family default
\series default
 format.
\end_layout

\begin_layout Scrap
<<entire>>=
\begin_inset Newline newline
\end_inset

: ENTIRE ( -- n a )   B/R @ WORKING ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
For example:
\series bold
 
\family typewriter
ENTIRE B?
\end_layout

\begin_layout Standard
types the contents of the current record as though it were a single 
\family typewriter
\series bold
BYTES
\family default
\series default
 field.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Fetching Input to 
\series bold
PAD
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:How-Data-is-Stored"

\end_inset


\begin_inset Newline newline
\end_inset

Report Generator, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Report-Generator"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
Direct Access to Fields
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Direct-Access-to-Fields"

\end_inset


\end_layout

\begin_layout Standard
The Data Base Support package is set up so that field names may be used
 with field access operators in a transparent way, although in fact more
 is going on with these words than meets the eye.
 In the event that you need to directly access fields in a file (for instance,
 if you wish to use 
\family typewriter
\series bold
MOVE
\family default
\series default
, 
\family typewriter
\series bold
ERASE
\family default
\series default
, etc.
 instead of 
\family typewriter
\series bold
N!
\family default
\series default
, etc.), you should understand the details explained in this section.
\end_layout

\begin_layout Standard
The addresses returned by user-defined field names are intended to be consumed
 by the field reference operators (
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Field-Reference-Operators"

\end_inset

).
 These addresses, however, are not the addresses of the actual data in a
 block buffer, but rather addresses within working storage (
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Working-Storage"

\end_inset

).
 The field refer\SpecialChar \-
ence operators perform the necessary offset correction,
 call the appropriate block and access the data.
 In the case of 
\begin_inset Quotes eld
\end_inset

fetch
\begin_inset Quotes erd
\end_inset

 operators, the operators move the data elsewhere (numbers are pushed onto
 the stack; strings are moved to 
\family typewriter
\series bold
PAD
\family default
\series default
).
 This allows the field-name words, which return the address, to be used
 transparently with either working storage or the file data itself; the
 difference depends solely upon the operator that fetches or stores the
 data.
\end_layout

\begin_layout Standard
Each field reference operation can be an implied disk access, since it may
 call file I/O operators.
 It is important not to carry the address of a field in an I/O buffer on
 the stack across any I/O operation (such as displaying the content of a
 field or accessing another field), since in a multitasking environment
 another task may perform disk activity that changes the content of the
 I/O buffer.
\end_layout

\begin_layout Standard
Occasionally it may be useful to bypass the protection of the field reference
 operators, and determine the actual address of a field in a disk buffer.
 This can be done by the following phrase:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
field-name ADDRESS
\end_layout

\begin_layout Standard
This phrase places the actual memory address of the field on top of the
 stack.
\end_layout

\begin_layout Scrap
<<address>>=
\begin_inset Newline newline
\end_inset

: RECORD ( n -- a )   'RECORD @ ?DUP IF EXECUTE THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: TOUCH ( -- )   'TOUCH @ ?DUP IF EXECUTE THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: ADDRESS ( a -- a' )   R# @ RECORD  WORKING -  + ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
For example, the following phrase will move an array of 100 2-byte data
 elements from working storage to disk much faster than it would take to
 calculate addresses repeatedly using 
\family typewriter
\series bold
N!
\family default
\series default
:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
DATA DATA ADDRESS 200 MOVE TOUCH
\end_layout

\begin_layout Standard
The first use of 
\family typewriter
\series bold
DATA
\family default
\series default
 returns the address of the image of the field in working storage.
 The phrase 
\family typewriter
\series bold
DATA
\begin_inset space \space{}
\end_inset

ADDRESS
\family default
\series default
 returns the location of the field in virtual memory.
 
\family typewriter
\series bold
200
\begin_inset space \space{}
\end_inset

MOVE
\family default
\series default
 moves the image in working storage to the disk buffer.
 
\family typewriter
\series bold
TOUCH
\family default
\series default
 is necessary after writing to a disk buffer.
\end_layout

\begin_layout Standard
For 
\family typewriter
\series bold
BYTES
\family default
\series default
 fields (since invoking the name of a 
\family typewriter
\series bold
BYTES
\family default
\series default
 field pushes both the location and length onto the stack), the phrase:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
field-name ADDRESS
\family default
 
\end_layout

\begin_layout Standard
returns the length and virtual memory address (note that the order is reversed
 from the standard 
\begin_inset Quotes eld
\end_inset

address, count
\begin_inset Quotes erd
\end_inset

 order).
\end_layout

\begin_layout Standard
If direct addressing is used, you must remember that the content of the
 buffer can change at any time the task either requests I/O from any source
 or causes execution of 
\family typewriter
\series bold
PAUSE
\family default
\series default
 or 
\family typewriter
\series bold
WAIT
\family default
\series default
.
 Furthermore, if you modify the contents of any field directly (without
 using 
\family typewriter
\series bold
N!
\family default
\series default
, 
\family typewriter
\series bold
B!
\family default
\series default
, etc.), you must invoke 
\family typewriter
\series bold
TOUCH
\family default
\series default
 after the modification.
\end_layout

\begin_layout Subsubsection

\series bold
Access to the Record Image in Working Storage
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Access-to-Working-Storage"

\end_inset


\end_layout

\begin_layout Standard
Because field names return addresses within local working storage, you can
 directly access the working storage image of a record.
 This lets you map data items as though they were contained in records,
 although they are kept in resident memory instead of on the disk.
 There is only one 
\begin_inset Quotes eld
\end_inset

record
\begin_inset Quotes erd
\end_inset

 in the working storage area.
\end_layout

\begin_layout Standard
Using ordinary memory-access operators in conjunction with field names provides
 access to working storage locations:
\end_layout

\begin_layout Description

\series bold
Word Action
\end_layout

\begin_layout Description

\family typewriter
C@
\family default
 Fetches an 8-bit number.
\begin_inset Newline newline
\end_inset

 Example: 
\family typewriter
\series bold
AGE
\begin_inset space \space{}
\end_inset

C@
\end_layout

\begin_layout Description

\family typewriter
C!
\family default
 Stores an 8-bit number.
\begin_inset Newline newline
\end_inset

 Example: 
\family typewriter
\series bold
39
\begin_inset space \space{}
\end_inset

AGE
\begin_inset space \space{}
\end_inset

C!
\end_layout

\begin_layout Description

\family typewriter
@
\family default
 Fetches a single-length number.
 
\begin_inset Newline newline
\end_inset

 Example: 
\family typewriter
\series bold
LINK
\begin_inset space \space{}
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
!
\family default
 Stores a single-length number.
 
\begin_inset Newline newline
\end_inset

 Example: 
\family typewriter
\series bold
16
\begin_inset space \space{}
\end_inset

LINK
\begin_inset space \space{}
\end_inset

!
\end_layout

\begin_layout Description

\family typewriter
2@
\family default
 Fetches a double-length number.
\begin_inset Newline newline
\end_inset

 Example: 
\family typewriter
\series bold
PRICE
\begin_inset space \space{}
\end_inset

2@
\end_layout

\begin_layout Description

\family typewriter
2!
\family default
 Stores a double-length number.
\begin_inset Newline newline
\end_inset

 Example: 
\family typewriter
\series bold
196.75
\begin_inset space \space{}
\end_inset

PRICE
\begin_inset space \space{}
\end_inset

2!
\end_layout

\begin_layout Description

\family typewriter
S@
\family default
 Fetches a string from working storage to 
\family typewriter
\series bold
PAD
\family default
\series default
.
\begin_inset Newline newline
\end_inset

 Example: 
\family typewriter
\series bold
NAME
\begin_inset space \space{}
\end_inset

S@
\end_layout

\begin_layout Description

\family typewriter
S!
\family default
 Stores a string from 
\family typewriter
\series bold
PAD
\family default
\series default
 into working storage.
\begin_inset Newline newline
\end_inset

 Example: 
\family typewriter
\series bold
NAME
\begin_inset space \space{}
\end_inset

S!
\end_layout

\begin_layout Scrap
<<strings>>=
\begin_inset Newline newline
\end_inset

: S@ ( n a -- )   FILE-PAD ROT >MOVE< ;
\begin_inset Newline newline
\end_inset

: S! ( n a -- )   FILE-PAD SWAP ROT >MOVE< ;
\begin_inset Newline newline
\end_inset

: (S.) ( n a -- a' n' )   DROP FILE-PAD SWAP -TRAILING ;
\begin_inset Newline newline
\end_inset

: S.
 ( n a -- )   (S.) xTYPE ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
WORKING
\family default
\series default
 returns the address of the beginning of the task's working storage.
 Note that there is no common standard for manipulating half-cell quantities
 (i.e.
 16-bit values on a 32-bit system), so it is best to avoid using them within
 this context.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Working Storage, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Working-Storage"

\end_inset

 
\end_layout

\begin_layout Subsection

\series bold
Ordered Index Files
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Ordered-Index-Files"

\end_inset


\end_layout

\begin_layout Standard
An ordered index file is one in which the records are kept in ascending
 order depending upon the ASCII values of a 
\shape italic
key
\shape default
.
 A key is an item of data that is used in a match or comparison.
\end_layout

\begin_layout Standard
There are two purposes for an ordered index file.
 First, it greatly speeds up searches based on the key data.
 Second, it allows you to display the main file alphabetically without having
 to sort it.
\end_layout

\begin_layout Standard
Each record in the index file contains a key together with a link address
 to an associated main file.
 This link resides in a 32-bit field called 
\family typewriter
\series bold
LINK
\family default
\series default
.
 In Fig.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:8"

\end_inset

, the index file 
\series bold
(
\family typewriter
NAMES
\family default
)
\series default
 contains the names of people, ordered alphabetically, along with links
 to the main file.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:8"

\end_inset


\begin_inset Graphics
	filename People.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
An ordered index file (on the left) showing links to the corresponding records
 in the main data file (right).
\end_layout

\begin_layout Standard
You may have several index files addressing the same main file.
 For example, both sample name and observation number, using two separate
 index files, could index a file of scientific data.
 In Fig.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:9"

\end_inset

, a second index file (
\family typewriter
\series bold
COMPANIES
\family default
\series default
) points to the same main file 
\family typewriter
\series bold
PEOPLE
\family default
\series default
, but uses the company field as a key, and keeps the records ordered alphabetica
lly by company.
\end_layout

\begin_layout Standard
Searches on an ordered index are performed using a 
\begin_inset Quotes eld
\end_inset

binary search,
\begin_inset Quotes erd
\end_inset

 which locates a record (or the place that it should go if it is not in
 the file) with only log2 
\shape italic
n
\shape default
 steps rather than n/2 (which is the average for a 
\begin_inset Quotes eld
\end_inset

brute force
\begin_inset Quotes erd
\end_inset

 or sequential search).
\end_layout

\begin_layout Standard
A binary search works by taking the occupied part of the file and dividing
 it by two, then comparing the desired key with the field in the middle
 record.
 If the key is larger, then the high half of the file is halved again.
 This process is repeated until the size of the remaining set of records
 is one.
 This remaining record must match the key, if the key is in the file; other\SpecialChar \-
wise,
 it is the record 
\shape italic
before
\shape default
 which the key would be inserted.
 For a file of 128 records, a binary search requires only seven comparisons,
 as compared with an average of 64 for a sequential search.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:9"

\end_inset


\begin_inset Graphics
	filename Companies.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Another index to the same main file shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:8"

\end_inset

, this time using the company name as key.
\end_layout

\begin_layout Standard
An ordered index is a 
\begin_inset Quotes eld
\end_inset

dense file.
\begin_inset Quotes erd
\end_inset

 That is, there are no gaps between active records.
 Therefore, 
\family typewriter
\series bold
AVAILABLE
\family default
\series default
 always reflects the number of records in the index file, and all records
 in the index file can be accessed with a 
\family typewriter
\series bold
DO
\begin_inset space \space{}
\end_inset

LOOP
\family default
\series default
 with the knowledge that all records are active.
 With files maintained using 
\family typewriter
\series bold
SLOT
\family default
\series default
 and 
\family typewriter
\series bold
SCRATCH
\family default
\series default
, you must check the 
\family typewriter
\series bold
LINK
\family default
\series default
 field (first four bytes of every record) to see whether each record is
 active.
 
\end_layout

\begin_layout Scrap
<<index>>=
\begin_inset Newline newline
\end_inset

<<head>>
\begin_inset Newline newline
\end_inset

<<+ordered>>
\begin_inset Newline newline
\end_inset

<<-ordered>>
\begin_inset Newline newline
\end_inset

<<-binary>>
\begin_inset Newline newline
\end_inset

<<binary>>
\begin_inset Newline newline
\end_inset

<<snatch>>
\begin_inset Newline newline
\end_inset

<<-next>>
\begin_inset Newline newline
\end_inset

<<first>>
\begin_inset Newline newline
\end_inset

<<-locate>>
\begin_inset Newline newline
\end_inset

<<chain>>
\begin_inset Newline newline
\end_inset

<<unchain>>
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsubsection

\series bold
Index File Records
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Index-File-Records"

\end_inset


\end_layout

\begin_layout Standard
At minimum, an ordered index file must contain the key and the link that
 associates the key with its main data record.
 The link is a 32-bit record number residing in the first two bytes of the
 record, and the key field immediately follows.
\end_layout

\begin_layout Standard
You can keep data other than keys in an index file and process this data
 in the same manner as data in other types of files.
 Such a technique should be avoided, however, if more than one user will
 have simultaneous access to the file, because record numbers may change
 due to insertion or deletion by other users.
\end_layout

\begin_layout Standard
The time required to search an index depends upon the length of each record
 as well as the number of records, because longer records will require more
 blocks to store the file, and hence more disk accesses to search it.
 Therefore, you should keep these records as small as possible.
\end_layout

\begin_layout Standard
The first four bytes of each record in an index file contain the link to
 the associated record in the main file.
 polyFORTH ISD-4 predefines this field as 
\family typewriter
\series bold
LINK
\family default
\series default
.
 The phrase:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
LINK L@
\end_layout

\begin_layout Standard
reads the link field of the currently selected record and returns it on
 the stack.
\end_layout

\begin_layout Standard
When creating the record description (
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Record-Description"

\end_inset

) for an index file, you must skip over the 
\family typewriter
\series bold
LINK
\family default
\series default
 field by using the phrase 
\family typewriter
\series bold
4
\begin_inset space \space{}
\end_inset

FILLER <name>
\family default
\series default
 at the beginning of the layout, or by starting with a displacement of four
 rather than zero.
 For example:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
0 4 FILLER LINK ( Link to PEOPLE file)
\begin_inset Newline newline
\end_inset

 10 BYTES NICK ( Last name key)
\begin_inset Newline newline
\end_inset

 DROP
\end_layout

\begin_layout Standard
The key may be ASCII or binary.
 In order to make it possible to use binary integers as keys, as well as
 to speed up the search, the comparison made in the search routine compares
 
\shape italic
word-by-word
\shape default
, rather than byte-by-byte.
 To accommodate this, you must make your key fields an even number of bytes
 in length.
 To allow the exchange of data with machines which use a byte order that
 would render the most significant byte the second one in a string, the
 operators 
\family typewriter
\series bold
B@
\family default
\series default
 and 
\family typewriter
\series bold
B!
\family default
\series default
 reverse bytes when fetching and storing from disk such that the data on
 disk is in a compatible order.
 The can be defeated by setting 
\family typewriter
\series bold
REVERSE
\family default
\series default
 to 
\family typewriter
\series bold
FALSE
\family default
\series default
.
\end_layout

\begin_layout Standard
Be aware that the order of the records in the index file is subject to frequent
 change as a result of file insertion or deletion.
 Because the record number of an index record may change, it should not
 be used directly for any purpose.
\end_layout

\begin_layout Standard
You must also take special care when sharing ordered files.
 We suggest you limit the index file to keys, and keep all other data in
 an associated main file record.
 Otherwise, a task may be pointing at a current record in an index, but
 before it accesses the data in the record the index record changes position.
 
\end_layout

\begin_layout Subsubsection

\series bold
Ordered File Maintenance
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Ordered-File-Maintenance"

\end_inset


\end_layout

\begin_layout Standard
An 
\begin_inset Quotes eld
\end_inset

ordered index
\begin_inset Quotes erd
\end_inset

 file in polyFORTH is one in which the keys are main\SpecialChar \-
tained in ascending
 ASCII sequence.
 For instance, an index to a file of records of people might be ordered
 by last names.
\end_layout

\begin_layout Standard
An ordered file allows quick searching on key fields.
 For instance, given a name, we can search the index file looking for a
 match.
 From the index record where the match was found, we can obtain the link
 to the main file.
 
\end_layout

\begin_layout Paragraph

\series bold
Searching an Ordered Index
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "par:Searching-an-Ordered-Index"

\end_inset


\end_layout

\begin_layout Standard
In polyFORTH, this routine is called 
\family typewriter
\series bold
BINARY
\family default
\series default
 (named because it performs a binary search).
 Here's how it works:
\end_layout

\begin_layout Standard
As we've seen (
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Access-to-Working-Storage"

\end_inset

), field names return the address of the field in the 
\begin_inset Quotes eld
\end_inset

image
\begin_inset Quotes erd
\end_inset

 of the record in working storage.
 
\family typewriter
\series bold
BINARY
\family default
\series default
 expects to find the match criteria for the desired field in this image
 (Fig.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:10"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:10"

\end_inset


\begin_inset Graphics
	filename Binary.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Description

\family typewriter
BINARY
\family default
\series bold
 
\series default
searches the ordered index for a match to the key in working storage.
 It returns the content of the 
\family typewriter
\series bold
LINK
\family default
\series default
 field of the matching record, and aborts if there is no match.
\end_layout

\begin_layout Standard
Make sure that you have allocated enough room in working storage for all
 tasks (including the printer task) to hold the image of any record on which
 you use this technique (
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Installing-The-Package"

\end_inset

).
\end_layout

\begin_layout Standard
For instance, suppose we want to take a name from the input stream, then
 search for it in the 
\family typewriter
\series bold
NICK
\family default
\series default
 (short for 
\begin_inset Quotes eld
\end_inset

nickname
\begin_inset Quotes erd
\end_inset

) field of our 
\series bold
(
\family typewriter
NAMES
\family default
)
\series default
 file.
 The phrase:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
1 TEXT nickname NICK S!
\end_layout

\begin_layout Standard
captures the name from the input stream and stores it into the image of
 the 
\family typewriter
\series bold
NICK
\family default
\series default
 field in working storage.
\end_layout

\begin_layout Scrap
<<text>>=
\begin_inset Newline newline
\end_inset

256 VALUE #TB       
\backslash
 #TB is the size of the text input buffer.
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

CREATE FILE-PAD   #TB ALLOT     
\backslash
 Make a PAD for our exclusive use
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: >TEXT ( a n -- )   FILE-PAD #TB BLANK  FILE-PAD SWAP MOVE ;
\begin_inset Newline newline
\end_inset

: TEXT ( c -- )   WORD COUNT  >TEXT ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Now we use 
\family typewriter
\series bold
BINARY
\family default
\series default
 to search the index file for this name, first ensuring that the index file
 is current.
 
\family typewriter
\series bold
BINARY
\family default
\series default
 expects on the stack the arguments returned by a 
\family typewriter
\series bold
BYTES
\family default
\series default
 field:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
(NAMES) NICK BINARY
\end_layout

\begin_layout Standard
Here's what 
\family typewriter
\series bold
BINARY
\family default
\series default
 does:
\end_layout

\begin_layout Description

\series bold
Word Stack Action
\end_layout

\begin_layout Description

\family typewriter
BINARY
\family default
 (
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

-
\begin_inset space \space{}
\end_inset

n) Searches the current file looking for a match between the criteria in
 working storage and the given field in the data.
 Issues a system abort if it cannot find the record requested.
 On the stack is the record number of associated record in the main field
 (that is, the contents of the link field of the matching index record).
 The match\SpecialChar \-
ing index record number is in 
\family typewriter
\series bold
R#
\family default
\series default
.
\end_layout

\begin_layout Scrap
<<binary>>=
\begin_inset Newline newline
\end_inset

: BINARY ( n a -- n )   -BINARY  ORDERED RELEASE  ABORT" Unknown"  LINK
 L@ ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
(A related word, 
\family typewriter
\series bold
-BINARY
\family default
\series default
, is discussed in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "par:Inserting-a-Record-in-an-Ordered-Index"

\end_inset

.)
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Access to the record image in working storage, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Access-to-Working-Storage"

\end_inset


\begin_inset Newline newline
\end_inset

Binary search principles, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Ordered-Index-Files"

\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
R#
\family default
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Record-Selection"

\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
TEXT
\family default
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "par:Searching-an-Ordered-Index"

\end_inset


\begin_inset Newline newline
\end_inset

Working Storage, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Working-Storage"

\end_inset

 
\end_layout

\begin_layout Paragraph

\series bold
Inserting a Record in an Ordered Index
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "par:Inserting-a-Record-in-an-Ordered-Index"

\end_inset


\end_layout

\begin_layout Standard
Inserting a new record in an ordered file involves two steps.
 First, we must determine the location in the index file for a new key to
 be inserted.
 This ensures that the index file will always be properly 
\begin_inset Quotes eld
\end_inset

sorted.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Second, we must be able to insert the new key into the file at the appro\SpecialChar \-
priate
 place, moving all subsequent records one notch down in the file.
\end_layout

\begin_layout Standard
Using the example in Fig.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:8"

\end_inset

, let's consider what must happen when we add a new person to our database.
 First, must insert a new index record into the 
\family typewriter
\series bold
(NAMES)
\family default
\series default
 file in the appropriate place, and then allocate a new record in the 
\family typewriter
\series bold
PEOPLE
\family default
\series default
 file for the data itself.
 Finally, we must point the 
\family typewriter
\series bold
LINK
\family default
\series default
 field in the index record to the data record in the main file.
\end_layout

\begin_layout Standard
We've already seen in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Record-Allocation/Deallocation-Operators"

\end_inset

 that the word 
\family typewriter
\series bold
SLOT
\family default
\series default
 is used to allocate new records in data files.
 Adding a record to the index file is more compli\SpecialChar \-
cated, because we must
 insert the new record at the appropriate place to keep the keys ordered.
 For this purpose, we use the words 
\family typewriter
\series bold
-BINARY
\family default
\series default
 and 
\family typewriter
\series bold
+ORDERED
\family default
\series default
.
\end_layout

\begin_layout Description

\series bold
Word Stack Action
\end_layout

\begin_layout Description

\family typewriter
-BINARY
\family default
 (
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

-
\begin_inset space \space{}
\end_inset

t) Searches the current file looking for a match between the criteria in
 working storage and the given field in the data.
 A zero result (`false') means that a match was found; a non-zero flag means
 that no record in the file contains the indicated key.
 On exit, if a match is found 
\family typewriter
\series bold
R#
\family default
\series default
 contains the number of the first matching index file record; otherwise
 
\family typewriter
\series bold
R#
\family default
\series default
 contains the number of the index record before which an insertion will
 be made.
 Pronounced 
\begin_inset Quotes eld
\end_inset

not-binary,
\begin_inset Quotes erd
\end_inset

 because it returns `true' if a match is not found.
\end_layout

\begin_layout Scrap
<<-binary>>=
\begin_inset Newline newline
\end_inset

: -BINARY ( n a -- f )    FILE-HANDLE @ 0= DUP >R IF  BIND-FILE  THEN
\begin_inset Newline newline
\end_inset

    SWAP  AVAILABLE 4 nC@ 2/ 1+ DUP READ  ORDERED GET  BEGIN
\begin_inset Newline newline
\end_inset

        DUP 1+ 2/  2OVER OVER ADDRESS  -TEXT 1- IF
\begin_inset Newline newline
\end_inset

            NEGATE
\begin_inset Newline newline
\end_inset

        THEN  R# +!  2/ DUP 0=
\begin_inset Newline newline
\end_inset

    UNTIL  DROP  2DUP OVER ADDRESS  -TEXT 0> ABS  R# +!
\begin_inset Newline newline
\end_inset

    OVER ADDRESS -TEXT  R> IF  -FILE  THEN ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
+ORDERED
\family default
 (
\begin_inset space \space{}
\end_inset

-
\begin_inset space \space{}
\end_inset

) Inserts the record whose image is in working storage into the current
 record in an ordered index.
 Subsequent records in the index file are advanced one position relative
 to the start of the file.
\end_layout

\begin_layout Scrap
<<+ordered>>=
\begin_inset Newline newline
\end_inset

: RSWAP ( n a ra -- n a )    >R 2DUP R>  ROT 2/ 0 DO
\begin_inset Newline newline
\end_inset

        OVER 2 nC@  OVER 2 nC@  2OVER  >R 2 nC!  R> 2 nC!
\begin_inset Newline newline
\end_inset

        SWAP 2 +  SWAP 2 +
\begin_inset Newline newline
\end_inset

    LOOP  2DROP ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: DIRECTION ( n -- n a rh rl )
\begin_inset Newline newline
\end_inset

    AVAILABLE 4 nC@ +
\begin_inset Newline newline
\end_inset

    AVAILABLE 4 nC! TOUCH  ENTIRE
\begin_inset Newline newline
\end_inset

    AVAILABLE 4 nC@ 2 +
\begin_inset Newline newline
\end_inset

    SAFE R# @ ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: +ORDERED ( -- )
\begin_inset Newline newline
\end_inset

    FILE-HANDLE @ 0= DUP >R IF  BIND-FILE  THEN
\begin_inset Newline newline
\end_inset

    1 DIRECTION DO
\begin_inset Newline newline
\end_inset

        I RECORD  RSWAP TOUCH
\begin_inset Newline newline
\end_inset

    LOOP  2DROP  ORDERED RELEASE
\begin_inset Newline newline
\end_inset

    R> IF  -FILE  THEN ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard

\family typewriter
\series bold
-BINARY
\family default
\series default
 expects the same conditions as 
\family typewriter
\series bold
BINARY
\family default
\series default
 (
\begin_inset CommandInset ref
LatexCommand formatted
reference "par:Searching-an-Ordered-Index"

\end_inset

):
\end_layout

\begin_layout Enumerate
The current file is the ordered index to be searched.
\end_layout

\begin_layout Enumerate
The match criterion is in the key field in working storage.
\end_layout

\begin_layout Enumerate
The arguments produced by a 
\family typewriter
\series bold
BYTES
\family default
\series default
 field name are on the stack.
\end_layout

\begin_layout Standard

\family typewriter
\series bold
+ORDERED
\family default
\series default
 expects the following conditions:
\end_layout

\begin_layout Enumerate
The current file is the index to be modified.
\end_layout

\begin_layout Enumerate
The record before which the insertion is to take place has been previously
 selected by
\begin_inset Newline newline
\end_inset

 
\family typewriter
\series bold
-BINARY
\family default
\series default
.
\end_layout

\begin_layout Enumerate
The key and 
\family typewriter
\series bold
LINK
\family default
\series default
 fields to be inserted are in their respective fields in working storage.
\end_layout

\begin_layout Standard
Using our example, then, the standard procedure is:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
1 TEXT
\family default
\series default
 (scan the input stream for the name)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
NICK S!
\family default
\series default
 (store it into the image of 
\family typewriter
\series bold
NICK
\family default
\series default
)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
NICK -BINARY
\family default
\series default
 (search the index file, using the 
\family typewriter
\series bold
NICK
\family default
\series default
 field as the key)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
IF
\family default
\series default
 (no match:)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
SAVE PEOPLE SLOT RESTORE
\family default
\series default
 ( obtain available record number in main file)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
LINK !
\family default
\series default
 (store the record number into working storage)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
+ORDERED
\family default
\series default
 (insert the new index record)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
ELSE
\family default
\series default
 (duplicate entry)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
ORDERED RELEASE
\end_layout

\begin_layout Standard

\family typewriter
\series bold
1 ABORT" Already in file "
\end_layout

\begin_layout Standard

\family typewriter
\series bold
THEN ...
\end_layout

\begin_layout Standard
Because your code must provide the location into which the insertion will
 take place (using 
\family typewriter
\series bold
-BINARY
\family default
\series default
), you have the option of determining how to handle duplicate keys if 
\family typewriter
\series bold
-BINARY
\family default
\series default
 returns a false (zero) indication.
 This is normally handled as an abort condition, as shown above.
\end_layout

\begin_layout Standard
During execution of the 
\family typewriter
\series bold
-BINARY
\begin_inset space \space{}
\end_inset

...
\begin_inset space \space{}
\end_inset

+ORDERED
\family default
\series default
 sequence, the index file should not be accessed by any other task, since
 the record numbers of all records following the insertion point are changing.
\end_layout

\begin_layout Standard
To prevent conflicts, the Data Base Support package includes a facility
 management variable called 
\family typewriter
\series bold
ORDERED
\family default
\series default
.
 
\family typewriter
\series bold
-BINARY
\family default
\series default
 issues an 
\family typewriter
\series bold
ORDERED
\begin_inset space \space{}
\end_inset

GET
\family default
\series default
.
 This phrase protects the file from being accessed by other tasks on the
 system until the current task releases it.
 In this way, file integrity is maintained.
 
\family typewriter
\series bold
+ORDERED
\family default
\series default
 issues an 
\family typewriter
\series bold
ORDERED
\begin_inset space \space{}
\end_inset

RELEASE
\family default
\series default
.
 If you exit from the operation in any other way, you must do this yourself.
 The intent is for the task that performed the search to retain control
 of the file from the moment when the insertion point has been found until
 the expected insertion has taken place, or until it has decided not to
 do one.
\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
BINARY
\family default
\series default
 also performs an 
\family typewriter
\series bold
ORDERED
\begin_inset space \space{}
\end_inset

GET
\family default
\series default
, so that searches cannot be performed while another task is using this
 facility.
 
\family typewriter
\series bold
BINARY
\family default
\series default
 performs an 
\family typewriter
\series bold
ORDERED
\begin_inset space \space{}
\end_inset

RELEASE
\family default
\series default
 immediately after the search, how\SpecialChar \-
ever, so it 
\begin_inset Quotes eld
\end_inset

holds
\begin_inset Quotes erd
\end_inset

 the facility only during the period of the search itself.
\end_layout

\begin_layout Scrap
<<ordered>>=
\begin_inset Newline newline
\end_inset

VARIABLE ORDERED   0 ORDERED !
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Binary Searches, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "par:Searching-an-Ordered-Index"

\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
SAVE
\family default
\series default
 and 
\family typewriter
\series bold
RESTORE
\family default
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Available-Records"

\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
TEXT
\family default
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "par:Searching-an-Ordered-Index"

\end_inset

 
\end_layout

\begin_layout Paragraph

\series bold
Deleting a Record From an Ordered Index
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "par:Deleting-a-Record-From-an-Ordered-Index"

\end_inset


\end_layout

\begin_layout Standard

\family typewriter
\series bold
-ORDERED
\family default
\series default
 is used to delete a record from an index file.
 It may only be issued immediately after the record has been selected (normally
 by a prior use of 
\family typewriter
\series bold
BINARY
\family default
\series default
).
\end_layout

\begin_layout Description

\series bold
Word Stack Action
\end_layout

\begin_layout Description

\family typewriter
-ORDERED
\family default
 (
\begin_inset space \space{}
\end_inset

) Deletes the current record (
\family typewriter
\series bold
R#
\family default
\series default
) from an order\SpecialChar \-
ed index which is the current file.
 Subsequent records move back one position, relative to the start of the
 file.
\end_layout

\begin_layout Scrap
<<-ordered>>=
\begin_inset Newline newline
\end_inset

: -ORDERED ( -- )
\begin_inset Newline newline
\end_inset

    FILE-HANDLE @ 0= DUP >R IF  BIND-FILE  THEN
\begin_inset Newline newline
\end_inset

    ENTIRE SWAP ERASE  -1 DIRECTION SWAP DO
\begin_inset Newline newline
\end_inset

        I RECORD RSWAP TOUCH
\begin_inset Newline newline
\end_inset

    -1 +LOOP  2DROP  ORDERED RELEASE
\begin_inset Newline newline
\end_inset

    R> IF  -FILE  THEN ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Because the record that until now followed it will occupy the actual space
 that was occupied by the deleted record, the record is completely obliterated
 by this operation (unlike 
\family typewriter
\series bold
SCRATCH
\family default
\series default
, which only changes the first two bytes of the record).
\end_layout

\begin_layout Standard
Here is an example using 
\family typewriter
\series bold
-ORDERED
\family default
\series default
.
\end_layout

\begin_layout Standard

\family typewriter
\series bold
1 TEXT
\family default
\series default
 (scan the input stream for the name)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
NICK S!
\family default
\series default
 (store it into the image of 
\family typewriter
\series bold
NICK
\family default
\series default
)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
NICK BINARY
\family default
\series default
 (search the index file, using the 
\family typewriter
\series bold
NICK
\family default
\series default
 field as the key; return main file record number)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
ORDERED GRAB
\family default
\series default
 (regain control of 
\family typewriter
\series bold
ORDERED
\family default
\series default
, which 
\family typewriter
\series bold
BINARY
\family default
\series default
 released)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
-ORDERED
\family default
\series default
 (delete the index record)
\end_layout

\begin_layout Standard

\family typewriter
\series bold
PEOPLE SCRATCH
\family default
\series default
 (de-allocate the record in the main file whose number is on the stack from
 
\series bold
BINARY
\series default
.)
\end_layout

\begin_layout Standard
In this example we had to 
\family typewriter
\series bold
GRAB
\family default
\series default
 the facility variable 
\family typewriter
\series bold
ORDERED
\family default
\series default
 to prevent another task from accessing the file during the moving of records
 that will occur during the 
\family typewriter
\series bold
-ORDERED
\family default
\series default
 operation.
 
\family typewriter
\series bold
GRAB
\family default
\series default
 is used instead of 
\family typewriter
\series bold
GET
\family default
\series default
 because 
\family typewriter
\series bold
GET
\family default
\series default
 releases the CPU so other tasks can run (and potentially alter the file).
 
\family typewriter
\series bold
-ORDERED
\family default
\series default
 performs an 
\family typewriter
\series bold
ORDERED
\begin_inset space \space{}
\end_inset

RELEASE
\family default
\series default
 when it is finished.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Binary Searches, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Ordered-File-Maintenance"

\end_inset


\begin_inset Newline newline
\end_inset


\series bold
SCRATCH
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Record-Allocation/Deallocation-Operators"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
An Example---A Simple Mailing List
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Simple-Mailing-List"

\end_inset


\end_layout

\begin_layout Standard
The following pages show an example of a simple mailing list application.
 It demonstrates the use of an ordered index to provide easy access into
 a file based on a key, such as last name and first initial, and a report,
 which is in alphabetic order based on that key.
\end_layout

\begin_layout Standard
This application is a good example of the layout of a Data Base appli\SpecialChar \-
cation,
 with a 
\begin_inset Quotes eld
\end_inset

help screen
\begin_inset Quotes erd
\end_inset

 at the top, followed by the relevant file definitions.
 The help screen may be displayed any time by the command 
\family typewriter
\series bold
PERSON-HELP
\family default
\series default
.
\end_layout

\begin_layout Scrap
<<personnel>>=
\begin_inset Newline newline
\end_inset

: PERSON-HELP ( -- )
\begin_inset Newline newline
\end_inset

    CR ." PERSON-HELP   Display these PERSONNEL instructions."
\begin_inset Newline newline
\end_inset

    CR ." enter name    Enter a new person into the file with"
\begin_inset Newline newline
\end_inset

    CR ."                   access key of 'name'."
\begin_inset Newline newline
\end_inset

    CR
\begin_inset Newline newline
\end_inset

    CR ." remove name   Delete 'name' from the data base."
\begin_inset Newline newline
\end_inset

    CR
\begin_inset Newline newline
\end_inset

    CR ." fix name      Enter new information replacing all"
\begin_inset Newline newline
\end_inset

    CR ."                   current data for 'name'."
\begin_inset Newline newline
\end_inset

    CR
\begin_inset Newline newline
\end_inset

    CR ." view name     Display a person whose key is 'name'."
\begin_inset Newline newline
\end_inset

    CR
\begin_inset Newline newline
\end_inset

    CR ." v             Display current person."
\begin_inset Newline newline
\end_inset

    CR
\begin_inset Newline newline
\end_inset

    CR ." all           Display all records in the file."
\begin_inset Newline newline
\end_inset

    CR ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

FILE Personnel.dbf
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: /Personnel ( -- ) 
\backslash
 Runtime file setup
\begin_inset Newline newline
\end_inset

    Personnel.dbf  S" Personnel.dbf" >FILE
\begin_inset Newline newline
\end_inset

    FALSE REVERSE !  BIG-ENDIAN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

( Bytes  records   origin           name   )
\begin_inset Newline newline
\end_inset

     16      300        0 BLOCK-DATA (PERSONNEL)
\begin_inset Newline newline
\end_inset

    128      300  +ORIGIN BLOCK-DATA  PERSONNEL 
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

<<personnel-layout>>
\begin_inset Newline newline
\end_inset

<<person>>
\begin_inset Newline newline
\end_inset

<<digits>>
\begin_inset Newline newline
\end_inset

<<!label>>
\begin_inset Newline newline
\end_inset

<<enter>>
\begin_inset Newline newline
\end_inset

<<fix>>
\begin_inset Newline newline
\end_inset

<<remove>>
\begin_inset Newline newline
\end_inset

<<.phone>>
\begin_inset Newline newline
\end_inset

<<.zip>>
\begin_inset Newline newline
\end_inset

<<.person>>
\begin_inset Newline newline
\end_inset

<<view>>
\begin_inset Newline newline
\end_inset

<<all>>
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The record layout for both the 
\family typewriter
\series bold
PERSONNEL
\family default
\series default
 and 
\family typewriter
\series bold
(PERSONNEL)
\family default
\series default
 files.
 The 
\family typewriter
\series bold
LINK
\family default
\series default
 is predefined, and subsequent fields are offset from the previous 4 fields.
 For example, the 
\family typewriter
\series bold
NICKNAME
\family default
\series default
 name is 12 bytes long starting in the 5th byte.
 
\family typewriter
\series bold
ZIP-CODE
\family default
\series default
 is a 32-bit number, as is 
\family typewriter
\series bold
PHONE-NUMBER
\family default
\series default
.
 
\family typewriter
\series bold
AREA-CODE
\family default
\series default
 is single precision.
\end_layout

\begin_layout Standard
The offset for the field types is carried on the stack so that it may be
 either displayed or dropped at the end of the load.
 We use it in this case to display the record size.
\end_layout

\begin_layout Scrap
<<personnel-layout>>=
\begin_inset Newline newline
\end_inset

  4 ( LINK)
\begin_inset Newline newline
\end_inset

  12 BYTES NICKNAME      ( Nickname, used as the key.)
\begin_inset Newline newline
\end_inset

  32 BYTES FULL-NAME     ( Full name, first name first.)
\begin_inset Newline newline
\end_inset

  32 BYTES STREET-ADDR   ( Street addr.
 or PO Box, etc.)
\begin_inset Newline newline
\end_inset

  32 BYTES CITY-STATE
\begin_inset Newline newline
\end_inset

     LONG ZIP-CODE       ( Note: can only handle US zips)
\begin_inset Newline newline
\end_inset

     NUMERIC AREA-CODE
\begin_inset Newline newline
\end_inset

     LONG PHONE-NUMBER
\begin_inset Newline newline
\end_inset

.( Personnel.dbf records = ) .
  .( Bytes ) CR
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
PERSON
\family default
 parses the input stream following it for the 
\family typewriter
\series bold
NICKNAME
\family default
\series default
 field.
 It leaves us pointing at the 
\family typewriter
\series bold
NICKNAME
\family default
\series default
 field in the 
\family typewriter
\series bold
(PERSONNEL)
\family default
\series default
 file.
\end_layout

\begin_layout Scrap
<<person>>=
\begin_inset Newline newline
\end_inset

: PERSON ( - n a)   1 TEXT  NICKNAME S!  (PERSONNEL) NICKNAME ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
DIGITS
\family default
 Prompts the terminal for input and converts it to binary on the stack.
\end_layout

\begin_layout Scrap
<<digits>>=
\begin_inset Newline newline
\end_inset

: DIGITS ( - n)   QUERY  32 WORD COUNT  0 0 2SWAP
\begin_inset Newline newline
\end_inset

    BEGIN  >NUMBER  DUP
\begin_inset Newline newline
\end_inset

    WHILE  1 /STRING
\begin_inset Newline newline
\end_inset

    REPEAT  2DROP DROP ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
!LABEL
\family default
 Prompts for each field in order.
\end_layout

\begin_layout Scrap
<<!label>>=
\begin_inset Newline newline
\end_inset

: !LABEL   CR ." Name: "   FULL-NAME ASK
\begin_inset Newline newline
\end_inset

     CR   ." Street: "   STREET-ADDR ASK
\begin_inset Newline newline
\end_inset

     CR   ." City, State: "   CITY-STATE ASK
\begin_inset Newline newline
\end_inset

     CR   ." Zip: "   DIGITS ZIP-CODE L!
\begin_inset Newline newline
\end_inset

     CR   ." Area: "   DIGITS AREA-CODE N!
\begin_inset Newline newline
\end_inset

          ." Phone: "   DIGITS PHONE-NUMBER L! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
enter
\family default
 creates a new entry for the person whose nickname follows in the input
 stream, prompting for entry of additional data.
 If there is already an entry for that nickname, an error message is issued.
 In either case, the record remains the current one for future editing.
\end_layout

\begin_layout Scrap
<<enter>>=
\begin_inset Newline newline
\end_inset

: enter   PERSON -BINARY IF  SAVE  PERSONNEL SLOT DUP
\begin_inset Newline newline
\end_inset

        READ  NICKNAME S@ NICKNAME B!  RESTORE  DUP LINK !
\begin_inset Newline newline
\end_inset

        +ORDERED  PERSONNEL READ !LABEL
\begin_inset Newline newline
\end_inset

    ELSE  ORDERED RELEASE  1 ABORT" Already known "
\begin_inset Newline newline
\end_inset

    THEN ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
fix
\family default
 accepts new data for the pre-existing entry whose nickname follows in the
 input stream.
\end_layout

\begin_layout Scrap
<<fix>>=
\begin_inset Newline newline
\end_inset

: fix   PERSON BINARY  PERSONNEL READ !LABEL ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
remove
\family default
 deletes the person whose nickname follows from the data base.
\end_layout

\begin_layout Scrap
<<remove>>=
\begin_inset Newline newline
\end_inset

: remove   PERSON  BINARY -ORDERED  PERSONNEL SCRATCH ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
.PHONE
\family default
 displays the 
\family typewriter
\series bold
AREA-CODE
\family default
\series default
 and 
\family typewriter
\series bold
PHONE-NUMBER
\family default
\series default
 as one would expect to see them.
\end_layout

\begin_layout Scrap
<<.phone>>=
\begin_inset Newline newline
\end_inset

: .PHONE   AREA-CODE N@ 0  <# 41 HOLD # # #  40 HOLD #>
\begin_inset Newline newline
\end_inset

    TYPE SPACE  PHONE-NUMBER L@ 0 <# # # # #  45 HOLD ( -)
\begin_inset Newline newline
\end_inset

    # # # #> TYPE ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
.ZIP
\family default
 forces the 
\family typewriter
\series bold
ZIP-CODE
\family default
\series default
 to be displayed in 
\family typewriter
\series bold
nnnnn
\family default
\series default
 format.
\end_layout

\begin_layout Scrap
<<.zip>>=
\begin_inset Newline newline
\end_inset

: .ZIP   ZIP-CODE L@ 0 <# # # # # # #>  TYPE ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
n
\begin_inset space ~
\end_inset

.PERSON
\family default
 displays the data from the nth record in the 
\family typewriter
\series bold
PERSONNEL
\family default
\series default
 data file.
\end_layout

\begin_layout Scrap
<<.person>>=
\begin_inset Newline newline
\end_inset

: .PERSON ( n)   PERSONNEL READ  CR  FULL-NAME B?  5 SPACES
\begin_inset Newline newline
\end_inset

    ." (" SPACE   NICKNAME B?  ." )"  CR   STREET-ADDR B?
\begin_inset Newline newline
\end_inset

    CR  CITY-STATE B? CR   .ZIP  10 SPACES  .PHONE  SPACE ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
view
\family default
 Parses the input stream and displays the proper record.
 
\family typewriter
\series bold
s
\family default
\series default
 does the same thing using 
\family typewriter
\series bold
R#
\family default
\series default
 (the current record).
\end_layout

\begin_layout Scrap
<<view>>=
\begin_inset Newline newline
\end_inset

: view   PERSON BINARY  .PERSON ;
\begin_inset Newline newline
\end_inset

: v   R# @ .PERSON ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
all
\family default
 uses the 
\family typewriter
\series bold
RECORDS
\family default
\series default
 word which returns the initial value and number of records+1 in the data
 file.
 The loop counter is used to access each record in the ordered index 
\family typewriter
\series bold
(PERSONNEL)
\family default
\series default
, where the 
\family typewriter
\series bold
LINK
\family default
\series default
 field points to the data in the 
\family typewriter
\series bold
PERSONNEL
\family default
\series default
 file.
\end_layout

\begin_layout Scrap
<<all>>=
\begin_inset Newline newline
\end_inset

: all   (PERSONNEL) RECORDS DO
\begin_inset Newline newline
\end_inset

        I (PERSONNEL) READ  LINK L@ .PERSON  CR
\begin_inset Newline newline
\end_inset

    LOOP  SPACE ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Here is a sample of the output of 
\family typewriter
\series bold
all
\family default
\series default
:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Andrews, Carl      ( Carl )
\end_layout

\begin_layout Plain Layout

1432 Morriston Ave.
 
\end_layout

\begin_layout Plain Layout

Parkerville, PA 
\end_layout

\begin_layout Plain Layout

17214          (717) 555-9853 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Cook, Dottie      ( Dot )
\end_layout

\begin_layout Plain Layout

154 Sweet Rd.
 
\end_layout

\begin_layout Plain Layout

Grand Prairie, TX 
\end_layout

\begin_layout Plain Layout

75050          (214) 642-0011 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Chapel, Doug      ( Doug )
\end_layout

\begin_layout Plain Layout

75 Fleetwood Dr.
 
\end_layout

\begin_layout Plain Layout

Rockville, MD 
\end_layout

\begin_layout Plain Layout

20852          (301) 777-1259 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Boehning, Greg      ( Greg )
\end_layout

\begin_layout Plain Layout

POB 41256 
\end_layout

\begin_layout Plain Layout

Santa Cruz, CA 
\end_layout

\begin_layout Plain Layout

95061          (408) 666-7891  
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection

\series bold
Hierarchical Ordered Files
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Hierarchical-Ordered-Files"

\end_inset


\end_layout

\begin_layout Standard
polyFORTH's ordered indexes have the property than whenever a record is
 inserted or deleted all records following the point at which the action
 occurs are physically moved to accommodate the change.
 Although this form of maintenance is somewhat slower than maintaining order
 by updating chains or pointers (as some data bases do) it is substantially
 more reliable.
\end_layout

\begin_layout Standard
The assumption is that in most applications an index is searched frequent\SpecialChar \-
ly,
 and insertions and deletions occur relatively infrequently.
 As a result, we have optimized search time and reliability above maintenance
 time.
\end_layout

\begin_layout Standard
The actual time an insertion or deletion will take depends upon the position
 in the file at which the action occurs (if it is near the beginning of
 the file more records must be moved), the number of records in the file,
 and the size of each index record.
 In practice, indexes of several thousand records may be maintained on a
 hard disk without unacceptable delays.
\end_layout

\begin_layout Standard
Some applications, however, involve tens of thousands of records that must
 be searched and maintained in order.
 In order to deal with such appli\SpecialChar \-
cations, the recommended approach is to
 divide the total index into several sub-indexes, each of which will be
 a manageable size.
 For example, a company with 40,000 employees might separate them into departmen
ts.
 The department code can index a table in memory giving the appropriate
 origin block number for the index of employees in each department.
 This block number may be put into the 
\family typewriter
\series bold
ORG
\family default
\series default
 field of the FDA of a private copy of a generic file definition for the
 index.
 Or, the first letter of the employee's last name may be used to select
 one of 26 indexes.
\end_layout

\begin_layout Standard
Such a multi-layered approach is called a 
\shape italic
hierarchy
\shape default
.
 If you are designing a hierarchical file structure, the important consideration
s include keeping the decision-making process simple and independent of
 any frequently changing conditions.
 If possible, try to base the initial choice on something that can be evaluated
 without need for a special file search.
 Above all, you should avoid keeping record numbers of records in an ordered
 index in a higher-level index, as ordered index record numbers are subject
 to change.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
File Definition Areas, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:File-Definition-and-Access"

\end_inset

 
\end_layout

\begin_layout Subsection

\series bold
Chaining
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Chaining"

\end_inset


\end_layout

\begin_layout Standard
Chaining is the linkage of one record to another, whether in the same or
 a different file.
 Generally, chaining is appropriate when an unknown amount of data must
 be associated with a piece of information.
\end_layout

\begin_layout Standard
There are as many ways to chain records as there are varieties of applica\SpecialChar \-
tions.
 In this section, we'll cover most of the situations that require chaining,
 and present general solutions to each case.
 
\end_layout

\begin_layout Subsubsection

\series bold
Chaining Techniques
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Chaining-Techniques"

\end_inset


\end_layout

\begin_layout Standard
Before you begin coding, make sure that you study the exact requirements
 carefully.
 Reviewing this section for considerations will be helpful.
\end_layout

\begin_layout Standard
Here are some design considerations to take into account:
\end_layout

\begin_layout Enumerate
Will the chaining occur within the same file, or to an auxiliary file?
\end_layout

\begin_layout Enumerate
Must there always be at least one auxiliary record chained to a main record,
 or may a main record have no auxiliary records?
\end_layout

\begin_layout Enumerate
When you traverse the chain, should it be in the order in which its elements
 were added (first-in, first-out), or in reverse (last-in, first-out), or
 should the chain be maintained in order by a key (such as date and time)?
\end_layout

\begin_layout Standard
Let's explore these issues one by one.
\end_layout

\begin_layout Standard
In some applications, it is possible to chain records within a single file.
 Naturally, this is easier than chaining to another file.
\end_layout

\begin_layout Standard
For example, suppose that we have a file of customer names and addresses.
 Some of our customers have several addresses: one for invoicing, one for
 shipping, and so on.
 Because multiple addresses are the exception, not the rule, and because
 address fields are large, we'd prefer not to allow room for multiple address
 fields within each customer record.
\end_layout

\begin_layout Standard
So, we use chaining instead.
 At this point, we must examine how much information each auxiliary record
 must contain.
 It turns out that each auxiliary record must contain almost as much information
 as the main record.
 If we create a separate file for the auxiliary records, each record would
 need to be nearly as large as a record in the main file.
\end_layout

\begin_layout Standard
If there is relatively little in the main record (the one all customers
 have) beyond the primary address, you may as well use additional records
 in the same file to contain additional addresses.
 As Fig.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:11"

\end_inset

 shows, this approach lets us re-use the field layout structure that we
 created for the main file records, even though there are some fields in
 the primary record that we don't use in the auxiliary records.
\end_layout

\begin_layout Standard
For another example of chaining within a single file, we turn to the 
\family typewriter
\series bold
Glossary
\family default
\series default
 application included with polyFORTH ISD-4 (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Glossary-Utility"

\end_inset

).
 This application lets you enter descriptions of the commands in your applicatio
ns and produces alphabetized glossaries.
\end_layout

\begin_layout Standard
For each word that you enter into the system, the 
\family typewriter
\series bold
Glossary
\family default
\series default
 saves its name, vocabulary, stack effects (before and after) as text strings,
 the source block, the date this entry was created or updated, plus as many
 lines of descriptive text as you care to include.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:11"

\end_inset


\begin_inset Graphics
	filename Chains.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:12"

\end_inset


\begin_inset Graphics
	filename Glossary.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Fig.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:12"

\end_inset

 shows the record structure for the 
\family typewriter
\series bold
Glossary
\family default
\series default
.
 All data except the text is stored in the main record for each command.
 This record points to an auxiliary record that contains the text description.
 This record may in turn point to a second text record, and so on.
 A separate index file contains the alphabetized keys that point to main
 records in this file.
\end_layout

\begin_layout Standard
Although the main records and auxiliary records share 
\shape italic
no
\shape default
 fields in common (except 
\family typewriter
\series bold
LINK
\family default
\series default
), they are the same size.
 Thus it is most efficient to keep both types of records in the same file.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:13"

\end_inset


\begin_inset Graphics
	filename Serials.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
A third example illustrates the opposite situation.
 Suppose we have a list of customers who have purchased our products.
 For each customer, we also have a list of the serial numbers of the units
 they received.
 For some customers, there are no serial numbers; for others, as many as
 twenty.
\end_layout

\begin_layout Standard
You can see in Fig.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:13"

\end_inset

 that a serial number record takes much less space than a customer record.
 Because of this size variance, it's better to create two separate files,
 one called 
\family typewriter
\series bold
CUSTOMERS
\family default
\series default
 and the other 
\family typewriter
\series bold
SERIALS
\family default
\series default
.
 Each main record in the 
\family typewriter
\series bold
CUSTOMERS
\family default
\series default
 file may chain to one or a series of records in the 
\family typewriter
\series bold
SERIALS
\family default
\series default
 file.
 A record in 
\family typewriter
\series bold
CUSTOMERS
\family default
\series default
 can also contain an empty link, which would be represented by a value of
 -1 in the 
\family typewriter
\series bold
LINK
\family default
\series default
 field.
 A -1 
\family typewriter
\series bold
LINK
\family default
\series default
 also identifies the last serial number for a particular customer.
\end_layout

\begin_layout Standard
This last example raises the second consideration: whether the application
 must be able to handle the case of no auxiliary records, or whether the
 minimum number of auxiliary records attached to a main record must be one.
\end_layout

\begin_layout Standard
In the first case, when a main record is created, its link can be left alone
 (-1) and no auxiliary record need be 
\family typewriter
\series bold
SLOT
\family default
\series default
ted.
 However, the routine that appends a new auxiliary record to the chain must
 check whether it is linking from the main record or an auxiliary record.
\end_layout

\begin_layout Standard
In the second case, when a main record is created, an auxiliary record must
 also be slotted, and its number saved in the main record's pointer.
 Further\SpecialChar \-
more, the routines for advancing through the chain will differ,
 as we'll see in the next section.
\end_layout

\begin_layout Standard
A third consideration is whether chaining must be last-in, last-out; last-in,
 first-out; or both.
 In the case of the 
\family typewriter
\series bold
Glossary
\family default
\series default
 described earlier, obviously chaining must be first-in, first-out.
 In such cases, the process of adding a new record to the chain involves:
\end_layout

\begin_layout Enumerate
Finding the end of the existing chain;
\end_layout

\begin_layout Enumerate
Allocating a new record;
\end_layout

\begin_layout Enumerate
Setting the link in the last record of the existing chain to point to the
 new record.
\end_layout

\begin_layout Standard
An example of the opposite situation is a bookkeeping database in which
 each customer record chains to a series of auxiliary records containing
 transactions.
 Because we are almost always more interested in recent transactions than
 ancient ones, we chain in a last-in, first-out manner.
 In this case, the process of adding a new record to the chain involves:
\end_layout

\begin_layout Enumerate
Allocating a new auxiliary record;
\end_layout

\begin_layout Enumerate
Setting the main record to point to it;
\end_layout

\begin_layout Enumerate
Placing the main record's previous link number into the link field of the
 new record.
\end_layout

\begin_layout Standard
If the application demands that both directions of chain-following be allowed,
 then each auxiliary record must contain two link fields: one to the next
 record in the chain, and one to the previous.
\end_layout

\begin_layout Standard
Each chained record should contain a pointer back to the record that is
 the head of the chain (which may or may not be in the same file as the
 chain).
 Some applications use this directly.
 For instance, suppose in our serial number example we keep an ordered index
 file using the serial number itself as the key.
 If records in 
\family typewriter
\series bold
SERIALS
\family default
\series default
 contain a pointer to the owner of the chain as shown in Fig.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:13"

\end_inset

, then by entering a serial number the user can see which customer has received
 that instrument.
\end_layout

\begin_layout Standard
The most important reason for including a pointer to the owner, even if
 the application doesn't otherwise demand it, is for ensuring integrity
 of the data.
 If through some mischance of hardware failure a link in the main file becomes
 lost, the chains can be reconstructed and attached to the main records.
 
\end_layout

\begin_layout Subsubsection

\series bold
Chaining Commands
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Chaining-Commands"

\end_inset


\end_layout

\begin_layout Standard
As we have seen in the previous section, the choice of chaining techniques
 depends on application needs and on performance tradeoffs.
 Rather than attempt to decide for you, the developers of polyFORTH ISD-4
 provide a collection of commonly used chaining tools.
 You may leave them as is, or you may modify them.
 The table below gives the general set of commands in the chaining toolbox.
 Some words appear more than once; this is because several implementations
 may be useful, depending on how you've answered the design questions in
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Chaining-Techniques"

\end_inset

.
 The version shipped with the system is marked with an (*).
 The others are minor variants; code for some of the alternate versions
 is given elsewhere in this chapter.
\end_layout

\begin_layout Description

\series bold
Word Stack Action
\end_layout

\begin_layout Description

\family typewriter
HEAD
\family default
 (
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

a) A user variable that points to the first record (head) of the current
 chain.
\end_layout

\begin_layout Scrap
<<head>>=
\begin_inset Newline newline
\end_inset

#USER CELL +USER HEAD TO #USER
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
LINK
\family default
 (
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

a) A pre-defined field (the first four bytes of any record) which may be
 used for chaining.
 This same field is used in ordered index records to link to the main file
 records.
\end_layout

\begin_layout Scrap
<<link>>=
\begin_inset Newline newline
\end_inset

0 LONG LINK DROP
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
FIRST
\family default
 (
\begin_inset space \space{}
\end_inset

) (*) 
\family typewriter
\series bold
READ
\family default
\series default
s the 
\family typewriter
\series bold
HEAD
\family default
\series default
 record in the chain.
 This version is used in applications in which there is always at least
 one auxiliary record and all are within the same file.
\end_layout

\begin_layout Scrap
<<first>>=
\begin_inset Newline newline
\end_inset

: FIRST ( -- )   HEAD @ READ ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
FIRST
\family default
 (
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

t) Returns a flag indicating whether the main record is chained to any auxiliary
 records, and if it is, 
\family typewriter
\series bold
READ
\family default
\series default
s the record.
 This version is used in applications in which the 
\family typewriter
\series bold
HEAD
\family default
\series default
 record may have no auxiliary records, and when auxiliary records are in
 a different file.
\end_layout

\begin_layout Description

\family typewriter
-NEXT
\family default
 (
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

t) (*) Reads the next record, assuming that the chain is linked through
 the field called 
\family typewriter
\series bold
LINK
\family default
\series default
.
 Returns `true' if there is 
\shape italic
not
\shape default
 a next record in the chain.
 Pronounced 
\begin_inset Quotes eld
\end_inset

not-next.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Scrap
<<-next>>=
\begin_inset Newline newline
\end_inset

: -NEXT ( -- t )   LINK L@  DUP 0> IF  READ 1  THEN  1- ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
-NEXT
\family default
 (
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

r/0) Alternate version of 
\family typewriter
\series bold
-NEXT
\family default
\series default
; returns the record number of the next record in the chain, if any, 0 (`false')
 otherwise.
 Does not read the record.
\end_layout

\begin_layout Description

\family typewriter
-LOCATE
\family default
 (
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

-
\begin_inset space \space{}
\end_inset

t) Searches the chain, starting from 
\family typewriter
\series bold
HEAD
\family default
\series default
, for the nth record, returning true if the chain isn't that long.
 Otherwise, it returns false, having left 
\family typewriter
\series bold
R#
\family default
\series default
 pointing to the specified record.
\end_layout

\begin_layout Scrap
<<-locate>>=
\begin_inset Newline newline
\end_inset

: -LOCATE ( n -- r t )
\begin_inset Newline newline
\end_inset

    1+ FIRST  BEGIN
\begin_inset Newline newline
\end_inset

        1- DUP WHILE
\begin_inset Newline newline
\end_inset

        -NEXT IF  EXIT
\begin_inset Newline newline
\end_inset

    THEN  REPEAT ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
CHAIN
\family default
 (
\begin_inset space \space{}
\end_inset

n) Inserts a new record at the nth position.
 If 
\shape italic
n
\shape default
 is larger than the length of the chain, inserts the new record at the end.
 Alternate versions might take no argument and chain at the beginning (last-in,
 first-out), end (first-in, first-out) or according to a key.
\end_layout

\begin_layout Scrap
<<chain>>=
\begin_inset Newline newline
\end_inset

: CHAIN ( n -- )    -LOCATE DROP  ( nth record or end )
\begin_inset Newline newline
\end_inset

    SLOT LINK OVER  SNATCH  SWAP READ  LINK L! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
UNCHAIN
\family default
 (
\begin_inset space \space{}
\end_inset

n) Removes the nth record from the chain.
\end_layout

\begin_layout Scrap
<<unchain>>=
\begin_inset Newline newline
\end_inset

: UNCHAIN ( n -- )    DUP 0= ABORT" Won't"  -LOCATE ABORT" Not found"
\begin_inset Newline newline
\end_inset

    SAVE  LINK L@ READ  LINK 0 SNATCH  RESTORE  LINK L! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
SNATCH
\family default
 (
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

r
\begin_inset space \space{}
\end_inset

-
\begin_inset space \space{}
\end_inset

r) Given a field address and record number, fetches the record number from
 that field and replaces it with the record number given.
 It is used to update chains.
\end_layout

\begin_layout Scrap
<<snatch>>=
\begin_inset Newline newline
\end_inset

: SNATCH ( a r -- r )   OVER L@  SWAP ROT L! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The arguments for 
\family typewriter
\series bold
-LOCATE
\family default
\series default
, 
\family typewriter
\series bold
CHAIN
\family default
\series default
, and 
\family typewriter
\series bold
UNCHAIN
\family default
\series default
 count from zero, where zero is the first record in the chain, and count
 sequentially down the chain.
 An argument of -1 is conventionally used to specify the end of the chain
 (since you don't necessarily know how long the chain is).
\end_layout

\begin_layout Standard
The standard versions of 
\family typewriter
\series bold
FIRST
\family default
\series default
 and 
\family typewriter
\series bold
-NEXT
\family default
\series default
 assume there is always at least one record in the chain, and it's also
 the 
\family typewriter
\series bold
HEAD
\family default
\series default
 record (i.e., it will be subject to the same processing as the others).
 The chain may be processed in a 
\family typewriter
\series bold
BEGIN
\begin_inset space \space{}
\end_inset

...
\begin_inset space \space{}
\end_inset

UNTIL
\family default
\series default
 loop:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
FIRST BEGIN ...
 -NEXT UNTIL ...
\end_layout

\begin_layout Standard
The alternate versions allow for the possibility that there are no auxiliary
 chains, and are optimized for a 
\series bold
BEGIN
\series default

\begin_inset space \space{}
\end_inset


\series bold
...
\series default

\begin_inset space \space{}
\end_inset


\series bold
WHILE
\series default

\begin_inset space \space{}
\end_inset


\series bold
...
\series default

\begin_inset space \space{}
\end_inset


\series bold
REPEAT
\series default
 loop:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
FIRST BEGIN ?DUP WHILE READ ...
\begin_inset Newline newline
\end_inset

 NEXT REPEAT ...
\end_layout

\begin_layout Standard
If you have only one set of chained records and the top of the chain is
 in a different file from the members, you may incorporate the selection
 of the file in the words 
\family typewriter
\series bold
FIRST
\family default
\series default
, etc.
 If you have several sets, you will need to select the file externally.
 Still another set of variations might allow for the fact that you have
 more than one chain attached to your main file, and therefore not all chains
 start with the 
\family typewriter
\series bold
LINK
\family default
\series default
 in the main file record.
 Moreover, there may even be multiple chains through the auxiliary records.
 In these cases, you would remove the references to 
\family typewriter
\series bold
LINK
\family default
\series default
 in these words and specify the field externally.
\end_layout

\begin_layout Standard
The intent here is to present a design concept that has worked in many applicati
ons, but which presumes that you will tailor a basic vocabulary to your
 specific application needs---a practice that is consistent with the overall
 design of Forth in general.
 Assuming you are adding custom versions of the chaining words for your
 application, don't forget to remove from the 
\family typewriter
\series bold
FILES
\family default
\series default
 load block the reference to the standard ones.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard

\series bold
FILES
\series default
 Load Block, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Installing-The-Package"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
Application Examples
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Application-Examples"

\end_inset


\end_layout

\begin_layout Standard
This section offers coded solutions to two application problems.
\end_layout

\begin_layout Standard
We introduced the 
\family typewriter
\series bold
Glossary
\family default
\series default
 program, which is included with your polyFORTH system, in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Chaining-Techniques"

\end_inset

.
 The use of this utility is more thoroughly documented in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Glossary-Utility"

\end_inset

.
\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
(SHOW)
\family default
\series default
 includes this sequence:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
...
 ( display data from the main record)
\begin_inset Newline newline
\end_inset

 BEGIN +L -NEXT 0= WHILE
\begin_inset Newline newline
\end_inset

 10 SPACES PHRASE B?
\begin_inset Newline newline
\end_inset

 REPEAT ;
\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
+L
\family default
\series default
 is similar to 
\family typewriter
\series bold
CR
\family default
\series default
; see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:The-Page-Banner"

\end_inset

.
\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
(SHOW)
\family default
\series default
 displays all information about a command.
 The code fragment shown above displays the list of description lines for
 the com\SpecialChar \-
mand.
 When it begins, the main record is still current.
\end_layout

\begin_layout Standard
As we saw in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Chaining-Techniques"

\end_inset

, the main record's link field points to the first descriptive record, if
 there is one, which resides in the same file.
 When the loop begins, 
\family typewriter
\series bold
-NEXT
\family default
\series default
 determines whether the main record is linked to an auxiliary record.
 If not, the loop ends and nothing is displayed.
 If so, the 
\family typewriter
\series bold
WHILE
\family default
\series default
 portion is executed, which displays the first line of text and repeats
 the loop.
 Now 
\family typewriter
\series bold
-NEXT
\family default
\series default
 indicates whether there is another auxili\SpecialChar \-
ary record.
\end_layout

\begin_layout Standard
When the last record is reached, 
\family typewriter
\series bold
-NEXT
\family default
\series default
 indicates this and the loop ends.
\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
?LINES
\family default
\series default
 is defined as:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
: ?LINES 1 BEGIN 1+ -NEXT UNTIL ?PAGE ;
\end_layout

\begin_layout Standard
The purpose of 
\family typewriter
\series bold
?LINES
\family default
\series default
 is to determine whether the current command's description will fit entirely
 on the page, or whether it is necessary to advance the page first to keep
 all of its lines together.
 The loop counts the number of lines (the head plus an unknown number of
 auxiliary records, at one line each).
 The word 
\family typewriter
\series bold
?PAGE
\family default
\series default
, introduced in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:The-Page-Banner"

\end_inset

, takes an argument from the stack, starting a new page if that many lines
 will not fit on the current page.
\end_layout

\begin_layout Standard
Here is a definition using 
\family typewriter
\series bold
SNATCH
\family default
\series default
:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
: DELETE ( r#) ...
 BEGIN READ
\begin_inset Newline newline
\end_inset

 LINK 0 SNATCH DUP 0< UNTIL DROP ;
\end_layout

\begin_layout Standard
The part of 
\family typewriter
\series bold
DELETE
\family default
\series default
 shown here removes both the main record and all auxiliary records chained
 to it.
 The code begins on the main record.
 The phrase 
\family typewriter
\series bold
LINK
\begin_inset space \space{}
\end_inset

0
\begin_inset space \space{}
\end_inset

SNATCH
\family default
\series default
 fetches the record's link field, and then replaces it with zero.
 This has the effect of 
\begin_inset Quotes eld
\end_inset

scratching
\begin_inset Quotes erd
\end_inset

 the record, but also provides a pointer to the next record to scratch.
\end_layout

\begin_layout Standard
The phrase 
\family typewriter
\series bold
DUP
\begin_inset space \space{}
\end_inset

0<
\family default
\series default
 tests whether the pointer indicates that the record just scratched was
 the last in the chain.
 If so, the loop ends; otherwise, it reads the next record, and so on.
\end_layout

\begin_layout Standard
You may also wish to study the definitions of 
\family typewriter
\series bold
T
\family default
\series default
, 
\family typewriter
\series bold
P
\family default
\series default
, and 
\family typewriter
\series bold
U
\family default
\series default
, which use 
\family typewriter
\series bold
-LOCATE
\family default
\series default
, 
\family typewriter
\series bold
CHAIN
\family default
\series default
, and 
\family typewriter
\series bold
UNCHAIN
\family default
\series default
 in straightforward ways.
\end_layout

\begin_layout Standard
Our second coding example is another that we introduced earlier in this
 section: the customer file and associated serial numbers.
 Here we will present two versions of the application.
 The first, in the 
\family typewriter
\series bold
Customers
\family default
\series default
 example, uses the versions of 
\family typewriter
\series bold
FIRST
\family default
\series default
, 
\family typewriter
\series bold
-NEXT
\family default
\series default
, and 
\family typewriter
\series bold
-LOCATE
\family default
\series default
 that are provided with your polyFORTH system.
\end_layout

\begin_layout Standard
In the first block we've defined the record structures for the two files.
 In the second block, we have words for entering new customers and serial
 num\SpecialChar \-
bers.
 The word 
\family typewriter
\series bold
add
\family default
\series default
 makes use of chaining.
\end_layout

\begin_layout Standard
As we saw in our earlier discussion of this application, it is legitimate
 for a 
\family typewriter
\series bold
CUSTOMERS
\family default
\series default
 record to have no serial number attached to it.
 In this case, the 
\family typewriter
\series bold
CUSTOMERS
\family default
\series default
 record will contain --1 in its 
\family typewriter
\series bold
LINK
\family default
\series default
 field.
 If auxiliary records are chained, they will reside in a separate file called
 
\family typewriter
\series bold
SERIALS
\family default
\series default
.
\end_layout

\begin_layout Standard
The process of adding a new serial-number record is not as simple as it
 would be if all records were contained in the same file.
 Here, add must make a decision.
 If there is no chaining yet, it must go to the 
\family typewriter
\series bold
SERIALS
\family default
\series default
 file and use 
\family typewriter
\series bold
SLOT
\family default
\series default
 to allocate a record.
\end_layout

\begin_layout Standard
Since this is the first record in the chain, it must also store this in
 the main record's 
\family typewriter
\series bold
LINK
\family default
\series default
 field.
 But if a chain has already been started, it will go to 
\family typewriter
\series bold
SERIALS
\family default
\series default
 and use 
\family typewriter
\series bold
CHAIN
\family default
\series default
 to add a new record.
\end_layout

\begin_layout Standard
The problem is that we cannot use 
\family typewriter
\series bold
CHAIN
\family default
\series default
 unless a chain exists already.
 If all records existed in the same file, then the main record would be
 the first record in the chain; and we could simply use 
\family typewriter
\series bold
CHAIN
\family default
\series default
 in all cases.
 We would not need a conditional.
 Or, even if records existed in separate files, but a minimum of one auxiliary
 record was always present, we could use 
\family typewriter
\series bold
CHAIN
\family default
\series default
 and avoid the conditional.
\end_layout

\begin_layout Standard
The phrase 
\family typewriter
\series bold
-1
\begin_inset space \space{}
\end_inset

CHAIN
\family default
\series default
 is a cliché that means 
\begin_inset Quotes eld
\end_inset

attach a new record onto the end of the chain.
\begin_inset Quotes erd
\end_inset

 The -1 serves as a number that never gets reached, and 
\family typewriter
\series bold
CHAIN
\family default
\series default
 is defined so that if it never reaches n it adds the new record to the
 end of the chain.
\end_layout

\begin_layout Standard
An application example using the standard polyFORTH chaining operators.
\end_layout

\begin_layout Scrap
<<customers>>=
\begin_inset Newline newline
\end_inset

FILE Customers.dbf
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: /Customers ( -- ) 
\backslash
 Runtime file setup
\begin_inset Newline newline
\end_inset

    Customers.dbf  S" Customers.dbf" >FILE
\begin_inset Newline newline
\end_inset

    TRUE REVERSE !  LITTLE-ENDIAN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

70 500       0 BLOCK-DATA CUSTOMERS
\begin_inset Newline newline
\end_inset

46 500 +ORIGIN BLOCK-DATA SERIALS
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

( CUSTOMERS records:)
\begin_inset Newline newline
\end_inset

0  4 FILLER LINK  ( LINK to 1st serial#)
\begin_inset Newline newline
\end_inset

   20 BYTES COMPANY
\begin_inset Newline newline
\end_inset

   16 BYTES CONTACT
\begin_inset Newline newline
\end_inset

   30 BYTES ADDR
\begin_inset Newline newline
\end_inset

DROP
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

( SERIALS records:)
\begin_inset Newline newline
\end_inset

0  4 FILLER LINK  ( LINK to next serial#)
\begin_inset Newline newline
\end_inset

   10 BYTES SERIAL#
\begin_inset Newline newline
\end_inset

    NUMERIC PRODUCT  ( product code)
\begin_inset Newline newline
\end_inset

    NUMERIC OWNER  ( link to owner CUSTOMERS record)
\begin_inset Newline newline
\end_inset

DROP
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: edit-company   CR  ." Company name? "  COMPANY ASK
\begin_inset Newline newline
\end_inset

    CR  ." Contact? "  CONTACT ASK
\begin_inset Newline newline
\end_inset

    CR  ." Address? "  ADDR ASK ;
\begin_inset Newline newline
\end_inset

: new-company   CUSTOMERS  SLOT DUP .
 READ  edit-company ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

VARIABLE ALT  TRUE ALT ! 
\backslash
 Another approach
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

<<alt-locate>>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: (add)   CR  ." Serial# ? "   SERIAL# ASK ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: add   ALT @ IF  <<alt-add>>
\begin_inset Newline newline
\end_inset

    ELSE  SAVE  LINK L@ DUP 0< IF  ( empty chain) DROP
\begin_inset Newline newline
\end_inset

            SAVE  SERIALS SLOT  RESTORE
\begin_inset Newline newline
\end_inset

            DUP LINK L!  SERIALS READ
\begin_inset Newline newline
\end_inset

        ELSE  HEAD !  SERIALS -1 CHAIN ( add at end)
\begin_inset Newline newline
\end_inset

        THEN (add)  RESTORE
\begin_inset Newline newline
\end_inset

    THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: edit-serial ( n)   SAVE SERIALS  1- -LOCATE ABORT" Can't"
\begin_inset Newline newline
\end_inset

    CR  Serial# B?  (add)  RESTORE ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: .company   COMPANY B?  CONTACT B?  ADDR B? ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: .companies   CUSTOMERS  RECORDS ?DO
\begin_inset Newline newline
\end_inset

    CR  I .
  I READ  .company  LOOP ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: .serials   0  SERIALS  FIRST BEGIN
\begin_inset Newline newline
\end_inset

    CR 1+ DUP .
  Serial# B?  -NEXT UNTIL  DROP ;
\begin_inset Newline newline
\end_inset

: all-serials   ALT @ IF  <<alt-serials>>
\begin_inset Newline newline
\end_inset

    ELSE  LINK L@  0>  IF
\begin_inset Newline newline
\end_inset

            LINK L@  HEAD !  SAVE  .serials  RESTORE
\begin_inset Newline newline
\end_inset

    THEN  THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: show ( n)   CUSTOMERS READ  CR .company  all-serials ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
edit-serial
\family default
 
\series default
may be 
\family typewriter
\series bold
used
\family default
\series default
 to change an existing serial number.
 From its purpose we can assume that a chain exists, and therefore it doesn't
 have to check the main record's 
\family typewriter
\series bold
LINK
\family default
\series default
 to make sure it points to a valid auxiliary record.
 It simply goes to the 
\family typewriter
\series bold
SERIALS
\family default
\series default
 file and uses 
\family typewriter
\series bold
-LOCATE
\family default
\series default
 to make the desired record current (aborting if the argument is not valid
 and 
\family typewriter
\series bold
-LOCATE
\family default
\series default
 terminates before reaching it).
 Then it displays the current contents of the field and lets the user re-enter
 it.
 Finally it restores the file pointers to the main file.
\end_layout

\begin_layout Standard
In the next block, the word 
\family typewriter
\series bold
show
\family default
\series default
 displays the given company data, followed by a list of all associated serial
 numbers.
 Again, since there may be no chain at all, 
\family typewriter
\series bold
all-serials
\family default
\series default
 must make a decision.
 The test 
\family typewriter
\series bold
LINK
\begin_inset space \space{}
\end_inset

L@
\begin_inset space \space{}
\end_inset

0>
\family default
\series default
 returns `true' if the link is positive (that is, not -1 or 0), indicating
 the first record in the chain.
 In this event, 
\family typewriter
\series bold
all-serials
\family default
\series default
 saves this link in the variable 
\family typewriter
\series bold
HEAD
\family default
\series default
, selects the 
\family typewriter
\series bold
SERIALS
\family default
\series default
 file, and invokes 
\family typewriter
\series bold
.serials
\family default
\series default
 which uses 
\family typewriter
\series bold
FIRST
\family default
\series default
 and 
\family typewriter
\series bold
-NEXT
\family default
 
\series default
to loop through all records in the chain.
\end_layout

\begin_layout Standard
To give you an idea of some of the many possibilities, we've coded the same
 application using different versions of the words 
\family typewriter
\series bold
FIRST
\family default
\series default
, 
\family typewriter
\series bold
NEXT
\family default
\series default
, and 
\series bold
-LOCATE
\series default
.
 While these definitions themselves are more complicated, they reduce the
 complexity of the application words that use them.
 These versions are sensitive to the possibility that a main record may
 not have any auxiliary records attached to it.
\end_layout

\begin_layout Standard
Here are the re-definitions, followed by the new versions of the affected
 application commands:
\end_layout

\begin_layout Scrap
<<alt-locate>>=
\begin_inset Newline newline
\end_inset

: VALID ( n - t)   0 OVER < DUP  IF
\begin_inset Newline newline
\end_inset

    SWAP READ  ELSE  SWAP DROP  THEN ;
\begin_inset Newline newline
\end_inset

: ALT-FIRST ( - t)   HEAD @ VALID ;
\begin_inset Newline newline
\end_inset

: ALT-NEXT ( - t)   LINK L@ VALID ;
\begin_inset Newline newline
\end_inset

: ALT-LOCATE ( n - t)   ALT-FIRST IF BEGIN  DUP WHILE
\begin_inset Newline newline
\end_inset

        1-  ALT-NEXT 0= IF  DROP -1 EXIT  THEN
\begin_inset Newline newline
\end_inset

    REPEAT  ELSE DROP -1 THEN ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Scrap
<<alt-add>>=
\begin_inset Newline newline
\end_inset

LINK L@ HEAD !  SAVE  SERIALS
\begin_inset Newline newline
\end_inset

    ALT-FIRST IF  -1 CHAIN  ELSE ( no chain)
\begin_inset Newline newline
\end_inset

        SLOT DUP RESTORE  LINK L!  SAVE
\begin_inset Newline newline
\end_inset

        SERIALS READ  THEN
\begin_inset Newline newline
\end_inset

    (add)  RESTORE
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Scrap
<<alt-serials>>=
\begin_inset Newline newline
\end_inset

LINK L@ HEAD !  SAVE  0
\begin_inset Newline newline
\end_inset

    SERIALS  ALT-FIRST BEGIN  WHILE  CR  1+ DUP .
\begin_inset Newline newline
\end_inset

        SERIAL# B?  ALT-NEXT REPEAT  RESTORE  DROP
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
In the first block, 
\family typewriter
\series bold
ALT-FIRST
\family default
\series default
 returns a flag that is true if a chain exists at all.
 If so, the first record in the chain is made current.
 The word 
\family typewriter
\series bold
ALT-NEXT
\family default
\series default
 returns a flag that is true if another record exists in the chain.
 If so, that record is made current.
\end_layout

\begin_layout Standard
As you can see, both words make use of the same code, which we have factored
 into the definition called 
\family typewriter
\series bold
VALID
\family default
\series default
.
\end_layout

\begin_layout Standard
We have also re-coded 
\family typewriter
\series bold
ALT-LOCATE
\family default
\series default
 in this block.
 As usual, 
\family typewriter
\series bold
ALT-LOCATE
\family default
\series default
 returns a 
\begin_inset Quotes eld
\end_inset

true
\begin_inset Quotes erd
\end_inset

 flag if the requested element of the chain cannot be found.
 In this version, it also returns a 
\begin_inset Quotes eld
\end_inset

true
\begin_inset Quotes erd
\end_inset

 flag if no chain exists.
\end_layout

\begin_layout Standard
These changes simplify our application definitions.
 
\family typewriter
\series bold
add
\family default
\series default
 still has to make a decision, but it uses 
\family typewriter
\series bold
ALT-FIRST
\family default
\series default
 for the test.
\end_layout

\begin_layout Standard
Because of the way we have rewritten 
\family typewriter
\series bold
ALT-FIRST
\family default
\series default
, 
\family typewriter
\series bold
all-serials
\family default
\series default
 no longer needs an 
\family typewriter
\series bold
IF
\family default
\series default
 statement at all.
 The only conditional is 
\family typewriter
\series bold
WHILE
\family default
\series default
, which gets its argument the first time around from 
\family typewriter
\series bold
ALT-FIRST
\family default
\series default
, and henceforth from 
\family typewriter
\series bold
ALT-NEXT
\family default
\series default
.
 Thus, if a first record is absent, the 
\family typewriter
\series bold
WHILE
\family default
\series default
 phrase never gets executed.
 We eliminated the need for a subordinate word 
\family typewriter
\series bold
.serials
\family default
\series default
 completely.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Data Base Design, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Data-Base-Design"

\end_inset

 
\end_layout

\begin_layout Subsection

\series bold
Report Generator
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Report-Generator"

\end_inset


\end_layout

\begin_layout Standard
The polyFORTH Report Generator is a set of words that assist you in the
 preparation of formatted output reports.
 Once you have specified the page format and column headings, and indicated
 the layout of a single record as a row of data, the Report Generator performs
 all required output formatting and also controls paging, the heading of
 each page and related operations.
\end_layout

\begin_layout Standard
An optional feature of the Report Generator allows subtotals and grand totals
 to be accumulated in a simple manner; these totals can then be printed
 on a separate line with a minimum of effort.
\end_layout

\begin_layout Scrap
<<reports>>=
\begin_inset Newline newline
\end_inset

<<cols>>
\begin_inset Newline newline
\end_inset

<<page>>
\begin_inset Newline newline
\end_inset

<<register>>
\begin_inset Newline newline
\end_inset

<<totals>>
\begin_inset Newline newline
\end_inset

<<sum>>
\begin_inset Newline newline
\end_inset

<<foot>>
\begin_inset Newline newline
\end_inset

<<sub>>
\begin_inset Newline newline
\end_inset

<<total>>
\begin_inset Newline newline
\end_inset

<<grand>>
\begin_inset Newline newline
\end_inset

<<heading>>
\begin_inset Newline newline
\end_inset

<<title>>
\begin_inset Newline newline
\end_inset

<<title-heading>>
\begin_inset Newline newline
\end_inset

<<rlc>>
\begin_inset Newline newline
\end_inset

<<layout>>
\begin_inset Newline newline
\end_inset

<<output>>
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The following example will serve as a quick introduction to the Report Generator.
 It assumes the fields defined in the example in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Overview"

\end_inset

.
 Here is the code:
\end_layout

\begin_layout Scrap
<<all-people>>=
\begin_inset Newline newline
\end_inset

: display.person   NAME ?B  STREET ?B  CITY ?B  STATE ?B  ZIP ?B ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

[R                 People
\backslash
Name          
\backslash
Address            
\backslash
City         
\backslash
St.
\backslash
Zip ]
\begin_inset Newline newline
\end_inset

    CONSTANT PEOPLE-TITLE
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: all-people   PEOPLE-TITLE LAYOUT  +L
\begin_inset Newline newline
\end_inset

    PEOPLE RECORDS ?DO  I READ  display.person  +L  LOOP ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
This produces:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Page 1  07/30/2012
\end_layout

\begin_layout Plain Layout

                People 
\end_layout

\begin_layout Plain Layout

Name           Address             City          St.
 Zip 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Andrews, Carl  1432 Morriston Ave.
 Parkerville   PA  17214 
\end_layout

\begin_layout Plain Layout

Boehning, Greg POB 41256           Santa Cruz    CA  95061 
\end_layout

\begin_layout Plain Layout

Chapel, Doug   75 Fleetwood Dr.
    Rockville     MD  20852 
\end_layout

\begin_layout Plain Layout

Cook, Dottie   154 Sweet Rd.
       Grand Prairie TX  75050 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the example above, the word 
\family typewriter
\series bold
display.person
\family default
\series default
 is defined similarly to the version given in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Overview"

\end_inset

, except that the field reference operator 
\family typewriter
\series bold
?B
\family default
\series default
 is used instead of 
\family typewriter
\series bold
B?
\family default
\series default
.
 
\family typewriter
\series bold
?B
\family default
\series default
 is the Report Generator version of 
\family typewriter
\series bold
B?
\family default
\series default
, and takes the same stack arguments.
 The difference is that it performs 
\begin_inset Quotes eld
\end_inset

tabbing
\begin_inset Quotes erd
\end_inset

 based on a table of columns created by the word 
\family typewriter
\series bold
[R
\family default
\series default
 (third line of example).
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Controlling-Paging"

\end_inset

 lists all the output operators that use this table.
\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
[R
\family default
\series default
 specifies both a title (the word 
\begin_inset Quotes eld
\end_inset

People,
\begin_inset Quotes erd
\end_inset

 centered) and the column headings (the row of labels above each column).
 It also creates the column table mentioned above, leaving this address
 on the stack.
 Note that the line is shown wrapping to the next line here, but that it
 must be on the same line in the source code.
 See 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Formatting-Lines"

\end_inset

 for more on 
\family typewriter
\series bold
[R
\family default
\series default
.
\end_layout

\begin_layout Standard
The final word, 
\family typewriter
\series bold
all-people
\family default
\series default
 prints the tabulated report.
 It begins by invoking 
\family typewriter
\series bold
PEOPLE-TITLE
\family default
\series default
 so that the address passed from 
\family typewriter
\series bold
[R
\family default
\series default
 will become part of this definition, then calls 
\family typewriter
\series bold
LAYOUT
\family default
\series default
, which consumes this address.
\end_layout

\begin_layout Standard

\family typewriter
\series bold
+L
\family default
\series default
 (short for 
\begin_inset Quotes eld
\end_inset

plus-line
\begin_inset Quotes erd
\end_inset

) forces an extra carriage return into the report above the first row of
 data.
 Next, 
\family typewriter
\series bold
PEOPLE
\family default
\series default
 guarantees that the 
\family typewriter
\series bold
PEOPLE
\family default
\series default
 file is current whenever we display this report.
 
\family typewriter
\series bold
RECORDS
\family default
\series default
 supplies the appropriate arguments for 
\family typewriter
\series bold
DO
\family default
\series default
.
 Each time through the loop, the next record is made current with 
\family typewriter
\series bold
READ
\family default
\series default
, and the row is displayed with 
\family typewriter
\series bold
all-people
\family default
\series default
.
 Then, 
\family typewriter
\series bold
+L
\family default
\series default
 forces a new-line.
\end_layout

\begin_layout Standard
The report also contains a page banner, which includes some text at the
 upper-left hand corner of the page and the page number and date in the
 upper right.
 These are formatted automatically by 
\family typewriter
\series bold
LAYOUT
\family default
\series default
, but are user-configurable.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Controlling Paging, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Controlling-Paging"

\end_inset


\begin_inset Newline newline
\end_inset

Page Banner, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:The-Page-Banner"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
Specifying a Title/Column-Heading Pair
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Specifying-a-Title/Column-Heading-Pair"

\end_inset


\end_layout

\begin_layout Standard
A single word, 
\family typewriter
\series bold
[R
\family default
\series default
, lets you specify both the title and the column headings.
 The set-up phrase usually appears just preceding the definition of the
 report for which they are designed.
\end_layout

\begin_layout Standard
The format for a title/column heading pair is:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
[R title-text 
\backslash
column-heading-text ]
\end_layout

\begin_layout Standard
The entire title/heading pair statement must not extend over multiple lines.
\end_layout

\begin_layout Standard
All characters up to the backslash, except the first blank that follows
 
\family typewriter
\series bold
[R
\family default
\series default
, are used for the title text.
\end_layout

\begin_layout Standard
All characters that follow the first 
\family typewriter
\series bold

\backslash

\family default
\series default
, ending with the delimiter 
\family typewriter
\series bold
]
\family default
\series default
, are used for the heading.
 The first character (blank or non-blank) that follows the first 
\family typewriter
\series bold

\backslash

\family default
\series default
 corre\SpecialChar \-
sponds to the first column of the report page.
 The following backslashes determine where the actual column positions are
 located.
\end_layout

\begin_layout Standard
In addition to being saved in the dictionary, the heading text is parsed
 at the time the sourcce that contains the heading is loaded, to produce
 a table of column widths and locations of the text to be displayed.
 This table is used by the set of words that output the contents of fields
 for the Report Generator; this word set includes: 
\family typewriter
\series bold
?B
\family default
\series default
, 
\family typewriter
\series bold
?N
\family default
\series default
, and 
\family typewriter
\series bold
?1
\family default
\series default
.
 Thus, each column 
\begin_inset Quotes eld
\end_inset

knows
\begin_inset Quotes erd
\end_inset

 where it should appear on the page and how wide it should be.
\end_layout

\begin_layout Standard
When displaying 
\family typewriter
\series bold
BYTES
\family default
\series default
 fields, it is necessary to ensure that the width of the heading text for
 that field matches the width of the storage field, plus a few extra spaces
 as desired for column separation.
 Any fewer spaces, or significantly more spaces, will result in a skewed
 output.
\end_layout

\begin_layout Standard
With numeric fields, caution should be exercised that the length of the
 field to be printed does not exceed the width of the column to be used.
 Should the actual size of a string exceed the column width, it will none\SpecialChar \-
theless
 be printed in full and the remaining columns will be shifted right to accommoda
te it.
\end_layout

\begin_layout Standard
The address of the columns table is left on the stack at load time by 
\family typewriter
\series bold
[R
\family default
\series default
; this is the address that must be passed to the word 
\family typewriter
\series bold
LAYOUT
\family default
\series default
.
 
\family typewriter
\series bold
LAYOUT
\family default
\series default
 initiates the printing of a report and specifies the type of page heading
 routine to be invoked.
 It also saves the address of the title/column heading table (in user variable
 
\family typewriter
\series bold
RPT
\family default
\series default
) so that each page of the report will display the same header information.
\end_layout

\begin_layout Scrap
<<layout>>=
\begin_inset Newline newline
\end_inset

: LAYOUT ( a -- )   RPT !  0 P# !  +PAGE ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
If the title/column-heading pair is to be used in several reports, the address
 of the table for the title/heading pair may be used as the value for a
 
\family typewriter
\series bold
CONSTANT
\family default
\series default
, thus giving a name to the title/heading pair:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
[R A Report 
\begin_inset Formula $\backslash$
\end_inset

Col1
\begin_inset Formula $\backslash$
\end_inset

Col2
\begin_inset Formula $\backslash$
\end_inset

Col3]
\begin_inset Newline newline
\end_inset

 CONSTANT 'SHOW'
\begin_inset Newline newline
\end_inset

 : SHOW 'SHOW' LAYOUT ...
 ;
\end_layout

\begin_layout Standard
Otherwise, it is more efficient to just keep this address for a 
\family typewriter
\series bold
LITERAL
\family default
\series default
 to compile as a literal in the definition that uses this report:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
[R A Report 
\begin_inset Formula $\backslash$
\end_inset

Col1
\begin_inset Formula $\backslash$
\end_inset

Col2
\begin_inset Formula $\backslash$
\end_inset

Col3]
\begin_inset Newline newline
\end_inset

 : SHOW LITERAL LAYOUT ; 
\end_layout

\begin_layout Standard
This address may, of course, be 
\family typewriter
\series bold
DUP
\family default
\series default
ed if more than one reference is required, provided the 
\family typewriter
\series bold
DUP
\family default
\series default
 appears outside any definition (and thus is executed):
\end_layout

\begin_layout Standard

\family typewriter
\series bold
[R A Report 
\begin_inset Formula $\backslash$
\end_inset

Col1
\begin_inset Formula $\backslash$
\end_inset

Col2
\begin_inset Formula $\backslash$
\end_inset

Col3] DUP
\begin_inset Newline newline
\end_inset

 : SUMMARY LITERAL LAYOUT ...
 ;
\begin_inset Newline newline
\end_inset

 : SHOW LITERAL LAYOUT ; 
\end_layout

\begin_layout Standard
An additional word, 
\family typewriter
\series bold
[R+
\family default
\series default
 provides additional functionality by parsing the word that immediately
 follows it and executing this word on the first line of each page.
 Otherwise, its behavior is identical to 
\family typewriter
\series bold
[R
\family default
\series default
.
\end_layout

\begin_layout Scrap
<<title-heading>>=
\begin_inset Newline newline
\end_inset

: (R) ( -- a )   ['] TITLE ,  HERE  HERE 0 ,  HERE 0 ,
\begin_inset Newline newline
\end_inset

    [char] 
\backslash
 WORD COUNT ,string DROP  HERE SWAP !  [char] ] WORD COUNT ,string
\begin_inset Newline newline
\end_inset

    HERE DUP ALIGNED  SWAP ?DO  0 C,  LOOP
\begin_inset Newline newline
\end_inset

    HERE ROT !  COUNT  DUP ROT 0  ROT 0 DO
\begin_inset Newline newline
\end_inset

        OVER I + C@  [char] 
\backslash
 = IF
\begin_inset Newline newline
\end_inset

            I SWAP -  ,  BL OVER I + C!  I 1+
\begin_inset Newline newline
\end_inset

    THEN  LOOP  NIP - ,  -1 , ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: [R+ ( -- a ) 
\backslash
 Usage: [R+ <name> <title> 
\backslash
 <col> 
\backslash
 ...
 
\backslash
 <col> ]
\begin_inset Newline newline
\end_inset

    ' , (R) ;
\begin_inset Newline newline
\end_inset

: [R ( -- a ) 
\backslash
 Usage: [R <title> 
\backslash
 <col> 
\backslash
 ...
 
\backslash
 <col> ]
\begin_inset Newline newline
\end_inset

    0 , (R) ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard

\family typewriter
\series bold
+PAGE
\family default
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:The-Page-Banner"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
Formatting Lines
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Formatting-Lines"

\end_inset


\end_layout

\begin_layout Standard
To the report generator, a line consists of a series of columns, each of
 which has as fixed width.
 These columns are used to align the data to be printed, with all data right
 justified in the current column.
\end_layout

\begin_layout Standard
The following words are provided by the Report Generator to display fields
 within the columns determined by the title/column heading pair:
\end_layout

\begin_layout Description

\series bold
Word Stack Action
\end_layout

\begin_layout Description

\family typewriter
.N
\family default
 (
\begin_inset space \space{}
\end_inset

n) Displays the single-length integer 
\shape italic
n
\shape default
 right justified in the next column, in the format used by 
\family typewriter
\series bold
.

\family default
\series default
 (dot).
\end_layout

\begin_layout Description

\family typewriter
.L
\family default
 (
\begin_inset space \space{}
\end_inset

n) Displays the single-length integer 
\shape italic
n
\shape default
 right justified in the next column, in the format used by 
\family typewriter
\series bold
L.
\family default
\series default
.
\end_layout

\begin_layout Description

\family typewriter
.D
\family default
 (
\begin_inset space \space{}
\end_inset

d) Displays the double-length integer 
\shape italic
d
\shape default
 right justified in the next column, in the format used by 
\family typewriter
\series bold
D.
\end_layout

\begin_layout Description

\family typewriter
?N
\family default
 (
\begin_inset space \space{}
\end_inset

a) Displays the contents 
\shape italic
a
\shape default
 address as a single-length integer 
\shape italic
n
\shape default
 right justified in the next column, in the format used by 
\family typewriter
\series bold
.

\family default
\series default
 (dot).
\end_layout

\begin_layout Description

\family typewriter
?L
\family default
 (
\begin_inset space \space{}
\end_inset

a) Displays the contents 
\shape italic
a
\shape default
 address as a single-length integer 
\shape italic
n
\shape default
 right justified in the next column, in the format used by 
\family typewriter
\series bold
L.
\family default
\series default
.
\end_layout

\begin_layout Description

\family typewriter
?D
\family default
 (
\begin_inset space \space{}
\end_inset

a) Displays the contents 
\shape italic
a
\shape default
 address as a single-length integer 
\shape italic
n
\shape default
 right justified in the next column, in the format used by 
\family typewriter
\series bold
D.
\family default
\series default
.
\end_layout

\begin_layout Description

\family typewriter
?1
\family default
 (
\begin_inset space \space{}
\end_inset

a) Displays the contents of the specified 
\family typewriter
\series bold
1BYTE
\family default
\series default
 field, right justified in the next column.
\end_layout

\begin_layout Description

\family typewriter
?B
\family default
 (
\begin_inset space \space{}
\end_inset

n
\begin_inset space \space{}
\end_inset

a) Reads and displays a 
\family typewriter
\series bold
BYTES
\family default
\series default
 field, according to the declared length, left-justified in the next column.
 
\family typewriter
\series bold
PAD
\family default
\series default
 is used as intermediate storage of the field.
\end_layout

\begin_layout Description

\family typewriter
.M/D/Y
\family default
 (
\begin_inset space \space{}
\end_inset

n) Given a Julian date, displays it in the next report column.
 Since this routine invokes 
\family typewriter
\series bold
(DATE)
\family default
\series default
, it will work with either calendar.
 Most data base applications prefer to use the mm/dd/yyyy format.
\end_layout

\begin_layout Description

\family typewriter
.D/M/Y
\family default
 (
\begin_inset space \space{}
\end_inset

n) Given a Julian date, displays it in the next report column.
 Since this routine invokes 
\family typewriter
\series bold
(DATE)
\family default
\series default
, it will work with either calendar.
 Some data base applications prefer to use the dd-mmm-yyyy format.
\end_layout

\begin_layout Description

\family typewriter
.WHEN
\family default
\series bold
 
\series default
( n) Given the time in seconds, displays the hh:mm:ss in the next report
 column.
\end_layout

\begin_layout Standard
Each of these operators advances the columns table to the next column, determine
s the width of the new field, and then right-justifies the output string
 in this column.
\end_layout

\begin_layout Scrap
<<output>>=
\begin_inset Newline newline
\end_inset

: (D.) ( d -- a n )
\begin_inset Newline newline
\end_inset

    SWAP OVER DUP 0< IF DNEGATE THEN
\begin_inset Newline newline
\end_inset

    <#  #S ROT SIGN  #> ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: .N ( n -- )   DUP 0< (D.) RIGHT ;
\begin_inset Newline newline
\end_inset

: .L ( n -- )   DUP 0< (D.) RIGHT ;
\begin_inset Newline newline
\end_inset

[DEFINED] SFALIGN [IF]
\begin_inset Newline newline
\end_inset

: .FL ( F: r -- )   PAD 4 REPRESENT IF  <#
\begin_inset Newline newline
\end_inset

        >R 1- DUP ABS 0 #S 2DROP SIGN  [CHAR] e HOLD        
\backslash
 exponent
\begin_inset Newline newline
\end_inset

        3 0 DO  PAD 3 + I - C@ HOLD  LOOP  [CHAR] .
 HOLD
\begin_inset Newline newline
\end_inset

        PAD C@ HOLD  R> IF  [CHAR] - HOLD  THEN  0 0 #>
\begin_inset Newline newline
\end_inset

    ELSE  S" ?.?e?"  THEN  RIGHT ;
\begin_inset Newline newline
\end_inset

[THEN]
\begin_inset Newline newline
\end_inset

: .D ( d -- )   (D.) RIGHT ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: ?N ( a -- )   N@ .N ;
\begin_inset Newline newline
\end_inset

: ?L ( a -- )   L@ .L ;
\begin_inset Newline newline
\end_inset

[DEFINED] SFALIGN [IF]
\begin_inset Newline newline
\end_inset

: ?FL ( a -- )   FL@ .FL ;
\begin_inset Newline newline
\end_inset

[THEN]
\begin_inset Newline newline
\end_inset

: ?D ( a -- )   D@ .D ;
\begin_inset Newline newline
\end_inset

: ?1 ( a -- )   1@ .N ;
\begin_inset Newline newline
\end_inset

: ?S ( n a -- )   (S.) LEFT ;
\begin_inset Newline newline
\end_inset

: ?B ( n a -- )    2DUP B@  OVER FILE-PAD SWAP 4 MIN nC@ IF
\begin_inset Newline newline
\end_inset

        ?S  ELSE  2DROP SKIP-COL
\begin_inset Newline newline
\end_inset

    THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: .M/D/Y ( n -- )    ?DUP IF
\begin_inset Newline newline
\end_inset

        MM/DD/YYYY RIGHT  ELSE  SKIP-COL
\begin_inset Newline newline
\end_inset

    THEN ;
\begin_inset Newline newline
\end_inset

: .D-M-Y ( n -- )    ?DUP IF
\begin_inset Newline newline
\end_inset

        DD-MMM-YYYY RIGHT  ELSE  SKIP-COL
\begin_inset Newline newline
\end_inset

    THEN ;
\begin_inset Newline newline
\end_inset

: .WHEN ( n -- )    ?DUP IF
\begin_inset Newline newline
\end_inset

        BASE @ >R  0  <#
\begin_inset Newline newline
\end_inset

        DECIMAL #  6 BASE ! #  [char] : HOLD
\begin_inset Newline newline
\end_inset

        DECIMAL #  6 BASE ! #  [char] : HOLD
\begin_inset Newline newline
\end_inset

        DECIMAL # #  #>  R> BASE !
\begin_inset Newline newline
\end_inset

        RIGHT  ELSE  SKIP-COL
\begin_inset Newline newline
\end_inset

    THEN ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
You may also build your own formatting words to display columns, using the
 words 
\family typewriter
\series bold
RIGHT
\family default
\series default
, 
\family typewriter
\series bold
LEFT
\family default
\series default
 and 
\family typewriter
\series bold
CENTER
\family default
\series default
.
\end_layout

\begin_layout Description

\family typewriter
RIGHT
\family default
 (
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

n) Displays an alphanumeric string of length 
\shape italic
n
\shape default
, beginning at address 
\shape italic
a
\shape default
, right-justified in the next column.
\end_layout

\begin_layout Description

\family typewriter
LEFT
\family default
 (
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

n) Displays an alphanumeric string of length 
\shape italic
n
\shape default
, beginning at address 
\shape italic
a
\shape default
, left-justified in the next column.
\end_layout

\begin_layout Description

\family typewriter
CENTER
\family default
 (
\begin_inset space \space{}
\end_inset

a
\begin_inset space \space{}
\end_inset

n) Displays an alphanumeric string of length 
\shape italic
n
\shape default
, beginning at address 
\shape italic
a
\shape default
, centered in the next column.
\end_layout

\begin_layout Scrap
<<rlc>>=
\begin_inset Newline newline
\end_inset

: RIGHT ( a n -- )   COLS OVER -  SPACES TYPE  SPACE ;
\begin_inset Newline newline
\end_inset

: LEFT ( a n -- )   COLS OVER - >R  TYPE  R> 1+ SPACES ;
\begin_inset Newline newline
\end_inset

: CENTER ( a n -- )    COLS OVER - DUP 2/  DUP >R - SPACES
\begin_inset Newline newline
\end_inset

    TYPE  R> 1+ SPACES ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The stack arguments are identical to those of 
\family typewriter
\series bold
TYPE
\family default
\series default
.
\end_layout

\begin_layout Standard
In fact, 
\family typewriter
\series bold
.N
\family default
\series default
, 
\family typewriter
\series bold
.L
\family default
\series default
, 
\family typewriter
\series bold
.D
\family default
\series default
, 
\family typewriter
\series bold
?N
\family default
\series default
, 
\family typewriter
\series bold
?L
\family default
\series default
, 
\family typewriter
\series bold
?D
\family default
\series default
, 
\family typewriter
\series bold
?1
\family default
\series default
, and 
\family typewriter
\series bold
?B
\family default
\series default
 are defined using 
\family typewriter
\series bold
RIGHT
\family default
\series default
 and behave according to its rules:
\end_layout

\begin_layout Enumerate
If the length of the output string exceeds the width of the column, the
 results are unpredictable but will include loss of format control.
\end_layout

\begin_layout Enumerate
If the length of the output string equals the width of the column, the string
 is displayed and the column pointer is advanced.
\end_layout

\begin_layout Enumerate
If the length of the output string is less than the width of the column,
 the difference is output as blank spaces, so that the string will be right
 justified.
\end_layout

\begin_layout Enumerate
Text strings are also right justified; however the string's trailing blanks
 are included, making them appear left justified.
\end_layout

\begin_layout Standard
Here is an example:
\end_layout

\begin_layout Scrap
<<accounts>>=
\begin_inset Newline newline
\end_inset

FILE Accounts.dbf
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: /Accounts ( -- ) 
\backslash
 Runtime file setup
\begin_inset Newline newline
\end_inset

    Accounts.dbf  S" Accounts.dbf" >FILE
\begin_inset Newline newline
\end_inset

    TRUE REVERSE !  LITTLE-ENDIAN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

76 500 0 BLOCK-DATA ACCOUNTS
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

0  10 BYTES NAMES   NUMERIC ACCT#   DOUBLE BALANCE   DROP
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: (.$) ( d - a n)   SWAP OVER DABS
\begin_inset Newline newline
\end_inset

    <#  # #  46 HOLD  #S  SIGN  #> ;
\begin_inset Newline newline
\end_inset

: .ACCOUNT   ACCT# ?N  NAMES ?B
\begin_inset Newline newline
\end_inset

    BALANCE D@ (.$) RIGHT ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

[R Account Balances
\backslash
   Account#
\backslash
Name          
\backslash
Balance]
\begin_inset Newline newline
\end_inset

    CONSTANT ACCOUNTS-TITLE
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: balances   ACCOUNTS-TITLE LAYOUT
\begin_inset Newline newline
\end_inset

    ACCOUNTS RECORDS ?DO  I READ  .ACCOUNT  LOOP ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: enter-bal ( n d)   ACCOUNTS  SLOT READ  BALANCE D!
\begin_inset Newline newline
\end_inset

    ACCT# N!  NAMES PUT ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The word 
\series bold
BALANCES
\series default
 produces:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Page 1  05/12/2005     
\end_layout

\begin_layout Plain Layout

Account Balances 
\end_layout

\begin_layout Plain Layout

   Account# Name           Balance 
\end_layout

\begin_layout Plain Layout

        456 John Doe        100.00 
\end_layout

\begin_layout Plain Layout

        489 Mary Smith     2970.00 
\end_layout

\begin_layout Plain Layout

        620 Ed Poore          2.59 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Notice that the first column heading, 
\begin_inset Quotes eld
\end_inset

Account#
\begin_inset Quotes erd
\end_inset

 appears in the title/ column-heading pair three spaces after the backslash.
 This causes the heading on the output report to be indented three spaces
 (the first space after the backslash counts).
 On the corresponding formatted lines, the first field is formatted with
 
\family typewriter
\series bold
?N
\family default
\series default
, which right-justifies the string against the end of the 
\begin_inset Quotes eld
\end_inset

Account#
\begin_inset Quotes erd
\end_inset

 heading.
\end_layout

\begin_layout Standard
The middle column is formatted with 
\family typewriter
\series bold
?B
\family default
\series default
; as a text string this field is effectively left-justified.
 To make the output more pleasing, we have forced the 
\begin_inset Quotes eld
\end_inset

Name
\begin_inset Quotes erd
\end_inset

 column heading to be flush left to match.
\end_layout

\begin_layout Standard
In the third column, the data is once again right justified under the last
 character of the 
\begin_inset Quotes eld
\end_inset

Balance
\begin_inset Quotes erd
\end_inset

 column heading.
 In this case, we wished to display the double-length field in dollars-and-cents
 format, requiring the use of a pictured numeric output routine (Lines 4
 and 5 of the listing).
 On Line 6, this pictured numeric output string is displayed, but with 
\family typewriter
\series bold
RIGHT
\family default
\series default
 rather than 
\family typewriter
\series bold
TYPE
\family default
\series default
.
\end_layout

\begin_layout Standard
If the previous column displayed was the final column on a line, 
\family typewriter
\series bold
RIGHT
\family default
\series default
 automatically advances to the next line and resets the column table to
 begin with the first column on the line.
\end_layout

\begin_layout Standard
The following words are available for special formatting requirements:
\end_layout

\begin_layout Description

\series bold
Word Stack Action
\end_layout

\begin_layout Description

\family typewriter
0COL
\family default
 (
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

) Resets the column table pointer to point to the first column width.
 Exercise care with this word, since it can cause the output to be misaligned
 if it is not issued when the actual output print position is at the beginning
 of a line.
\end_layout

\begin_layout Description

\family typewriter
COLS
\family default
 (
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

n) Advances the column pointer and returns the width of the new column.
\end_layout

\begin_layout Description

\family typewriter
SKIP-COL
\family default
\series bold
 
\series default
(
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

) Skips one column.
\end_layout

\begin_layout Description

\family typewriter
SKIP-COLS
\family default
 (
\begin_inset space \space{}
\end_inset

n) Skips 
\shape italic
n
\shape default
 columns.
 
\end_layout

\begin_layout Scrap
<<cols>>=
\begin_inset Newline newline
\end_inset

#USER CELL +USER RPT  
\backslash
 holds the address of the current report title block.
\begin_inset Newline newline
\end_inset

      CELL +USER #COL 
\backslash
 holds the address of the current column width.
\begin_inset Newline newline
\end_inset

TO #USER
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: 0COL ( -- )   RPT @ @ #COL ! ;
\begin_inset Newline newline
\end_inset

<<line>>
\begin_inset Newline newline
\end_inset

: COL ( -- n )   #COL @  DUP CELL+  #COL ! ;
\begin_inset Newline newline
\end_inset

: COLS ( -- n )    COL @  DUP 0< 0= IF  EXIT
\begin_inset Newline newline
\end_inset

    THEN  DROP +L  COL @ ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: SKIP-COL ( -- )   COLS 1+ SPACES ;
\begin_inset Newline newline
\end_inset

: SKIP-COLS ( n -- )   0 DO  SKIP-COL  LOOP ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsubsection

\series bold
Controlling Paging
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Controlling-Paging"

\end_inset


\end_layout

\begin_layout Standard
The report generator does not count each output line, since this capability
 tends to be too environmentally dependent.
 Instead, it assumes that the output can be captured and paginated appropriately.
 This does not, however, stop an application from doing its own page control.
\end_layout

\begin_layout Standard
When using the Report Generator, it is not necessary to explicitly invoke
 a 
\begin_inset Quotes eld
\end_inset

new-line
\begin_inset Quotes erd
\end_inset

 function at the beginning of each row of data.
 As the field-display operators cycle through the columns table, after the
 last column has been displayed, the next operator resets the column pointer
 to the beginning of the column table again and issues a 
\begin_inset Quotes eld
\end_inset

new-line.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
The following words control pagination:
\end_layout

\begin_layout Description

\series bold
Word Stack Action
\end_layout

\begin_layout Description

\family typewriter
+PAGE
\family default
 Starts a new page, incrementing the page count in 
\family typewriter
\series bold
P#
\family default
\series default
 and displaying the headings for the new page.
\end_layout

\begin_layout Scrap
<<page>>=
\begin_inset Newline newline
\end_inset

#USER CELL +USER P# TO #USER
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

VARIABLE 'PAGE   ' PAGE 'PAGE !
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: +PAGE ( -- )
\begin_inset Newline newline
\end_inset

    'PAGE @ EXECUTE  1 P# +!  +L  ." Page "  P# ?
\begin_inset Newline newline
\end_inset

    SPACE  DATE  SPACE  'APP @ COUNT TYPE
\begin_inset Newline newline
\end_inset

    +L  RPT @  CELL - @ ?DUP IF EXECUTE THEN ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
+L
\family default
 Issues a 
\family typewriter
\series bold
CR
\family default
\series default
 and used to increment the line count in 
\family typewriter
\series bold
L#
\family default
\series default
, but that was removed in favor of shorter reports that do not have extra
 page headers.
 Also resets the column pointers using 
\family typewriter
\series bold
0COL
\family default
\series default
.
\end_layout

\begin_layout Scrap
<<line>>=
\begin_inset Newline newline
\end_inset

: +L ( -- )   -spin  CR  0COL ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard

\series bold
0COL
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Controlling-Paging"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
The Page Banner
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:The-Page-Banner"

\end_inset


\end_layout

\begin_layout Standard
At the top of each page of the report appears the 
\begin_inset Quotes eld
\end_inset

page banner
\begin_inset Quotes erd
\end_inset

 which includes:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
Page nn <date> <optional text>
\end_layout

\begin_layout Standard
where 
\family typewriter
\series bold
\shape italic
nn
\family default
\series default
\shape default
 is the current page number, and 
\family typewriter
\series bold
<date>
\family default
\series default
 is the current system date.
\end_layout

\begin_layout Standard
If you wish to modify or eliminate the optional text, simply change the
 string in the definition of 
\family typewriter
\series bold
'APP
\family default
\series default
 variable.
 The definition 
\family typewriter
\series bold
APP
\begin_inset Quotes erd
\end_inset


\begin_inset space ~
\end_inset

<optional
\begin_inset space ~
\end_inset

text>
\begin_inset Quotes erd
\end_inset


\family default
\series default
 is available to make this easier.
\end_layout

\begin_layout Standard
It is possible to eliminate the page banner entirely by replacing the word
 
\family typewriter
\series bold
LAYOUT
\family default
\series default
 with 
\family typewriter
\series bold
HEADING
\family default
\series default
.
 Like 
\family typewriter
\series bold
LAYOUT
\family default
\series default
, 
\family typewriter
\series bold
HEADING
\family default
\series default
 takes as an argument the address of a title/column heading table as provided
 by the word 
\family typewriter
\series bold
[R
\family default
\series default
, and establishes this table as current.
 It then displays the 
\begin_inset Quotes eld
\end_inset

title
\begin_inset Quotes erd
\end_inset

 line, without attempting to center it, and on the next line displays the
 column headings.
\end_layout

\begin_layout Description

\family typewriter
HEADING
\family default
 (
\begin_inset space \space{}
\end_inset

a) Saves the address of a title/heading table, and outputs the title and
 column headings.
 
\end_layout

\begin_layout Scrap
<<heading>>=
\begin_inset Newline newline
\end_inset

: HEADING ( a -- )    DUP RPT !
\begin_inset Newline newline
\end_inset

    CELL+  DUP >R  CELL+ COUNT TYPE
\begin_inset Newline newline
\end_inset

    R@ 3 CELLS - @ ?DUP IF EXECUTE THEN  +L
\begin_inset Newline newline
\end_inset

    R> @  COUNT TYPE +L ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsubsection

\series bold
How the Columns Table Works
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:How-the-Columns-Table-Works"

\end_inset


\end_layout

\begin_layout Standard
The format of the columns table is:
\end_layout

\begin_layout Description

\series bold
Byte Contents
\end_layout

\begin_layout Description
address
\begin_inset space \space{}
\end_inset

-
\begin_inset space \space{}
\end_inset

8 Address of the optional routine executed at the end of the header.
\end_layout

\begin_layout Description
-
\begin_inset space \space{}
\end_inset

4 Address of the page heading vectored routine.
\end_layout

\begin_layout Description
+
\begin_inset space \space{}
\end_inset

0 Address of column widths table.
\end_layout

\begin_layout Description
+
\begin_inset space ~
\end_inset

4 Address of column headings.
\end_layout

\begin_layout Description
+
\begin_inset space ~
\end_inset

8 Counted string of header.
\end_layout

\begin_layout Description
+
\begin_inset space ~
\end_inset

8
\begin_inset space ~
\end_inset

+
\begin_inset space ~
\end_inset

(h) Counted string of columns.
\end_layout

\begin_layout Description
+
\begin_inset space ~
\end_inset

8
\begin_inset space ~
\end_inset

+
\begin_inset space ~
\end_inset

(h)
\begin_inset space ~
\end_inset

+
\begin_inset space ~
\end_inset

(c) Column widths table.
\end_layout

\begin_layout Description
+
\begin_inset space ~
\end_inset

8
\begin_inset space ~
\end_inset

+
\begin_inset space ~
\end_inset

(h)
\begin_inset space ~
\end_inset

+
\begin_inset space ~
\end_inset

(c)
\begin_inset space ~
\end_inset

+
\begin_inset space ~
\end_inset

n -1 marks end of column table.
\end_layout

\begin_layout Standard
A -1 entry in the table indicates the end.
\end_layout

\begin_layout Standard
A heading line can contain up to 128 characters.
 These lines are used to establish a table of column widths at load time
 in the following manner.
\end_layout

\begin_layout Standard
Starting from the backslash in the title/column-heading pair, 
\family typewriter
\series bold
[R
\family default
\series default
 scans forward looking for additional backslashes in a loop.
 Each time it encounters a backslash; it replaces it with a space and computes
 the difference from the starting point or previous heading (the width of
 the field), and compiles this into the table.
 This loop repeats until the 
\family typewriter
\series bold
]
\family default
\series default
 delimiter is encountered.
 At this point, the indicator for the end of the line (a column width of
 -1) is inserted and the scan is complete.
\end_layout

\begin_layout Standard
For example, suppose the following is the set-up string for a set of column
 headings (the numbers across the top are your guide to indicate column
 positions):
\end_layout

\begin_layout Standard

\family typewriter
01234567890123456789012345678901234567890123456789
\end_layout

\begin_layout Standard

\family typewriter
\series bold

\backslash
 Account#
\backslash
Name 
\backslash
Balance]
\end_layout

\begin_layout Standard
The backslash after the 
\begin_inset Quotes eld
\end_inset

Account#
\begin_inset Quotes erd
\end_inset

 heading occurs at relative position 12; thus the number 12 is compiled
 into the table as the width of the first column.
 The backslash after the 
\begin_inset Quotes eld
\end_inset

Name
\begin_inset Quotes erd
\end_inset

 heading occurs at relative position 22; the difference, 10, is compiled
 as the width of the second column.
 The delimiting 
\series bold
]
\series default
 occurs at 30, and the difference of 8 is compiled as the width of the third
 column.
 Finally, a -1 is compiled to indicate the end of the table.
\end_layout

\begin_layout Standard
The finished column table, as constructed by 
\family typewriter
\series bold
[R
\family default
\series default
, contains:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
12 10 8 -1
\family default
 
\end_layout

\begin_layout Standard
The total width of all columns equals the position number of the last non-blank
 character.
\end_layout

\begin_layout Standard
A line may contain as many columns as required for the output format.
 Due to the method of establishing columns, the minimum width of a column
 is one character.
 
\end_layout

\begin_layout Subsubsection

\series bold
Non-standard Report Headings
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Non-standard-Report-Headings"

\end_inset


\end_layout

\begin_layout Standard
By default, the 
\begin_inset Quotes eld
\end_inset

new-page function
\begin_inset Quotes erd
\end_inset

 performs the following steps at the beginning of each page, including the
 first page:
\end_layout

\begin_layout Enumerate
Displays the page banner as described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:The-Page-Banner"

\end_inset

;
\end_layout

\begin_layout Enumerate
Performs a 
\family typewriter
\series bold
+L
\family default
\series default
;
\end_layout

\begin_layout Enumerate
Executes a word called 
\family typewriter
\series bold
TITLE
\family default
\series default
.
 
\family typewriter
\series bold
TITLE
\family default
\series default
 is defined as:
\end_layout

\begin_layout Scrap
<<title>>=
\begin_inset Newline newline
\end_inset

: TITLE ( -- )   RPT @ HEADING ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard

\family typewriter
\series bold
RPT
\family default
\series default
 is the user variable that points to the current title/column-heading table.
 
\family typewriter
\series bold
HEADING
\family default
\series default
 displays the title and column-heading lines from the given table (
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:How-the-Columns-Table-Works"

\end_inset

).
\end_layout

\begin_layout Standard
However, the Report Generator lets you vector the third function above.
 This feature lets you execute your own definition instead of, or in addition
 to, 
\family typewriter
\series bold
TITLE
\family default
\series default
.
 For instance, you might add other lines of information below the page banner.
\end_layout

\begin_layout Standard
This vectoring is possible without recompiling the 
\family typewriter
\series bold
FILES
\family default
\series default
 utility because the second cell of the title/column-heading table contains
 the address of the routine to be executed at the top of each page.
 When 
\family typewriter
\series bold
[R
\family default
\series default
 generates this table, it copies in the address of the routine 
\family typewriter
\series bold
TITLE
\family default
\series default
 by default.
 By re-setting this address to point to your own definition, you can change
 the output of the new-page function.
\end_layout

\begin_layout Standard
Here are some examples:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
( Non-standard Report Headings )
\end_layout

\begin_layout Standard

\family typewriter
\series bold
APP" Acme Manufacturing Co."
\end_layout

\begin_layout Standard

\family typewriter
\series bold
VARIABLE WHICH
\end_layout

\begin_layout Standard

\family typewriter
\series bold
[R 
\backslash
Col1 
\backslash
Col2 
\backslash
Col3] CONSTANT SHOW-TITLE1
\end_layout

\begin_layout Standard

\family typewriter
\series bold
: .ITEM WHICH ? ;
\begin_inset Newline newline
\end_inset

 : ."ITEM" ." Report on Item No.
 " .ITEM ;
\begin_inset Newline newline
\end_inset

 : 'ITEM' ."ITEM" TITLE ;
\end_layout

\begin_layout Standard

\family typewriter
\series bold
: SHOW1 ( n) WHICH !
\begin_inset Newline newline
\end_inset

 ['] 'ITEM' SHOW-TITLE1 CELL- !
\begin_inset Newline newline
\end_inset

 SHOW-TITLE1 LAYOUT ;
\end_layout

\begin_layout Standard

\family typewriter
\series bold
[R+ ."ITEM" 
\backslash
Col1 
\backslash
Col2 
\backslash
Col3] CONSTANT SHOW-TITLE2
\end_layout

\begin_layout Standard

\family typewriter
\series bold
: SHOW2 ( n) WHICH !
\begin_inset Newline newline
\end_inset

 SHOW-TITLE2 LAYOUT ;
\end_layout

\begin_layout Standard

\family typewriter
\series bold
[R+ .ITEM Report on Item No.
 
\backslash
Col1 
\backslash
Col2 
\backslash
Col3] CONSTANT SHOW-TITLE3
\end_layout

\begin_layout Standard

\family typewriter
\series bold
: SHOW3 ( n) WHICH !
\begin_inset Newline newline
\end_inset

 SHOW-TITLE3 LAYOUT ;
\end_layout

\begin_layout Standard
This example shows a report for some particular item that is selected numericall
y, like this:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
2500
\begin_inset space \space{}
\end_inset

SHOW1
\family default
\series default
 Stores 
\shape italic
2500
\shape default
 into 
\family typewriter
\series bold
WHICH
\family default
\series default
 so that you can see a report for Item 2500.
\end_layout

\begin_layout Standard
The report generator will print the item number at the top of each page,
 with headings:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Page 1 05/18/2005 Acme Manufacturing Co.
\end_layout

\begin_layout Plain Layout

Report on Item No.
 2500
\end_layout

\begin_layout Plain Layout

Col1 Col2 Col3
\end_layout

\end_inset


\end_layout

\begin_layout Standard
where the top line is the standard page banner, and the text 
\begin_inset Quotes eld
\end_inset

Report on Item No.___
\begin_inset Quotes erd
\end_inset

 is formatted by user-defined code.
\end_layout

\begin_layout Standard
Here are the steps used in the above examples to vector the user-defined
 code into the new-page routine:
\end_layout

\begin_layout Enumerate
Create a title/column heading pair as usual (cases 1 and 2, leave the 
\begin_inset Quotes eld
\end_inset

title
\begin_inset Quotes erd
\end_inset

 blank).
\end_layout

\begin_layout Enumerate
Define words, that will be executed as the third step of the new-page routine.
 It includes the message 
\begin_inset Quotes eld
\end_inset

Report on Item No.,
\begin_inset Quotes erd
\end_inset

 followed by the display of the chosen item number.
 Finally it invokes 
\family typewriter
\series bold
TITLE
\family default
\series default
, which displays the title/column-heading pair.
\end_layout

\begin_layout Enumerate
Define the report-generating word (the word 
\family typewriter
\series bold
SHOW1
\family default
\series default
) in the usual way, using the address of the title to set the vectored location
 (1 cell back).
\end_layout

\begin_layout Enumerate
Alternatively, use 
\family typewriter
\series bold
[R+
\family default
\series default
 to create titles that have custom execution (the words 
\family typewriter
\series bold
SHOW2
\family default
\series default
 and 
\family typewriter
\series bold
SHOW3
\family default
\series default
).
\end_layout

\begin_layout Standard
All of these reports have the same output, and other reports may be co-resident;
 since each has its own title/ column-heading table, each has its own new-page
 execution behavior.
 
\end_layout

\begin_layout Subsubsection

\series bold
Totals and Subtotals
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Totals-and-Subtotals"

\end_inset


\end_layout

\begin_layout Standard
The Data Base Support package includes a simple utility for computing subtotals
 and totals of numeric fields as the report is being displayed.
 In general, the following steps must be followed:
\end_layout

\begin_layout Enumerate
Allot enough 
\begin_inset Quotes eld
\end_inset

working storage
\begin_inset Quotes erd
\end_inset

 for the registers.
 Working storage is created by invoking 
\family typewriter
\series bold
n
\begin_inset space \space{}
\end_inset

ALLOT
\family default
\series default
 immediately after the word 
\family typewriter
\series bold
EMPTY
\family default
\series default
 at the beginning of the 
\family typewriter
\series bold
FILES
\family default
\series default
 load block (
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Installing-The-Package"

\end_inset

).
 The value of 
\shape italic
n
\shape default
 is calculated by this Forth phrase:
\series bold

\begin_inset Newline newline
\end_inset


\family typewriter
( # of registers needed) 3 * 2 * CELLS 2 CELLS + 16 +
\family default
\series default

\begin_inset Newline newline
\end_inset

See the source comment associated with the word 
\family typewriter
\series bold
REGISTER
\family default
\series default
 on your system.
\end_layout

\begin_layout Scrap
<<register>>=
\begin_inset Newline newline
\end_inset

: REGISTER ( -- a )   WORKING 16 + ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Enumerate
At the beginning of your report word, simultaneously define and clear as
 many accumulator-pairs as there are fields you wish to total, using the
 word 
\family typewriter
\series bold
TOTALS
\family default
\series default
 (see below).
\end_layout

\begin_layout Enumerate
As the fields are being displayed, accumulate the values in the subtotal
 registers by using either 
\family typewriter
\series bold
SUM
\family default
\series default
 or 
\family typewriter
\series bold
FOOT
\family default
\series default
.
\end_layout

\begin_layout Enumerate
When you wish to display the subtotals (if at all), use the word 
\family typewriter
\series bold
SUB
\family default
\series default
, followed by an appropriate numeric output command.
\end_layout

\begin_layout Enumerate
When you wish to display the totals, invoke 
\family typewriter
\series bold
TOTAL
\family default
\series default
.
 This copies the totals to the subtotals registers and adds them to the
 grand totals.
 Then use 
\family typewriter
\series bold
SUB
\family default
\series default
 as in Step 3.
\end_layout

\begin_layout Enumerate
When you wish to display the grand totals, invoke 
\family typewriter
\series bold
GRAND
\family default
\series default
.
 This copies the grand totals to the subtotals registers.
 Then use 
\family typewriter
\series bold
SUB
\family default
\series default
 as in Step 3.
\end_layout

\begin_layout Standard
Here are the relevant words in detail:
\end_layout

\begin_layout Description

\series bold
Word Stack Description
\end_layout

\begin_layout Description

\family typewriter
TOTALS
\family default
 (
\begin_inset space \space{}
\end_inset

n) Defines 
\shape italic
n
\shape default
 subtotal accumulators, and 
\shape italic
n
\shape default
 grand-total accumulators, and sets all to zero.
 Each accumulator is double-length.
\begin_inset Newline newline
\end_inset

For example, if you are totaling three fields, the phrase:
\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
3 TOTALS
\family default

\begin_inset Newline newline
\end_inset


\series default
creates three subtotal accumulators and three grand-total accumulators,
 and sets all to zero.
 
\series bold
TOTALS
\series default
 must be used at the beginning of a report if any of the following words
 are used.
\end_layout

\begin_layout Scrap
<<totals>>=
\begin_inset Newline newline
\end_inset

: TOTALS ( n -- )   2* CELLS REGISTER  OVER 3 * 2 CELLS + ERASE  REGISTER
 ! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
SUM
\family default
 (
\begin_inset space \space{}
\end_inset

d
\begin_inset space \space{}
\end_inset

n) Adds 
\shape italic
d
\shape default
 to the subtotal accumulator for the nth relative field.
\end_layout

\begin_layout Scrap
<<sum>>=
\begin_inset Newline newline
\end_inset

: SUM ( d n -- )   2* CELLS REGISTER + 2+! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
FOOT
\family default
 (
\begin_inset space \space{}
\end_inset

d
\begin_inset space \space{}
\end_inset

-
\begin_inset space \space{}
\end_inset

d) Advances to the next subtotal register and adds 
\shape italic
d
\shape default
 to it.
 If at the last register, wraps around to the first.
\begin_inset Newline newline
\end_inset

For instance, suppose you have a 
\family typewriter
\series bold
DOUBLE
\family default
\series default
 field called 
\family typewriter
\series bold
SALARY
\family default
\series default
 that you want to both display and add to the running total.
 The phrase:
\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
SALARY D@ FOOT .D
\family default

\begin_inset Newline newline
\end_inset


\series default
fetches the contents, adds it to the corresponding sub\SpecialChar \-
total register, then
 displays it.
\end_layout

\begin_layout Scrap
<<foot>>=
\begin_inset Newline newline
\end_inset

: REG ( -- a )   REGISTER 2@ MOD  2 CELLS + DUP
\begin_inset Newline newline
\end_inset

    REGISTER CELL+ !  REGISTER + ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: FOOT ( d -- d )   2DUP REG 2+! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
SUB
\family default
 (
\begin_inset space \space{}
\end_inset

--
\begin_inset space \space{}
\end_inset

d) Advances to the next subtotal register and fetches its contents.
 Also adds the contents into the corresponding grand-total accumulator and
 clears the subtotal register.
 If at the last register, wraps around to the first.
\end_layout

\begin_layout Scrap
<<sub>>=
\begin_inset Newline newline
\end_inset

: SUB ( -- d )   REG  DUP >R  2@  2DUP REGISTER @ R@ + 2+!  0 0 R> 2! ;
 
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
TOTAL
\family default
 ( ) Adds the totals to the grand totals and copies the totals to the subtotal
 accumulators.
 It leaves the totals in a state such that the display of the subtotals
 will set the totals to 0.
\end_layout

\begin_layout Scrap
<<total>>=
\begin_inset Newline newline
\end_inset

: TOTAL ( -- )    REGISTER DUP @ DUP 0 DO  >R
\begin_inset Newline newline
\end_inset

        2 CELLS + DUP DUP R@ + 2@  DUP 2OVER ROT ROT 2!
\begin_inset Newline newline
\end_inset

        DUP 2OVER ROT ROT R@ 2* + 2+!  DNEGATE ROT R@ + 2!  R>
\begin_inset Newline newline
\end_inset

    2 CELLS +LOOP  2DROP ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Description

\family typewriter
GRAND
\family default
 (
\begin_inset space \space{}
\end_inset


\begin_inset space \space{}
\end_inset

) Copies the grand totals to the subtotal accumulators.
\begin_inset Newline newline
\end_inset

For example, the phrase:
\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
SUB .D
\family default

\begin_inset Newline newline
\end_inset


\series default
will display the subtotal of the next field.
\begin_inset Newline newline
\end_inset

The phrase:
\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
GRAND SUB .D
\family default

\begin_inset Newline newline
\end_inset


\series default
will display the grand total of the next field.
\end_layout

\begin_layout Scrap
<<grand>>=
\begin_inset Newline newline
\end_inset

: GRAND ( -- )   REGISTER DUP @ >R  2 CELLS + DUP R@ 2* +  SWAP R> MOVE
 ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The following example shows how subtotals and grand totals can be easily
 computed and displayed:
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

Page 1  05/17/2005    
\end_layout

\begin_layout Plain Layout

Wine Inventory by Store 
\end_layout

\begin_layout Plain Layout

Location         Chablis   Rose  Champagne 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Northern California 
\end_layout

\begin_layout Plain Layout

Palo Alto            25     42         78 
\end_layout

\begin_layout Plain Layout

San Jose             16     32         50 
\end_layout

\begin_layout Plain Layout

Mill Valley          31     29         36 
\end_layout

\begin_layout Plain Layout

San Francisco        70     59         82 
\end_layout

\begin_layout Plain Layout

                    142    162        246 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Southern California 
\end_layout

\begin_layout Plain Layout

Chatsworth           35     48         29 
\end_layout

\begin_layout Plain Layout

Woodland Hills       32     40         60 
\end_layout

\begin_layout Plain Layout

                     67     88         89 
\end_layout

\begin_layout Plain Layout

Grand Total:        209    250        335   
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here is the code that produced this display:
\end_layout

\begin_layout Scrap
<<wines>>=
\begin_inset Newline newline
\end_inset

FILE Wines.dbf
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: /Wines ( -- ) 
\backslash
 Runtime file setup
\begin_inset Newline newline
\end_inset

    Wines.dbf  S" Wines.dbf" >FILE
\begin_inset Newline newline
\end_inset

    TRUE REVERSE !  LITTLE-ENDIAN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

28 500 0 BLOCK-DATA WINES
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

0  16 BYTES Location   NUMERIC Chablis   NUMERIC Rose
\begin_inset Newline newline
\end_inset

     NUMERIC Champagne   DROP
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: .amounts   Location ?B  Chablis N@ S>D FOOT .D
\begin_inset Newline newline
\end_inset

    Rose N@ S>D FOOT .D  Champagne N@ S>D FOOT .D ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: .subs   SUB .D  SUB .D  SUB .D  +L ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

[R Wine Inventory by Store
\backslash
Location        
\backslash
Chablis
\backslash
  Rose
\backslash
 Champagne]
\begin_inset Newline newline
\end_inset

    CONSTANT WINES-TITLE
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: INVENTORY   WINES-TITLE LAYOUT  3 TOTALS  +L
\begin_inset Newline newline
\end_inset

    ." Northern California"  +L
\begin_inset Newline newline
\end_inset

    WINES RECORDS DO  I READ  .amounts  I 4 = IF  +L
\begin_inset Newline newline
\end_inset

        SKIP-COL .subs +L  ." Southern California " +L
\begin_inset Newline newline
\end_inset

    THEN LOOP  +L
\begin_inset Newline newline
\end_inset

    SKIP-COL  .subs  ." Grand Total:     " COLS DROP
\begin_inset Newline newline
\end_inset

    TOTAL .subs ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: enter-wine ( Cablis Rose Champagne -- )   WINES  SLOT READ
\begin_inset Newline newline
\end_inset

    Champagne N!  Rose N!  Chablis N!  Location PUT ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The phrase 
\family typewriter
\series bold
3
\begin_inset space \space{}
\end_inset

TOTALS
\family default
\series default
 appears in the definition of 
\family typewriter
\series bold
INVENTORY
\family default
\series default
.
 This creates and clears three sets of accumulators, one set for each field
 we wish to total.
\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
FOOT
\family default
\series default
 appears in the definition of 
\family typewriter
\series bold
.amounts
\family default
\series default
:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
Chablis N@ S>D FOOT .D
\end_layout

\begin_layout Standard
In this case, the field is 
\family typewriter
\series bold
NUMERIC
\family default
\series default
 (single-length), so we fetch it with the operator 
\family typewriter
\series bold
N@.
 FOOT
\family default
\series default
, however, expects a double-length number; 
\family typewriter
\series bold
S>D
\family default
\series default
 supplies the high-order part.
 
\family typewriter
\series bold
FOOT
\family default
\series default
 will add the value to the first subtotal accumulator.
 
\family typewriter
\series bold
FOOT
\family default
\series default
 also returns a copy of the value (as a double-length number).
 Finally 
\family typewriter
\series bold
.D
\family default
\series default
 displays the value in Report Generator format.
\end_layout

\begin_layout Standard
The second invocation of 
\family typewriter
\series bold
FOOT
\family default
\series default
 in:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
Rose N@ S>D FOOT .D
\end_layout

\begin_layout Standard
will cause the value of the 
\family typewriter
\series bold
Rose
\family default
\series default
 field to be added to the second accumulator, and so on.
\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
SUB
\family default
\series default
 appears in the definition of 
\family typewriter
\series bold
.subs
\family default
\series default
.
 This definition displays the contents of the three subtotal accumulators
 in turn.
 Notice that the three uses of 
\family typewriter
\series bold
.D
\family default
\series default
 correspond to the second, third, and fourth columns in the report generator;
 thus we can only invoke 
\family typewriter
\series bold
.subs
\family default
\series default
 when we are about to display the second column (after having output or
 
\family typewriter
\series bold
SKIP
\family default
\series default
ped the first column).
\end_layout

\begin_layout Standard
In 
\family typewriter
\series bold
INVENTORY
\family default
\series default
, we display the standard header with 
\family typewriter
\series bold
LAYOUT
\family default
\series default
, below which we display the category heading 
\begin_inset Quotes eld
\end_inset

Northern California.
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Standard
Inside the loop we display the fields in the usual way, except that we check
 to see if the index is 4.
 If so, then it is time to display the subtotals for Northern California
 and the category heading for Southern California.
 Here we 
\family typewriter
\series bold
SKIP
\family default
\series default
 the first Report Generator column, then issue 
\family typewriter
\series bold
.subs
\family default
\series default
.
\end_layout

\begin_layout Standard
After the loop has been completed and the second set of records displayed,
 the phrase:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
SKIP .subs
\end_layout

\begin_layout Standard
displays the subtotals for Southern California, and issues a 
\family typewriter
\series bold
+L
\family default
\series default
.
\end_layout

\begin_layout Standard
Finally we display the text 
\begin_inset Quotes eld
\end_inset

Grand Total.
\begin_inset Quotes erd
\end_inset

 The trick here is that we also want to display the grand totals on the
 same line.
 We cannot use 
\family typewriter
\series bold
SKIP
\family default
\series default
, because it outputs the necessary number of spaces to get to the next report
 column; after printing the text, we're half the way there already.
 Our solution is to pad the message with trailing blanks so that the message
 is 17 characters long (the width of the first field plus one); this leaves
 us in position to display the second column.
\end_layout

\begin_layout Standard
However, the columns table must also be advanced to point to the second
 column.
 The phrase:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
COLS DROP
\end_layout

\begin_layout Standard
is the same as 
\family typewriter
\series bold
SKIP
\family default
\series default
 without issuing the spaces.
\end_layout

\begin_layout Standard
Finally, 
\family typewriter
\series bold
TOTAL
\family default
\series default
 copies the total accumulators to the subtotal registers, and 
\family typewriter
\series bold
.subs
\family default
\series default
 displays these.
 
\end_layout

\begin_layout Subsection

\series bold
Data Base Design 
\begin_inset CommandInset label
LatexCommand label
name "sub:Data-Base-Design"

\end_inset


\end_layout

\begin_layout Standard
Before building a house, it is best to have a blueprint.
 So too, before defin\SpecialChar \-
ing files and records, it is best to map-out the overall
 database needs.
\end_layout

\begin_layout Standard
In general, we can formulate two simple rules for planning your database:
\end_layout

\begin_layout Enumerate
Look at the kinds of information you have.
\end_layout

\begin_layout Enumerate
Arrange like kinds of information into files.
 
\end_layout

\begin_layout Subsubsection

\series bold
A Hospital Patient Management Data Base
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:A-Hospital-Patient-Management-Data-Base"

\end_inset


\end_layout

\begin_layout Standard
Our goal in this example is to create a database for tracking patients in
 a large hospital.
 For each patient there is a set of information: items such as address,
 height, weight, date-of-birth, and so on.
 (Note that we save date-of-birth and not age.
 We can always compute age if that's what we need in a report, but a date-of-bir
th is never obsolete.)
\end_layout

\begin_layout Standard
Clearly, this information all belongs in a single record, one per patient.
 However, there are also a variable number of information items that may
 be associated with each patient.
 For instance, each patient may have a different number of tests, and each
 type of test may have a different amount of information that it produces.
 In short, the amount of information that we need to keep for each patient
 is variable in length.
\end_layout

\begin_layout Standard
At this juncture, many database designers would opt for variable-length
 records and fields.
 But variable-length records are complex and slow, as we saw in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Overview"

\end_inset

.
 With nearly the same convenience we can achieve the same results by using
 a fixed header plus a variable number of subordinate records.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:14"

\end_inset


\begin_inset Graphics
	filename Patient_Results.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:15"

\end_inset


\begin_inset Graphics
	filename Test_Results.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This is where chains come in.
 Fig.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:14"

\end_inset

 shows that a field in each 
\family typewriter
\series bold
PATIENTS
\family default
\series default
 record can point to the first in a series of 
\family typewriter
\series bold
RESULTS
\family default
\series default
 records, each of which is chained to the next.
 We achieve the same effect, but at much less expense.
\end_layout

\begin_layout Standard
Now suppose that we need to record particular test results for three differ\SpecialChar \-
ent
 tests for each patient.
 We can accomplish this by providing three fields in each 
\family typewriter
\series bold
PATIENTS
\family default
\series default
 record, each pointing to a different result record or chain of records
 (Fig.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:15"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:16"

\end_inset


\begin_inset Graphics
	filename Patients.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Here's another intriguing problem.
 The application demands that a patient record can be found on the basis
 of a 
\begin_inset Quotes eld
\end_inset

patient number.
\begin_inset Quotes erd
\end_inset

 A patient number is a very large number issued in sequence; in other words,
 the patient number last issued reflects the total number of patients that
 have ever been admitted to the hospital in its history.
 This number could reach 200,000 during the lifetime of our system.
 However, the department for which we are designing this application expects
 to see only 30,000 patients during the lifetime of this system.
 Unfortunately, maintaining an ordered index even of 30,000 records, indexed
 on 
\begin_inset Quotes eld
\end_inset

patient numbers,
\begin_inset Quotes erd
\end_inset

 is unmanageable.
\end_layout

\begin_layout Standard
Is there any way we can translate a patient number directly into a record
 number for our 
\family typewriter
\series bold
PATIENTS
\family default
\series default
 file? Let's try this: we'll create a file of 200,000 records, each record
 being only two bytes long.
 This gives us one record per potential patient number.
 The two-byte field will contain a record number, pointing to the record
 in the 
\family typewriter
\series bold
PATIENTS
\family default
\series default
 file corresponding to the patient number (Fig.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:16"

\end_inset

).
\end_layout

\begin_layout Standard
This elegant scheme requires 400 blocks for the look-up file, and yet gives
 immediate access to a patient record, with only one intermediate disk access.
 No searching is needed.
 Furthermore, when new patients are added, 
\family typewriter
\series bold
SLOT
\family default
\series default
 is not needed in the look-up file.
\end_layout

\begin_layout Standard
In general, direct access is much faster than searching, and should be used
 whenever appropriate.
 
\end_layout

\begin_layout Subsubsection

\series bold
An Integrated Business System
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:An-Integrated-Business-System"

\end_inset


\end_layout

\begin_layout Standard
Our goal in this example is to create a package that will track income (sales
 and accounts receivable) and expenses (purchase orders, accounts payable,
 and payroll), and from these inputs will produce general ledgers, income
 statements and balance sheets.
\end_layout

\begin_layout Standard
Although many commercial business packages treat these functions as sep\SpecialChar \-
arate
 programs, our goal is to integrate them into a single system.
 By doing so, we will make the system simpler to use and reduce the opportunity
 for error.
 For instance, when a sales order is entered, the order should be forwarded
 to the accounts receivable component, and the sale automatic\SpecialChar \-
ally posted
 to the general ledger without further manual entry.
\end_layout

\begin_layout Standard
How shall we organize our database? Let's begin by identifying the entities
 and operations that are part of our business, and the reports that we wish
 to obtain:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="10" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<column alignment="center" valignment="top" width="0">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Entities
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Operations
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\series bold
Reports
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
customers
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
sales
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
general ledger
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
vendors
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
order entry
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
income statement
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
employees
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
accounts receivable
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
balance sheet
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
payments received
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
purchases
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
purchase orders
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
accounts payable
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
checks written
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
payroll
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
Looking first at the left column, clearly we will need to store information
 about the entities in a file structure.
 The question to ask is, 
\begin_inset Quotes eld
\end_inset

What do we need to know about these entities?
\begin_inset Quotes erd
\end_inset

 It turns out that for each of our three types of entity, the answer is
 remarkably similar.
 In each case we need to know:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
name
\begin_inset Newline newline
\end_inset

address (street, city, state, zip)
\begin_inset Newline newline
\end_inset

phone number
\end_layout

\begin_layout Standard
This observation suggestions the possibility of using shared code, an oppor\SpecialChar \-
tunit
y for program simplification.
 At the very least, this means we can use the same field definition names
 (
\family typewriter
\series bold
NAME
\family default
\series default
, 
\family typewriter
\series bold
STREET
\family default
\series default
, etc.) for three different files.
\end_layout

\begin_layout Standard
In fact, though, we never have more than several hundred people and companies
 that we do business with in any year.
 As a result, we can mix all people and companies in single file, called
 
\family typewriter
\series bold
PEOPLE
\family default
\series default
, and add an extra field called 
\family typewriter
\series bold
KIND
\family default
\series default
 to indicate whether the entity is a customer, vendor, or employee.
\end_layout

\begin_layout Standard
This reduces the number of files for 
\begin_inset Quotes eld
\end_inset

entities
\begin_inset Quotes erd
\end_inset

 from three to one, and simplifies the program accordingly.
\end_layout

\begin_layout Standard
Because we will need to search and order this file on an alphabetical basis,
 we must also create an index file, called 
\family typewriter
\series bold
(PEOPLE)
\family default
\series default
.
 This index will con\SpecialChar \-
tain simply a link field---to point to the corresponding
 record in 
\family typewriter
\series bold
PEOPLE
\family default
\series default
---and a 
\begin_inset Quotes eld
\end_inset

nickname
\begin_inset Quotes erd
\end_inset

 field, which contains the name in a form that we want it alphabetized by.
\end_layout

\begin_layout Standard
We can establish the following rules for entry of the 
\begin_inset Quotes eld
\end_inset

nickname
\begin_inset Quotes erd
\end_inset

 field:
\end_layout

\begin_layout Standard

\series bold
for human beings
\series default
: last name, first name, initial
\end_layout

\begin_layout Standard

\series bold
for companies
\series default
 (
\series bold
customers or vendors
\series default
): company name
\begin_inset Newline newline
\end_inset

 (sometimes somewhat abbreviated)
\end_layout

\begin_layout Standard
As for the additional fields that employees need, we find it simplest to
 create an additional file called 
\family typewriter
\series bold
AUXILIARY
\family default
\series default
.
 Each employee record contains a pointer to a record in 
\family typewriter
\series bold
AUXILIARY
\family default
\series default
.
\end_layout

\begin_layout Standard
Now let's turn to the operations.
 Each operation results in a transaction that must be saved.
 These transactions will become records in a file of 
\shape italic
events
\shape default
.
 What do we need to know about these events? In the case of a sale, we have:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
customer
\begin_inset Newline newline
\end_inset

date of sale
\begin_inset Newline newline
\end_inset

amount 
\begin_inset Newline newline
\end_inset

check number
\end_layout

\begin_layout Standard
In the case of a purchase order, we have:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
vendor
\begin_inset Newline newline
\end_inset

date of order
\begin_inset Newline newline
\end_inset

amount
\begin_inset Newline newline
\end_inset

purchase order number
\end_layout

\begin_layout Standard
In the case of payroll, we have:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
employee
\begin_inset Newline newline
\end_inset

date of paycheck
\begin_inset Newline newline
\end_inset

amount
\begin_inset Newline newline
\end_inset

check number
\begin_inset Newline newline
\end_inset

commissions (for commissioned salespeople)
\begin_inset Newline newline
\end_inset

tax contributions, etc.
\end_layout

\begin_layout Standard
Once again, it appears that many fields exist in common.
 With the exception of the extra information needed for payroll, we can
 summarize the above requirements as:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
WHO
\begin_inset Newline newline
\end_inset

WHEN
\begin_inset Newline newline
\end_inset

AMOUNT
\begin_inset Newline newline
\end_inset

NO.
\end_layout

\begin_layout Standard
We decide to keep all events in a single file.
 We will call this file 
\family typewriter
\series bold
DETAIL
\family default
\series default
.
 Besides the fields described above, we will add a field called 
\family typewriter
\series bold
KIND
\family default
\series default
 to indicate whether the event is a sale, an order, etc.
\end_layout

\begin_layout Standard
When we organize our data needs in this way, we see that entities and events
 can be organized together for simplicity.
 With this understanding, it will be easier to integrate the entire system.
\end_layout

\begin_layout Standard
Let's look at the 
\family typewriter
\series bold
WHO
\family default
\series default
 field.
 What should it contain? Perhaps the name of the person or company.
\end_layout

\begin_layout Standard
On the other hand, we know there will be many more 
\family typewriter
\series bold
DETAIL
\family default
\series default
 records than anything else, so we want to make each record as small as
 possible.
 Were we to keep a name field in the 
\family typewriter
\series bold
DETAIL
\family default
\series default
 file, it would take up considerable space and require that we look up the
 name in an index in order to get the address or other information on the
 name.
\end_layout

\begin_layout Standard
Instead, we will keep the record number of the related person or company
 in the 
\family typewriter
\series bold
WHO
\family default
\series default
 field.
 This occupies only two bytes, and requires no searches.
\end_layout

\begin_layout Standard
Now let's study some of the operations we'll want to perform.
 Suppose it is the end of the month and time to write checks.
 This is easy.
 We simply look through the 
\family typewriter
\series bold
DETAIL
\family default
\series default
 file looking for accounts payable entries that are due now.
 From the record in 
\family typewriter
\series bold
DETAIL
\family default
\series default
 we can follow the pointer into 
\family typewriter
\series bold
PEOPLE
\family default
\series default
 to get the name and address of the payee.
\end_layout

\begin_layout Standard
Let's take another example.
 We want to be able to determine the current balance owed by a particular
 customer or to a vendor.
 But we have not included a 
\begin_inset Quotes eld
\end_inset

Balance
\begin_inset Quotes erd
\end_inset

 field in the 
\family typewriter
\series bold
PEOPLE
\family default
\series default
 records.
 All we have to do is let each 
\family typewriter
\series bold
PEOPLE
\family default
\series default
 record point to the most recent transaction, then let each transaction
 record point to the next-most-recent transaction, etc.
 Here we are using chains.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ACME Widgets, Inc.
                 Page 1 31 OCT 1986
\end_layout

\begin_layout Plain Layout

        So.
 Bay Office Supply Account Status
\end_layout

\begin_layout Plain Layout

#    Job  Ref  Due     DR#  CR# Amount   Paid Balance
\end_layout

\begin_layout Plain Layout

3344     1086  29 NOV 5220 2100 189.24   0.00  189.24
\end_layout

\begin_layout Plain Layout

3343  47  626  29 NOV 1210 2100  10.74   0.00   10.74
\end_layout

\begin_layout Plain Layout

3205     2270  10 OCT 2100 1030 779.74 779.74    0.00
\end_layout

\begin_layout Plain Layout

2773  61  930  30 SEP 1210 2100  59.04  59.04    0.00
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Portion of a report showing a vendor account.
 The first column shows the number by which each detail item is referenced;
 it is actually the number of the record in the 
\family typewriter
\series bold
DETAIL
\family default
\series default
 file.
 The report title is a `custom' one, showing the subject account.
 Custom report titles are described in 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Totals-and-Subtotals"

\end_inset

.
\end_layout

\begin_layout Standard
Chaining is appropriate in cases such as this, in which there is no way
 to predict how many elements there will be, and it makes it easy to generate
 reports of activity for a vendor such as this.
\end_layout

\begin_layout Standard
There are at least three ways that chaining can be done:
\end_layout

\begin_layout Enumerate
Chaining from most recently entered transaction to least recent.
\end_layout

\begin_layout Enumerate
Chaining from least recent transaction to most recent.
\end_layout

\begin_layout Enumerate
Chaining by something other than order of entry, such as date field, etc.
\end_layout

\begin_layout Standard
In this case, we prefer to list transactions starting with the most recent
 events.
 This makes possible reports such as shown in Fig.
 2.16.
 As we saw in Section 2.7, the polyFORTH Data Base Support package includes
 a block of chain manipulation words that you can customize for your particular
 application.
\end_layout

\begin_layout Standard
So far we have a 
\family typewriter
\series bold
PEOPLE
\family default
\series default
 file and a 
\family typewriter
\series bold
DETAIL
\family default
\series default
 file.
 Now let us look at our desired reports.
\end_layout

\begin_layout Standard
The general ledger is produced monthly, organized by account.
 Under each account are itemized all transactions, both credits and debits
 involving that account during the month.
 In this balance sheet, we show year-to-date summaries for each account.
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ACME Widgets, Inc.
    Page 1 31 OCT 1986
\end_layout

\begin_layout Plain Layout

           Balance Sheet
\end_layout

\begin_layout Plain Layout

CURRENT ASSETS
\end_layout

\begin_layout Plain Layout

  CASH
\end_layout

\begin_layout Plain Layout

  Continental Bank        24,165
\end_layout

\begin_layout Plain Layout

  Amalgamated Bank       104,965
\end_layout

\begin_layout Plain Layout

  Short Term Investments 248,000
\end_layout

\begin_layout Plain Layout

  Petty Cash               5,000 382,130
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The traditional data base approach to General Ledger might involve running,
 once each day, some program that looks through the latest events and posts
 them to another file containing the general ledger data.
 To produce the general ledger at month's end, this approach would require
 sorting the transactions file by accounts.
\end_layout

\begin_layout Standard
But daily posting not only requires creating another file, it also involves
 an extra step for the bookkeeper.
 And sorting would take longer because it requires handling each record
 several times.
 As we've mentioned, the polyFORTH Data Base Support package offers many
 techniques that reduce the need to sort.
\end_layout

\begin_layout Standard
Still, each transaction record must indicate the account it affects.
 When we produce the general ledger and income statements, we will need
 to display accounts by name, 
\shape italic
e.g.

\shape default
 
\begin_inset Quotes eld
\end_inset

Advertising.
\begin_inset Quotes erd
\end_inset

 It doesn't make sense to place an account name in each transaction record.
 Following our dictum, 
\begin_inset Quotes eld
\end_inset

Arrange like kinds of information into files,
\begin_inset Quotes erd
\end_inset

 we create a new file called 
\family typewriter
\series bold
ACCOUNTS
\family default
\series default
, containing the name of each account.
 Now our transaction records can simply use a record number to point to
 an account record.
\end_layout

\begin_layout Standard
Actually, each transaction affects two accounts, one as a debit and one
 as a credit.
 So, each transaction really needs two pointers.
 We will call one 
\family typewriter
\series bold
DR#
\family default
\series default
 (debit record number) and the other 
\family typewriter
\series bold
CR#
\family default
\series default
 (credit record number).
 As each transaction is made, we know what accounts are involved.
 For example, when we enter an invoice, the amount will be credited as a
 sale and debited as an account receivable.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:17"

\end_inset


\begin_inset Graphics
	filename Accounts.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Chains can be used to link transactions affecting each general ledger account.
\end_layout

\begin_layout Standard
Since each transaction points to a pair of account records, when displaying
 a transaction we can also display the account names.
\end_layout

\begin_layout Standard
What about a general ledger file? Upon further analysis, we realize that
 numbers don't need to be transferred to another file, when they are in
 one file already.
 It will be easier to run a program once a month that computes the account
 balances.
\end_layout

\begin_layout Standard
To run the general ledger, we need to start with each account, and then
 look at the transactions that affected that account to produce an account
 summary.
 We could loop through the 
\family typewriter
\series bold
ACCOUNTS
\family default
\series default
 file, and for each account record, step through each transaction that affected
 the current account during the month.
 This approach could also use chains.
 Each 
\family typewriter
\series bold
ACCOUNTS
\family default
\series default
 record would point to the most recent transaction affecting it, and each
 transaction would point to the previous transaction affecting the same
 account (Fig.
 
\begin_inset CommandInset ref
LatexCommand formatted
reference "fig:17"

\end_inset

).
\end_layout

\begin_layout Standard
However, chaining is somewhat complicated, and better avoided whenever possible.
 Rather than chaining from 
\family typewriter
\series bold
ACCOUNTS
\family default
\series default
 to 
\family typewriter
\series bold
DETAIL
\family default
\series default
, we can simply loop through our 
\family typewriter
\series bold
DETAIL
\family default
\series default
 file for this month.
 Each 
\family typewriter
\series bold
DETAIL
\family default
\series default
 record points to a pair of 
\family typewriter
\series bold
ACCOUNTS
\family default
\series default
 records.
 For each transaction, we can 
\shape italic
add
\shape default
 the amount to an accumulator for a credit account, and 
\shape italic
subtract
\shape default
 the amount from an accumulator for a debit account.
 In this way, we can tally 
\shape italic
all
\shape default
 our account totals by looping through the 
\family typewriter
\series bold
DETAIL
\family default
\series default
 file only once.
\end_layout

\begin_layout Standard
But where do we keep these accumulators? Since we need one and only one
 for every account, it makes sense to add a field called 
\family typewriter
\series bold
BALANCES
\family default
\series default
 to our 
\family typewriter
\series bold
ACCOUNTS
\family default
\series default
 records.
\end_layout

\begin_layout Standard
Is this idea really better than following chains? By following chains from
 
\family typewriter
\series bold
ACCOUNTS
\family default
\series default
 to 
\family typewriter
\series bold
DETAIL
\family default
\series default
, we would have to handle each transaction record twice: once while following
 a credit-account chain, and once for a debit-account chain.
 By keeping balances, we can loop through our transactions only once.
\end_layout

\begin_layout Standard
By using a one-pass posting algorithm with no chaining, we improve performance
 a great deal by avoiding sorting, and by about a factor of two by not using
 chains.
\end_layout

\begin_layout Standard
Our 
\family typewriter
\series bold
ACCOUNTS
\family default
\series default
 file can use some embellishments.
 In addition to the two fields it already has:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
Account No.
\begin_inset Newline newline
\end_inset

Balance
\end_layout

\begin_layout Standard
we can add 
\family typewriter
\series bold
HISTORY
\family default
\series default
, which is an array of balances for the past 12 months.
\end_layout

\begin_layout Standard
In addition, the 
\family typewriter
\series bold
ACCOUNTS
\family default
\series default
 file needs an index, which we will call 
\family typewriter
\series bold
(ACCOUNTS)
\family default
\series default
.
 At first it would appear that we could use the account numbers themselves
 to sort the accounts when preparing the balancing statement.
 In fact, however, accountants prefer to sub classify accounts into groups
 for their own reasons.
 For instance, taxes are an expense account, but they are usually listed
 at the end of the list of expense accounts.
 For this reason, the 
\family typewriter
\series bold
(ACCOUNTS)
\family default
\series default
 file is numbered according to the order in which we want accounts to appear
 on the balance sheet.
\end_layout

\begin_layout Standard
Our next step is to write words that reflect the kinds of high-level actions
 the bookkeepers want to record.
 Let's start with the operation of placing an order.
 How must this order affect our database? What do we need to know?
\end_layout

\begin_layout Standard
Clearly we are going to create a new 
\family typewriter
\series bold
DETAIL
\family default
\series default
 record.
 This record will include a 
\family typewriter
\series bold
WHO
\family default
\series default
 field to indicate the company from which we are ordering.
 Since we have our vendors in the 
\family typewriter
\series bold
PEOPLE
\family default
\series default
 ordered index file, we need supply only the name of the company.
 The program can then look up the company, find the record number and place
 it in the 
\family typewriter
\series bold
WHO
\family default
\series default
 field of the new transaction record.
 The program must also link this new transaction into the chain for that
 vendor.
\end_layout

\begin_layout Standard
We also need to supply the amount of the purchase, and our purchase-order
 number.
\end_layout

\begin_layout Standard
The program itself can place the current system date into the 
\family typewriter
\series bold
WHEN
\family default
\series default
 field, and by default, place the date 30 days hence into the 
\family typewriter
\series bold
DUE
\family default
\series default
 field.
 Since this is an order, the program must place the code for a purchase
 in the 
\family typewriter
\series bold
KIND
\family default
\series default
 field.
\end_layout

\begin_layout Standard
So what should our 
\begin_inset Quotes eld
\end_inset

program
\begin_inset Quotes erd
\end_inset

 for entering an order look like to the bookkeeper? We know the bookkeeper
 must supply:
\end_layout

\begin_layout Enumerate
The amount.
\end_layout

\begin_layout Enumerate
The purchase-order number.
\end_layout

\begin_layout Enumerate
The name of the vendor.
\end_layout

\begin_layout Standard
The simplest, most Forth-like solution is to call the word 
\family typewriter
\series bold
BOUGHT
\family default
\series default
, precede it with the two numeric data items and follow it with the string
 data.
 This gives us the syntax:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
200.00 5134 BOUGHT ACME
\end_layout

\begin_layout Standard
We can now take a similar approach with a program to record a sale:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
3998.00 7409 SOLD CROFT
\end_layout

\begin_layout Standard
The word 
\family typewriter
\series bold
SOLD
\family default
\series default
 is preceded by amount and their purchase-order number, and followed by
 the name of the customer.
\end_layout

\begin_layout Standard
We can record the receipt of a check with the word 
\family typewriter
\series bold
FROM
\family default
\series default
:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
amount check# line# FROM Conway
\end_layout

\begin_layout Standard
In the above, 
\family typewriter
\series bold
line#
\family default
\series default
 is a number that identifies the sale for which this is a payment received.
 The bookkeeper finds this number on a report of outstanding balances.
 While this is simple for the bookkeeper, it is also simple for the program
 because 
\family typewriter
\series bold
line#
\family default
\series default
 just happens to be the record number of the 
\family typewriter
\series bold
DETAIL
\family default
\series default
 record showing the sale.
\end_layout

\begin_layout Standard
The same syntax can be used for writing a check:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
amount check# line# TO ROSS
\end_layout

\begin_layout Standard
Thus, each 
\begin_inset Quotes eld
\end_inset

program
\begin_inset Quotes erd
\end_inset

 is simply a Forth word.
 This approach allows our application to use the Forth interpreter.
 The problem of how the bookkeeper selects a given operation is effectively
 eliminated.
\end_layout

\begin_layout Standard
To appreciate the significance of this, consider the typical alternative.
 Most business applications are menu-based.
 From the main menu, the bookkeeper might select Accounts Payable.
 Then, from the Accounts Payable menu the bookkeeper might choose Purchase.
 From there, an entry form might appear, wherein the bookkeeper can select
 or enter the customer, and then fill in the data.
\end_layout

\begin_layout Standard
While popular, this menu-based approach can be more laborious for the user.
 To avoid the switching application modes, the bookkeeper may separate all
 the purchases from the sales, etc., and do each group one at a time.
 This requires more paper shuffling.
\end_layout

\begin_layout Standard
Our approach, with no hierarchy, lets the user enter various transactions
 in any order, leading to a more pleasant, efficient working environment.
 A 
\begin_inset Quotes eld
\end_inset

help screen
\begin_inset Quotes erd
\end_inset

 can display the syntax of the commands on request during the learning curve.
\end_layout

\begin_layout Standard
In retrospect, we seem to have designed the database very efficiently.
 The file with the most records, 
\family typewriter
\series bold
DETAIL
\family default
\series default
, also has the smallest records.
 Each record in 
\family typewriter
\series bold
DETAIL
\family default
\series default
 is only 16 bytes long, and contains no text at all.
 (This means that 64 such records will fit in a block.) 
\end_layout

\begin_layout Subsubsection

\series bold
A Facility Management System
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:A-Facility-Management-System"

\end_inset


\end_layout

\begin_layout Standard
In this example we will see how to organize and simplify a massive data
 problem by studying the data and looking for a natural hierarchy.
\end_layout

\begin_layout Standard
The example involves the problem of controlling digital and analog input/
 output with a distributed computer system, where there are several thou\SpecialChar \-
sand
 I/O points in dozens of buildings and other locations at a large industrial
 plant.
\end_layout

\begin_layout Standard
Digital 
\begin_inset Quotes eld
\end_inset

points
\begin_inset Quotes erd
\end_inset

 include switches, buttons, pressure-sensitive floor plates, pulses to unlock
 doors, and so on.
 Analog points include thermocouples, meters on control panels, heating
 levels, lighting levels, and so on.
 Our task is to install a distributed computer system to control all these
 points.
\end_layout

\begin_layout Standard
We begin by studying the points as the architects and engineers designated
 them.
 The ID for an individual point has the form:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
ABC-123-1234
\end_layout

\begin_layout Standard
Experience has taught us that numbers such as this are usually encoded,
 and that usually the coding scheme presents a goldmine of information on
 how to organize the system.
 Upon further investigation we discover these relationships:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
ABC - 123 - 1234
\end_layout

\begin_layout Standard

\family typewriter
\series bold
a facility, a control panel, a point number on a
\begin_inset Newline newline
\end_inset

 control panel in a facility.
\end_layout

\begin_layout Standard
This information provides the key for our establishing a hierarchical database,
 a necessary strategy when dealing with thousands of anything.
 Another example in which coded numbers can reveal hierarchy is with inventory
 or parts numbers.
\end_layout

\begin_layout Standard

\series bold
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\series bold
\begin_inset Caption

\begin_layout Plain Layout

\series bold
\begin_inset CommandInset label
LatexCommand label
name "fig:18"

\end_inset


\begin_inset Graphics
	filename Facilities.png

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
Diagram of the database for the Facility Management example.
\end_layout

\begin_layout Standard
One of the things we must do is allow the control of individual points from
 the central computer.
 The operator can enter a point ID and indicate some action.
 So one of our problems is to associate a point ID with a physical hardware
 location.
 One approach would be to have a points index containing the ID of each
 point in the system.
 The nature of the coding scheme makes it a candidate for an ordered index,
 but with over 20,000 records even a binary search is more cumbersome than
 we can afford.
 The logical hierarchy will help deal with the volume, and thus the performance.
 It will also improve the information content; for example, in reports we
 can make use of the implicit meaning of the data.
\end_layout

\begin_layout Standard
The first part of the code is a 
\begin_inset Quotes eld
\end_inset

facility:
\begin_inset Quotes erd
\end_inset

 A physical building or location on the plant, like the parking garage,
 the fire station, etc.
 A 
\begin_inset Quotes eld
\end_inset

panel
\begin_inset Quotes erd
\end_inset

 may be a manually attended console; a switchbox in a closet, or it may
 be imagin\SpecialChar \-
ary, as in the case of points attacked directly to the computer.
\end_layout

\begin_layout Standard
A single panel may control many points.
 And a computer may control many points in many buildings (for instance,
 the fire station computer needs fire alarms in all buildings).
 But what is the relationship between computers, facilities, panels and
 points?
\end_layout

\begin_layout Standard
Further digging uncovers fact that a panel is attached to only one computer.
 This means that each computer can be responsible for its own private database
 of panels.
 Each panel can be chained to any number of points.
 The master computer can have a file of facilities.
 Each facility can be chained to any number of panels.
\end_layout

\begin_layout Standard
We can now identify four files:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
FACILITIES
\begin_inset Newline newline
\end_inset

COMPUTERS
\begin_inset Newline newline
\end_inset

PANELS
\begin_inset Newline newline
\end_inset

POINTS
\end_layout

\begin_layout Standard
We have solved the problem of chaining from computers down to points.
 Now let's consider the reverse problem.
 Inputs generate 
\begin_inset Quotes eld
\end_inset

events.
\begin_inset Quotes erd
\end_inset

 An event has to be dealt with quickly; for instance, the event may be an
 alarm.
 If a fire alarm is triggered, a computer will need to display information
 about the point, such as which building it is in.
 In other words, we must have linkage from point to panel to building.
\end_layout

\begin_layout Standard
The first step of this linkage is the association between an electrical
 event within the computer and the corresponding point in the 
\family typewriter
\series bold
POINTS
\family default
\series default
 file.
 For instance, the pressing of a button might cause execution of an interrupt
 routine.
 This routine must be able to determine which point caused the interrupt.
\end_layout

\begin_layout Standard
At first it may seem logical to keep a table that associates hardware addresses
 with point names.
 But this would require an extra search.
 It is more direct to create a table that associates points' hardware addresses
 with record numbers within the 
\family typewriter
\series bold
POINTS
\family default
\series default
 file.
 Another benefit is that the point record number only requires two bytes,
 so the table is small.
\end_layout

\begin_layout Standard
With this scheme, an electrical event is associated with a record in 
\family typewriter
\series bold
POINTS
\family default
\series default
, which in turn contains the information we need to know about the point,
 including its code name.
 Because the code name contains meaningful information, we can now determine
 which building the point is in.
\end_layout

\begin_layout Standard
We can now rest assured that we have found a good solution to the problem,
 since we have achieved good performance while at the same time reducing
 complexity.
 This sort of win/win situation provides the positive feedback that tells
 us we're on the right track as we iterate through our design.
 
\end_layout

\begin_layout Subsubsection

\series bold
A Filing Scheme for Image Processing Applications
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:A-Filing-Scheme-for-Image-Processing-Applications"

\end_inset


\end_layout

\begin_layout Standard
Our final example illustrates the flexibility the Data Base Support package
 provides---including the freedom to 
\shape italic
not
\shape default
 use some of its features when the application dictates otherwise!
\end_layout

\begin_layout Standard
Conceptually, a filed image has two elements, a header and the pixel data.
 The header indicates what the image is, when it was recorded, who made
 the image, the dimensions of the image (in pixels), and so on.
\end_layout

\begin_layout Standard
There are a variety of ways to index into images.
 But the real problem is managing the pixel data.
 Image processing is a prime example of an application in which speed is
 critical, because there is simply so much pixel data to handle.
 An array of 512x512 points contains 262,144 pixels, which at 8 bytes per
 pixel occupies 256 blocks.
 Just reading this many blocks will take some time.
\end_layout

\begin_layout Standard
Now imagine trying to access these pixels one at a time using 
\family typewriter
\series bold
1@
\family default
\series default
 (or
\family typewriter
\series bold
 N@
\family default
\series default
).
 This approach involves the invocation of 
\family typewriter
\series bold
BLOCK
\family default
\series default
 plus the record and field accessing computations for each and every pixel.
 This will be unacceptably slow.
\end_layout

\begin_layout Standard
An approach that has proven effective is an interesting hybrid of the Data
 Base Support package tools, plus ordinary direct disk-access techniques.
 In this approach, we use the Data Base Support commands for header infor\SpecialChar \-
mation,
 but we keep the pixel data elsewhere on the disk.
 In other words, we reserve three regions on the disk: a file for headers,
 another for an index to our headers, and a region of blocks that are 
\shape italic
not
\shape default
 files for pixel data.
 Within the header, a field points to the 
\shape italic
block number
\shape default
 where the pixel data begins for that image.
 Another field indicates how many blocks are used.
\end_layout

\begin_layout Standard
We also recommend keeping the data in the form used by the image-processing
 device (usually binary integers).
 You may want to process an image using floating point (although in the
 absence of a hardware floating point processor the fixed-point routines
 supplied with polyFORTH will be much faster).
 But a 64-bit floating point number is eight bytes long, which means an
 image will require eight times as many blocks and take eight times as long
 to read and write off the disk.
 It is faster to float the numbers after fetching them.
\end_layout

\begin_layout Standard
Some users believe that saving pixel data in floating point form retains
 better resolution.
 In fact, however, the typical A/D converter on a Vidicon camera (for instance)
 does not possess many bits of resolution.
 In industrial vision applications, these devices rarely provide more than
 one byte of precision.
 The extra bits that floating point provides simply represent noise.
\end_layout

\begin_layout Standard
On the other hand, some applications do utilize greater precision, but store
 a much smaller number of pixels.
 In astronomy, for example, an image size may be only 64x64.
 But the image might be recorded with a highly sensitive detector over a
 four-hour period with atmospheric correction.
 Thus, each pixel has already been integrated and may contain as 16 bits
 or more of information.
 
\end_layout

\begin_layout Subsection

\series bold
Glossary Utility 
\begin_inset CommandInset label
LatexCommand label
name "sub:Glossary-Utility"

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
\series bold
Glossary
\family default
\series default
 is a Forth utility that allows maintenance of a file that contains descriptions
 of Forth words.
 This provides a convenient way to document polyFORTH programs.
 It is also an excellent example of the use of all data base management
 features.
\end_layout

\begin_layout Standard
Each word defined in the glossary has the following information associated
 with it:
\end_layout

\begin_layout Enumerate
The block in which the word is defined.
\end_layout

\begin_layout Enumerate
The glossary vocabulary.
\end_layout

\begin_layout Enumerate
Stack usage.
\end_layout

\begin_layout Enumerate
One or more lines of text that describe the word and its use.
\end_layout

\begin_layout Standard
The 
\family typewriter
\series bold
Glossary
\family default
\series default
 utility provides commands to maintain this file and to print reports that
 include either selected glossary vocabularies or the complete file of words.
 
\end_layout

\begin_layout Scrap
<<glossary>>=
\begin_inset Newline newline
\end_inset

: HELP ( S: -- ) ( G: This is the  GLOSSARY  help screen )
\begin_inset Newline newline
\end_inset

 CR PAGE ." HELP                 To display this  GLOSSARY  application"
\begin_inset Newline newline
\end_inset

      CR ."    This utility uses a disk file named Glossary.dbf"
\begin_inset Newline newline
\end_inset

      CR ." SUMMARY              Displays all words in the file."
\begin_inset Newline newline
\end_inset

      CR ." /VOCABULARY _____    Displays all words in vocabulary _____ ."
\begin_inset Newline newline
\end_inset

      CR ." VOCAB _____          Specifies vocabulary for entries & searches"
\begin_inset Newline newline
\end_inset

      CR ." n SOURCE 2 nC!       Specifies source block  n  for entries."
\begin_inset Newline newline
\end_inset

      CR ." NEW _____            Enters  ____  making it current."
\begin_inset Newline newline
\end_inset

      CR ."    Thereafter use  U  to enter descriptive text."
\begin_inset Newline newline
\end_inset

      CR ." FIND _____           Locates and shows _____ making it current."
\begin_inset Newline newline
\end_inset

      CR ." F                    Re-displays the current word."
\begin_inset Newline newline
\end_inset

      CR ." n AT                 Changes the current word's source to  n
 ."
\begin_inset Newline newline
\end_inset

      CR ." STACKS               Enter 'input' and 'output' stack arguments."
\begin_inset Newline newline
\end_inset

      CR ." l T  ( or  t)        Types line  l (0-n)  making it current."
\begin_inset Newline newline
\end_inset

      CR ." P  ( or  p ) _____   Puts  _____  on the current line."
\begin_inset Newline newline
\end_inset

      CR ." U  ( or  u ) _____   Inserts  _____  under the current line."
\begin_inset Newline newline
\end_inset

      CR ." The date used for today's entries will be "  DATE ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

<<glossary-file>>
\begin_inset Newline newline
\end_inset

<<vocab>>
\begin_inset Newline newline
\end_inset

<<f>>
\begin_inset Newline newline
\end_inset

<<stacks>>
\begin_inset Newline newline
\end_inset

<<new>>
\begin_inset Newline newline
\end_inset

<<delete>>
\begin_inset Newline newline
\end_inset

<<at>>
\begin_inset Newline newline
\end_inset

<<t>>
\begin_inset Newline newline
\end_inset

<<p>>
\begin_inset Newline newline
\end_inset

<<u>>
\begin_inset Newline newline
\end_inset

<<x>>
\begin_inset Newline newline
\end_inset

<<find>>
\begin_inset Newline newline
\end_inset

<<moved>>
\begin_inset Newline newline
\end_inset

<<summary>>
\begin_inset Newline newline
\end_inset

<<vocabulary>>
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsubsection

\series bold
File Structure
\series default
 
\end_layout

\begin_layout Standard
The 
\family typewriter
\series bold
Glossary
\family default
\series default
 uses one or more glossary files that are specified by the user.
 Each glossary file is physically composed of two separate files; a data
 file and an index file.
 Index file support in the polyFORTH system is required to implement the
 glossary.
\end_layout

\begin_layout Standard
You must pre-allocate the two polyFORTH files required for a glossary.
 The data file is composed of 64-byte records, several of which may be chained
 together to provide multiple lines of text, 64 characters per line.
 It is named 
\family typewriter
\series bold
GLOSSARY
\family default
\series default
.
\end_layout

\begin_layout Standard
The index file used for the glossary is compiled of 28-byte records, with
 a 24-byte key length comprised of the word name
\begin_inset space \space{}
\end_inset

(12 bytes) and a vocabulary name (12 bytes).
 One index record is required for each glossary entry.
 The name of the index file is 
\family typewriter
\series bold
(GLOSSARY)
\family default
\series default
.
 It is an ordered index, ordered by word name and vocabulary; this has the
 effect of maintaining the glossary in alphabetic order.
\end_layout

\begin_layout Standard
Here is a sample definition for a glossary file that contains 450 entries.
\end_layout

\begin_layout Scrap
<<glossary-file>>=
\begin_inset Newline newline
\end_inset

FILE Glossary.dbf
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: /Glossary ( -- ) 
\backslash
 Runtime file setup
\begin_inset Newline newline
\end_inset

    Glossary.dbf  S" Glossary.dbf" >FILE
\begin_inset Newline newline
\end_inset

    TRUE REVERSE !  LITTLE-ENDIAN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

( Bytes  records  origin              name )
\begin_inset Newline newline
\end_inset

   28      432    0       BLOCK-DATA (GLOSSARY)
\begin_inset Newline newline
\end_inset

   64     2300   +ORIGIN  BLOCK-DATA  GLOSSARY
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

4 ( LINK )  24 BYTES NAME+VOC  DROP   ( Index )
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

4 ( LINK )  12 BYTES WORD-NAME
\begin_inset Newline newline
\end_inset

            12 BYTES VOC
\begin_inset Newline newline
\end_inset

            16 BYTES BEFORE
\begin_inset Newline newline
\end_inset

            16 BYTES AFTER
\begin_inset Newline newline
\end_inset

             NUMERIC SOURCE
\begin_inset Newline newline
\end_inset

             NUMERIC ENTERED  DROP
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

4 ( LINK )  60 BYTES PHRASE  DROP
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Subsubsection

\series bold
Loading Instructions
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Loading-Instructions"

\end_inset


\end_layout

\begin_layout Standard
As with the other examples, the 
\family typewriter
\series bold
Glossary
\family default
\series default
 is loaded automatically with the pFDatabase.fth
\end_layout

\begin_layout Standard
The procedure for entering a word into a 
\family typewriter
\series bold
Glossary
\family default
\series default
 consists of making the block number and glossary vocabulary current, entering
 the stack usage and the word-name, and then entering associated text.
 You can change block number, stack usage, and text lines easily.
 The following sections are interdependent; reading through them at one
 sitting will pro\SpecialChar \-
vide a helpful overview.
 
\end_layout

\begin_layout Subsubsection

\series bold
Source Block Identification
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Source-Block-Identification"

\end_inset


\end_layout

\begin_layout Standard
When you begin to document your application, you will usually specify a
 source block to be documented and then enter all the words that are defined
 in that block.
\end_layout

\begin_layout Standard
To specify a source block, use the following phrase:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
blk# SOURCE 2 nC!
\end_layout

\begin_layout Standard
Until changed by re-use of the phrase above, this current block number will
 automatically be stored with each succeeding word entry.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Entry Changes, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Changes"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
Glossary Vocabulary Identification
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Glossary-Vocabulary-Identification"

\end_inset


\end_layout

\begin_layout Standard
Along with each word, the system stores the name of the entry's applica\SpecialChar \-
tion
 vocabulary.
 This usually means the name of the portion of the appli\SpecialChar \-
cation in which
 the word is used, such as the name of its load block.
 These vocabularies are not necessarily the same as program vocabularies.
 Gloss\SpecialChar \-
ary vocabularies exist only for logical grouping of words and to enable
 the same word to be variously defined several times in different blocks.
\end_layout

\begin_layout Standard
Before you begin entering words for a new glossary vocabulary, make it the
 current vocabulary by typing:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
VOCAB vocabulary-name
\end_layout

\begin_layout Scrap
<<vocab>>=
\begin_inset Newline newline
\end_inset

: VOCAB ( -- )   BL TEXT  VOC S! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Note that the name cannot be longer than ten characters.
 Until changed, this name is kept in memory and copied into each succeeding
 data record entered.
\end_layout

\begin_layout Standard
In order to search for a previously entered word, you must make its vocabulary
 the current one.
\end_layout

\begin_layout Standard
The glossary vocabulary name serves as a secondary key for searches.
 This means that the same word may be entered in numerous vocabularies,
 with each entry unique.
\end_layout

\begin_layout Standard
The vocabulary is also set by the report command 
\family typewriter
\series bold
/VOCABULARY
\family default
\series default
.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard

\family typewriter
\series bold
/VOCABULARY
\family default
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Definition-Display"

\end_inset


\begin_inset Newline newline
\end_inset

Finding Previously Entered Words, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Changes"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
Glossary Entries
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Glossary-Entries"

\end_inset


\end_layout

\begin_layout Standard
Words are entered into the glossary through the 
\family typewriter
\series bold
NEW
\family default
\series default
 command.
 This command sets the basic entry into the file.
 It has the following format:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
NEW word-name (
\shape italic
e.g.
\shape default
, NEW
\begin_inset space \space{}
\end_inset

NAME)
\end_layout

\begin_layout Standard
The program will prompt you for brief (16-character) descriptions of stack
 entries before and after execution.
 Any valid Forth word name may be used; the maximum length recognized by
 the 
\family typewriter
\series bold
Glossary
\family default
\series default
 is twelve characters.
 If a longer word name is entered, its length will be truncated to twelve
 characters.
\end_layout

\begin_layout Scrap
<<new>>=
\begin_inset Newline newline
\end_inset

: (FIND) ( -- n a ) 
\backslash
 Usage: (FIND) <name>
\begin_inset Newline newline
\end_inset

    BL TEXT WORD-NAME S!  (GLOSSARY) NAME+VOC ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: (ENTER) ( -- ) 
\backslash
 Usage: (ENTER) <name>
\begin_inset Newline newline
\end_inset

    (FIND) -BINARY IF
\begin_inset Newline newline
\end_inset

        SAVE  GLOSSARY SLOT  DUP HEAD !  LINK !  RESTORE
\begin_inset Newline newline
\end_inset

        NAME+VOC S@  +ORDERED  NAME+VOC S!
\begin_inset Newline newline
\end_inset

        GLOSSARY FIRST  NAME+VOC B!
\begin_inset Newline newline
\end_inset

        SOURCE 2 nC@  SOURCE N!
\begin_inset Newline newline
\end_inset

    ELSE  ORDERED RELEASE  LINK L@  GLOSSARY READ
\begin_inset Newline newline
\end_inset

    THEN  @DATE ENTERED N! ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: NEW ( -- ) 
\backslash
 Usage: NEW <name>
\begin_inset Newline newline
\end_inset

    (ENTER)  STACKS  CR  64 SPACES  0 #L ! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Following 
\family typewriter
\series bold
NEW
\family default
\series default
, the new word is made the current word, with which will be stored the current
 block number, current glossary vocabulary name, and up to four lines of
 associated text.
 Immediate subsequent use of 
\family typewriter
\series bold
AT
\family default
\series default
, 
\family typewriter
\series bold
STACKS
\family default
\series default
, 
\family typewriter
\series bold
T
\family default
\series default
, 
\family typewriter
\series bold
U
\family default
\series default
, or 
\family typewriter
\series bold
P
\family default
\series default
 will affect this entry.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Entry Changes, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Changes"

\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
T
\family default
\series default
 and 
\family typewriter
\series bold
P
\family default
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Text-Specification"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
Text Specification
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Text-Specification"

\end_inset


\end_layout

\begin_layout Standard
The 
\family typewriter
\series bold
Glossary
\family default
\series default
 provides commands that allow up to four lines of text to be associated
 with each entry and also allow modification of previously entered text.
\end_layout

\begin_layout Standard
The following command is used to enter a line of text that is associated
 with a definition:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
U new text line
\end_layout

\begin_layout Standard
The command U inserts 
\begin_inset Quotes eld
\end_inset

new text line
\begin_inset Quotes erd
\end_inset

 under the current text line (which begins at 0 after a new entry).
 The new text line may be composed of one to 64 characters, including embedded
 blanks.
\end_layout

\begin_layout Scrap
<<u>>=
\begin_inset Newline newline
\end_inset

: U ( -- ) 
\backslash
 Usage: U text
\begin_inset Newline newline
\end_inset

    #L @  CHAIN P  1 #L +! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
Following the use of 
\family typewriter
\series bold
NEW
\family default
\series default
 or 
\family typewriter
\series bold
FIND
\family default
\series default
, the current text line is initialized to zero.
 Use of 
\family typewriter
\series bold
U
\family default
\series default
 not only inserts a new text line, it also increments the current line number.
 Thus subsequent usage of 
\family typewriter
\series bold
U
\family default
\series default
 adds additional text lines.
\end_layout

\begin_layout Standard
The command 
\family typewriter
\series bold
P
\family default
\series default
 is used to modify existing text.
 You do this by displaying the line to be changed and then using 
\family typewriter
\series bold
P
\family default
\series default
 to replace the old text with new text.
 Remember that you can only work on the current word in the current vocabulary.
 You display the appropriate line of text (lines are numbered starting from
 zero) by typing:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
line# T (
\shape italic
e.g.
\shape default
, 3
\begin_inset space \space{}
\end_inset

T to display the fourth line)
\end_layout

\begin_layout Scrap
<<t>>=
\begin_inset Newline newline
\end_inset

: T ( n -- )    1+ DUP -LOCATE ABORT" Not there"  #L !  CR
\begin_inset Newline newline
\end_inset

    2 SPACES  PHRASE B? ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
After a line of text has been displayed, you can modify it by using the
 following command:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
P replacement-text-line
\end_layout

\begin_layout Scrap
<<p>>=
\begin_inset Newline newline
\end_inset

: P ( -- ) 
\backslash
 Usage: P text
\begin_inset Newline newline
\end_inset

    1 TEXT  PHRASE B! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The command 
\family typewriter
\series bold
X
\family default
\series default
 is used to delete a text line previously selected by the 
\family typewriter
\series bold
T
\family default
\series default
 command.
 Thus, to delete Line 2 you would type:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
2 T
\begin_inset Newline newline
\end_inset

 X
\end_layout

\begin_layout Scrap
<<x>>=
\begin_inset Newline newline
\end_inset

: X ( -- )   #L @ 1- UNCHAIN ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
You cannot delete the last remaining descriptive line, but you can change
 it.
 All others may be deleted.
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard

\family typewriter
\series bold
NEW
\family default
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Glossary-Entries"

\end_inset


\begin_inset Newline newline
\end_inset


\family typewriter
\series bold
FIND
\family default
\series default
, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Changes"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
Definition Display
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Definition-Display"

\end_inset


\end_layout

\begin_layout Standard
To display the current entry, type:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
F
\end_layout

\begin_layout Scrap
<<f>>=
\begin_inset Newline newline
\end_inset

: (SHOW) ( -- )    FIRST  WORD-NAME ?B  VOC ?B  BEFORE ?B  AFTER ?B
\begin_inset Newline newline
\end_inset

    SOURCE ?N  ENTERED NU@  .M/D/Y  BEGIN
\begin_inset Newline newline
\end_inset

        +L  -NEXT 0= WHILE
\begin_inset Newline newline
\end_inset

            10 SPACES  PHRASE B?
\begin_inset Newline newline
\end_inset

    REPEAT ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

[R FORTH GLOSSARY
\backslash
 NAME        
\backslash
VOCABULARY  
\backslash
INPUT           
\backslash
OUTPUT          
\backslash
BLK
\backslash
      ENTERED]
\begin_inset Newline newline
\end_inset

    CONSTANT GLOSSARY-TITLE
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

VARIABLE #L
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: F ( -- )    GLOSSARY-TITLE HEADING  FIRST (SHOW)  1 #L ! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
To print all definitions in all the vocabularies in the glossary, in ASCII
 alphabetical sequence, use the word 
\family typewriter
\series bold
SUMMARY
\family default
\series default
.
 The same information as for 
\family typewriter
\series bold
FIND
\family default
\series default
 is printed for each word entered in the glossary.
 The printed report is paged and numbered.
\end_layout

\begin_layout Scrap
<<summary>>=
\begin_inset Newline newline
\end_inset

: SUMMARY ( -- )    GLOSSARY-TITLE LAYOUT
\begin_inset Newline newline
\end_inset

    (GLOSSARY) RECORDS DO
\begin_inset Newline newline
\end_inset

        I GLOSS IF
\begin_inset Newline newline
\end_inset

            +L (SHOW)
\begin_inset Newline newline
\end_inset

    THEN  LOOP  SPACE ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The command:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
/VOCABULARY
\end_layout

\begin_layout Standard
will print definitions as for 
\family typewriter
\series bold
SUMMARY
\family default
\series default
 but only in the glossary vocabulary whose name is specified.
\end_layout

\begin_layout Scrap
<<vocabulary>>=
\begin_inset Newline newline
\end_inset

: /VOCABULARY ( -- ) 
\backslash
 Usage: 
\backslash
VOCABULARY <name>
\begin_inset Newline newline
\end_inset

    VOCAB  GLOSSARY-TITLE LAYOUT  (GLOSSARY) RECORDS DO
\begin_inset Newline newline
\end_inset

        I GLOSS IF
\begin_inset Newline newline
\end_inset

            VOC  SWAP OVER ADDRESS -TEXT 0= IF
\begin_inset Newline newline
\end_inset

                +L (SHOW)
\begin_inset Newline newline
\end_inset

    THEN  THEN  LOOP  SPACE ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Glossary Vocabularies, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Glossary-Vocabulary-Identification"

\end_inset

 
\begin_inset Newline newline
\end_inset

Making an Entry Current, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Changes"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
Changes
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Changes"

\end_inset


\end_layout

\begin_layout Standard
Changes always affect the current word.
 Words are made current in two ways.
\end_layout

\begin_layout Enumerate
A word just entered is the current word.
\end_layout

\begin_layout Enumerate
A previously entered word in the current vocabulary may be made current
 by using the command:
\series bold

\begin_inset Newline newline
\end_inset


\family typewriter
FIND word-name
\family default

\begin_inset Newline newline
\end_inset


\series default
This displays the requested word, with its vocabulary name, block number,
 stack usage, and text description.
\end_layout

\begin_layout Standard
Following the use of 
\family typewriter
\series bold
NEW
\family default
\series default
 or 
\family typewriter
\series bold
FIND
\family default
\series default
, the current line number is initialized to zero.
\end_layout

\begin_layout Scrap
<<find>>=
\begin_inset Newline newline
\end_inset

: FIND ( -- ) 
\backslash
 Usage: FIND <name>
\begin_inset Newline newline
\end_inset

    (FIND) BINARY HEAD !  GLOSSARY F ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The current word's stack entries may be changed by typing:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
STACKS
\end_layout

\begin_layout Scrap
<<stacks>>=
\begin_inset Newline newline
\end_inset

: STACKS ( -- )   FIRST
\begin_inset Newline newline
\end_inset

    CR  ." Before: "  BEFORE ASK
\begin_inset Newline newline
\end_inset

    CR ." After: "  AFTER ASK  F ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The current word's source-block# may be changed by typing:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
new-blk# AT
\end_layout

\begin_layout Scrap
<<at>>=
\begin_inset Newline newline
\end_inset

: AT ( n -- )   FIRST  SOURCE N! ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
All of the words defined on a source block# can be moved by typing:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
old-blk# new-mlk# MOVED
\end_layout

\begin_layout Scrap
<<moved>>=
\begin_inset Newline newline
\end_inset

: GLOSS ( n -- t )    (GLOSSARY) READ  LINK L@ DUP 0> IF
\begin_inset Newline newline
\end_inset

        HEAD !  GLOSSARY FIRST TRUE
\begin_inset Newline newline
\end_inset

    ELSE  DROP 0  THEN ;
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: MOVED ( s d -- )    SWAP  (GLOSSARY) RECORDS DO
\begin_inset Newline newline
\end_inset

        I GLOSS DROP  SOURCE N@ OVER = IF
\begin_inset Newline newline
\end_inset

            OVER SOURCE N!
\begin_inset Newline newline
\end_inset

    THEN  LOOP  2DROP ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
You may not change vocabulary and word names except by deleting and re-entering
 the entry, since these two items form the index keys.
\end_layout

\begin_layout Standard
To redisplay the complete entry for the current word, type:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
F
\end_layout

\begin_layout Standard

\series bold
REFERENCES
\end_layout

\begin_layout Standard
Changing Description Lines, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Text-Specification"

\end_inset


\begin_inset Newline newline
\end_inset

Making a Vocabulary Current, 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Glossary-Vocabulary-Identification"

\end_inset

 
\end_layout

\begin_layout Subsubsection

\series bold
Text and Definition Deletion
\series default
 
\begin_inset CommandInset label
LatexCommand label
name "sub:Text-and-Definition-Deletion"

\end_inset


\end_layout

\begin_layout Standard
The following command is used to remove all text lines associated with the
 current definition and then to delete the current definition from the glossary:
\end_layout

\begin_layout Standard

\family typewriter
\series bold
DELETE word-name
\end_layout

\begin_layout Scrap
<<delete>>=
\begin_inset Newline newline
\end_inset

: DELETE ( -- )    (FIND)  BINARY
\begin_inset Newline newline
\end_inset

    ORDERED GRAB  -ORDERED
\begin_inset Newline newline
\end_inset

    GLOSSARY  BEGIN
\begin_inset Newline newline
\end_inset

        READ  LINK 0 SNATCH  DUP 0<
\begin_inset Newline newline
\end_inset

    UNTIL  DROP ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Section
Testing
\end_layout

\begin_layout Standard
Part of the motivation for converting this tool into a Literate Programming
 document was the discovery that there was some problem using it under a
 64-bit Forth.
 That led to the discovery of problems with the existing samples even in
 32-bit Forths.
 I have loaded all of the sames in the 
\family typewriter
\series bold
pFDatabase.fth
\family default
\series default
 source file (see 
\begin_inset CommandInset ref
LatexCommand formatted
reference "sub:Installing-The-Package"

\end_inset

), so it is a simple matter to run their display routines.
 I am only using 
\family typewriter
\series bold
gforth
\family default
\series default
 right now, and it has a built-in 
\family typewriter
\series bold
assert( ...
 )
\family default
\series default
 function.
 So I will use that right now, until I need to worry about doing something
 that is more portable.
\end_layout

\begin_layout Scrap
<<test>>=
\begin_inset Newline newline
\end_inset

<<fits>>
\begin_inset Newline newline
\end_inset

<<text=>>
\begin_inset Newline newline
\end_inset

<<-linked>>
\begin_inset Newline newline
\end_inset

<<double-stacked>>
\begin_inset Newline newline
\end_inset


\begin_inset Newline newline
\end_inset

: test ( -- )
\begin_inset Newline newline
\end_inset

    /People assert( PEOPLE PHONE fits ) display-everyone
\begin_inset Newline newline
\end_inset

    /Personnel assert( PERSONNEL RECORDS - 4 = ) all
\begin_inset Newline newline
\end_inset

        2 READ assert( S" Greg" NICKNAME text= )
\begin_inset Newline newline
\end_inset

    /Customers FALSE ALT ! assert( SERIALS 2 -linked ) 1 show 2 show
\begin_inset Newline newline
\end_inset

        TRUE ALT ! assert( SERIALS 3 -linked ) 1 show 2 show
\begin_inset Newline newline
\end_inset

    /Accounts assert( ACCOUNTS BALANCE 1 double-stacked ) balances
\begin_inset Newline newline
\end_inset

    /Wines INVENTORY
\begin_inset Newline newline
\end_inset

    /Glossary SUMMARY
\begin_inset Newline newline
\end_inset

;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The 1st problem I discovered was that the 
\family typewriter
\series bold
people-fields
\family default
\series default
 used 2 more bytes than the 
\family typewriter
\series bold
PEOPLE
\family default
\series default
 database was defined to use.
 While this is a common proplem with database definitions, it is not easily
 solved in a generic manner.
 Therefore, a specific test will have to suffice:
\end_layout

\begin_layout Scrap
<<fits>>=
\begin_inset Newline newline
\end_inset

: fits ( n a -- flag )   WORKING - + B/R @ > 0= ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The problem with the 
\family typewriter
\series bold
PERSONNEL
\family default
\series default
 data was that it had been created with 
\family typewriter
\series bold
FALSE REVERSE !
\family default
\series default
 and  
\family typewriter
\series bold
BIG-ENDIAN
\family default
\series default
, which isn't how it was described in this document.
 The latter is easy to test against a know file size.
 The former requires a way to test text fields:
\end_layout

\begin_layout Scrap
<<text=>>=
\begin_inset Newline newline
\end_inset

: text= ( a1 n1 n2 a2 -- flag )   2DUP B@ (S.) COMPARE 0= ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The 
\family typewriter
\series bold
CUSTOMERS
\family default
\series default
 example provided the 1st case of a 64-bit problem.
 This ended up being a problem that 
\family typewriter
\series bold
L@
\family default
\series default
 returned unsigned 32-bit values and we need an 
\family typewriter
\series bold
LU@
\family default
\series default
 to do that and sign extend the value in 
\family typewriter
\series bold
L@
\family default
\series default
, just as we had to do in 
\family typewriter
\series bold
N@
\family default
\series default
 when porting this code from 16-bit to 32-bit.
 A simple test for a negative link is needed here:
\end_layout

\begin_layout Scrap
<<-linked>>=
\begin_inset Newline newline
\end_inset

: -linked ( n -- flag )   READ LINK L@ 0< ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The 
\family typewriter
\series bold
ACCOUNTS
\family default
\series default
 example has a similar problem with 
\family typewriter
\series bold
D@
\family default
\series default
, but it is not so easily solved.
 When this code was converted from 16 to 32-bits, 16-bit compatibility was
 abandonded.
 The 
\family typewriter
\series bold
LONG
\family default
\series default
 fields were added and the 
\family typewriter
\series bold
DOUBLE
\family default
\series default
 fields were extended to cover 64-bits.
 However, this time the desire is to preserve the compatibility and not
 add another field type.
 Therefore, another solution must be developed, which can actually bring
 back the support for the incompatible, 16-bit systems.
 To test this, we need to make sure that stack effects don't affect the
 test, like this:
\end_layout

\begin_layout Scrap
<<double-stacked>>=
\begin_inset Newline newline
\end_inset

: double-stacked ( a n -- flag )   READ >R DEPTH R> SWAP >R D@ 2DROP DEPTH
 R> - 0= ;
\begin_inset Newline newline
\end_inset

@
\end_layout

\begin_layout Standard
The WINES example works fine at this point, as does the GLOSSARY, so we
 are done for now.
 However, it's is worth noting, in summary, that I did not test everything,
 which is appropriate for legacy applications, such as this.
 Tests can be added as needed, when problems are found.
\end_layout

\end_body
\end_document
